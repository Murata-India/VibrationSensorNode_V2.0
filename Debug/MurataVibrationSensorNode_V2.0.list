
MurataVibrationSensorNode_V2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011008  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000092a0  080111a8  080111a8  000211a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a448  0801a448  000302f8  2**0
                  CONTENTS
  4 .ARM          00000008  0801a448  0801a448  0002a448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a450  0801a450  000302f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a450  0801a450  0002a450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a454  0801a454  0002a454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  0801a458  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012614  200002f8  0801a750  000302f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001290c  0801a750  0003290c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004023d  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006d62  00000000  00000000  00070565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da0  00000000  00000000  000772c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bf0  00000000  00000000  00079068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bc82  00000000  00000000  0007ac58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000265f4  00000000  00000000  000a68da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd480  00000000  00000000  000ccece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  001ca34e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008cdc  00000000  00000000  001ca418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000030bb  00000000  00000000  001d30f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000003c  00000000  00000000  001d61b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000076  00000000  00000000  001d61ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002f8 	.word	0x200002f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011190 	.word	0x08011190

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002fc 	.word	0x200002fc
 80001dc:	08011190 	.word	0x08011190

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <MX_Master_Init>:

/* Exported functions --------------------------------------------------------*/


void MX_Master_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8000f54:	f002 ff28 	bl	8003da8 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */


  MasterApp_Init();
 8000f58:	f001 faba 	bl	80024d0 <MasterApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <MX_Master_Process>:

void MX_Master_Process(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0

    /*if using sequencer comment the following code*/
    /* run the LoRa Modem state machine*/
    Lora_fsm();
 8000f64:	f001 f9de 	bl	8002324 <Lora_fsm>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f68:	b672      	cpsid	i
}
 8000f6a:	bf00      	nop
    DISABLE_IRQ();
    /* if an interrupt has occurred after DISABLE_IRQ, it is kept pending
     * and cortex will not enter low power anyway  */
    if ((lora_getDeviceState() == DEVICE_SLEEP && lora_getDeviceSubState() != DEVICE_JOIN_ON_GOING) && (HW_UART_Modem_IsNewCharReceived() == RESET))
 8000f6c:	f001 fa84 	bl	8002478 <lora_getDeviceState>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	d113      	bne.n	8000f9e <MX_Master_Process+0x3e>
 8000f76:	f001 fa8b 	bl	8002490 <lora_getDeviceSubState>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b05      	cmp	r3, #5
 8000f7e:	d00e      	beq.n	8000f9e <MX_Master_Process+0x3e>
 8000f80:	f003 f930 	bl	80041e4 <HW_UART_Modem_IsNewCharReceived>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d109      	bne.n	8000f9e <MX_Master_Process+0x3e>
    {

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 0)
     // DBG_PRINTF("Entering low power mode");
      //HAL_PWREx_EnableInternalWakeUpLine();
      HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,10,RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //3600
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	210a      	movs	r1, #10
 8000f8e:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <MX_Master_Process+0x48>)
 8000f90:	f007 fe2c 	bl	8008bec <HAL_RTCEx_SetWakeUpTimer_IT>
     /* WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_READDATA_NONEMPTY;
      if (HAL_UARTEx_StopModeWakeUpSourceConfig(&hlpuart1, WakeUpSelection)!= HAL_OK)
      {
      		Error_Handler();
      }*/
      UTIL_LPM_EnterLowPower();
 8000f94:	f00a f90c 	bl	800b1b0 <UTIL_LPM_EnterLowPower>
      //DBG_PRINTF("Exiting low power mode");
      HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000f98:	4803      	ldr	r0, [pc, #12]	; (8000fa8 <MX_Master_Process+0x48>)
 8000f9a:	f007 febb 	bl	8008d14 <HAL_RTCEx_DeactivateWakeUpTimer>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f9e:	b662      	cpsie	i
}
 8000fa0:	bf00      	nop
  /* if using sequencer uncomment the call to the sequencer*/
  /*UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);*/
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000c87c 	.word	0x2000c87c

08000fac <Modem_IO_Init>:
  * @param  None
  * @retval AT_OK in case of success
  * @retval AT_UART_LINK_ERROR in case of failure
  *****************************************************************************/
ATEerror_t Modem_IO_Init(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
	return AT_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <Modem_AT_Cmd>:
  *         Cmd AT command
  *         pdata pointer to the IN/OUT buffer
  * @retval module status
  *****************************************************************************/
ATEerror_t  Modem_AT_Cmd(ATGroup_t at_group, ATCmd_t Cmd, void *pdata)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	603a      	str	r2, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	71bb      	strb	r3, [r7, #6]
  ATEerror_t Status = AT_END_ERROR;
 8000fcc:	2308      	movs	r3, #8
 8000fce:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef HAL_Status;
  uint16_t Len;

  /*reset At_cmd buffer for each transmission*/
  memset(LoRa_AT_Cmd_Buff, 0x00, sizeof LoRa_AT_Cmd_Buff);
 8000fd0:	224e      	movs	r2, #78	; 0x4e
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4839      	ldr	r0, [pc, #228]	; (80010bc <Modem_AT_Cmd+0x100>)
 8000fd6:	f00b fe65 	bl	800cca4 <memset>

  switch (at_group)
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d863      	bhi.n	80010a8 <Modem_AT_Cmd+0xec>
 8000fe0:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <Modem_AT_Cmd+0x2c>)
 8000fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe6:	bf00      	nop
 8000fe8:	08000ffd 	.word	0x08000ffd
 8000fec:	08001035 	.word	0x08001035
 8000ff0:	08001067 	.word	0x08001067
 8000ff4:	080010a9 	.word	0x080010a9
 8000ff8:	08001099 	.word	0x08001099
  {
    case AT_CTRL:
    {
      Len = at_cmd_format(Cmd, NULL, CTRL_MARKER);
 8000ffc:	79bb      	ldrb	r3, [r7, #6]
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f85c 	bl	80010c0 <at_cmd_format>
 8001008:	4603      	mov	r3, r0
 800100a:	81bb      	strh	r3, [r7, #12]
      //DBG_PRINTF("Command Sent !\n");
      HAL_Status = at_cmd_send(Len);
 800100c:	89bb      	ldrh	r3, [r7, #12]
 800100e:	4618      	mov	r0, r3
 8001010:	f000 fb16 	bl	8001640 <at_cmd_send>
 8001014:	4603      	mov	r3, r0
 8001016:	72fb      	strb	r3, [r7, #11]
      if (HAL_Status != HAL_OK)
 8001018:	7afb      	ldrb	r3, [r7, #11]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <Modem_AT_Cmd+0x66>
      {
        return (AT_UART_LINK_ERROR);  /*problem on UART transmission*/
 800101e:	2309      	movs	r3, #9
 8001020:	e048      	b.n	80010b4 <Modem_AT_Cmd+0xf8>
      }
      if (Cmd != AT_RESET)
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d041      	beq.n	80010ac <Modem_AT_Cmd+0xf0>
      {
        //DBG_PRINTF("Waiting to Receive !\n");
        Status = at_cmd_receive(NULL);
 8001028:	2000      	movs	r0, #0
 800102a:	f000 fb21 	bl	8001670 <at_cmd_receive>
 800102e:	4603      	mov	r3, r0
 8001030:	73fb      	strb	r3, [r7, #15]
       // DBG_PRINTF("Received  !\n");

      }
      break;
 8001032:	e03b      	b.n	80010ac <Modem_AT_Cmd+0xf0>
    }
    case AT_SET:
    {
      Len = at_cmd_format(Cmd, pdata, SET_MARKER);
 8001034:	79bb      	ldrb	r3, [r7, #6]
 8001036:	2201      	movs	r2, #1
 8001038:	6839      	ldr	r1, [r7, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f840 	bl	80010c0 <at_cmd_format>
 8001040:	4603      	mov	r3, r0
 8001042:	81bb      	strh	r3, [r7, #12]
      HAL_Status = at_cmd_send(Len);
 8001044:	89bb      	ldrh	r3, [r7, #12]
 8001046:	4618      	mov	r0, r3
 8001048:	f000 fafa 	bl	8001640 <at_cmd_send>
 800104c:	4603      	mov	r3, r0
 800104e:	72fb      	strb	r3, [r7, #11]
      if (HAL_Status != HAL_OK)
 8001050:	7afb      	ldrb	r3, [r7, #11]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <Modem_AT_Cmd+0x9e>
      {
        return (AT_UART_LINK_ERROR);  /*problem on UART transmission*/
 8001056:	2309      	movs	r3, #9
 8001058:	e02c      	b.n	80010b4 <Modem_AT_Cmd+0xf8>
      }
      Status = at_cmd_receive(NULL);
 800105a:	2000      	movs	r0, #0
 800105c:	f000 fb08 	bl	8001670 <at_cmd_receive>
 8001060:	4603      	mov	r3, r0
 8001062:	73fb      	strb	r3, [r7, #15]
      break;
 8001064:	e025      	b.n	80010b2 <Modem_AT_Cmd+0xf6>
    }
    case AT_GET:
    {
      Len = at_cmd_format(Cmd, pdata, GET_MARKER);
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	2202      	movs	r2, #2
 800106a:	6839      	ldr	r1, [r7, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f000 f827 	bl	80010c0 <at_cmd_format>
 8001072:	4603      	mov	r3, r0
 8001074:	81bb      	strh	r3, [r7, #12]
      HAL_Status = at_cmd_send(Len);
 8001076:	89bb      	ldrh	r3, [r7, #12]
 8001078:	4618      	mov	r0, r3
 800107a:	f000 fae1 	bl	8001640 <at_cmd_send>
 800107e:	4603      	mov	r3, r0
 8001080:	72fb      	strb	r3, [r7, #11]
      if (HAL_Status != HAL_OK)
 8001082:	7afb      	ldrb	r3, [r7, #11]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <Modem_AT_Cmd+0xd0>
      {
        return (AT_UART_LINK_ERROR);  /*problem on UART transmission*/
 8001088:	2309      	movs	r3, #9
 800108a:	e013      	b.n	80010b4 <Modem_AT_Cmd+0xf8>
      }
      Status = at_cmd_receive(pdata);
 800108c:	6838      	ldr	r0, [r7, #0]
 800108e:	f000 faef 	bl	8001670 <at_cmd_receive>
 8001092:	4603      	mov	r3, r0
 8001094:	73fb      	strb	r3, [r7, #15]
      break;
 8001096:	e00c      	b.n	80010b2 <Modem_AT_Cmd+0xf6>
    }
    case AT_ASYNC_EVENT:
    {
	  if (Cmd == AT_JOIN)
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	2b02      	cmp	r3, #2
 800109c:	d108      	bne.n	80010b0 <Modem_AT_Cmd+0xf4>
	  {
		Status = at_cmd_receive_async_event();
 800109e:	f000 fb8f 	bl	80017c0 <at_cmd_receive_async_event>
 80010a2:	4603      	mov	r3, r0
 80010a4:	73fb      	strb	r3, [r7, #15]
	  }
	  else
	  {
		//Status = at_cmd_receive_async_event_downlink_data(pdata);
	  }
	  break;
 80010a6:	e003      	b.n	80010b0 <Modem_AT_Cmd+0xf4>
    }
    default:
      DBG_PRINTF("unknown group\n\r");
      break;
 80010a8:	bf00      	nop
 80010aa:	e002      	b.n	80010b2 <Modem_AT_Cmd+0xf6>
      break;
 80010ac:	bf00      	nop
 80010ae:	e000      	b.n	80010b2 <Modem_AT_Cmd+0xf6>
	  break;
 80010b0:	bf00      	nop

  } /*end switch (at_group)*/
  return Status;
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000674 	.word	0x20000674

080010c0 <at_cmd_format>:
  *         ptr generic pointer to the IN/OUT buffer
  *         Marker to discriminate the Set from the Get
  * @retval length of the formatted frame to be send
  *****************************************************************************/
static uint8_t at_cmd_format(ATCmd_t Cmd, void *ptr, Marker_t Marker)
{
 80010c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c2:	b0a3      	sub	sp, #140	; 0x8c
 80010c4:	af10      	add	r7, sp, #64	; 0x40
 80010c6:	4603      	mov	r3, r0
 80010c8:	62b9      	str	r1, [r7, #40]	; 0x28
 80010ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80010ce:	4613      	mov	r3, r2
 80010d0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t value_8;   /*for 8_D*/
  char value_c;      /*for 8_C*/



  switch (Cmd)
 80010d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010d8:	2b23      	cmp	r3, #35	; 0x23
 80010da:	f200 8288 	bhi.w	80015ee <at_cmd_format+0x52e>
 80010de:	a201      	add	r2, pc, #4	; (adr r2, 80010e4 <at_cmd_format+0x24>)
 80010e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e4:	08001175 	.word	0x08001175
 80010e8:	08001175 	.word	0x08001175
 80010ec:	08001175 	.word	0x08001175
 80010f0:	08001553 	.word	0x08001553
 80010f4:	08001475 	.word	0x08001475
 80010f8:	080013c3 	.word	0x080013c3
 80010fc:	080012d1 	.word	0x080012d1
 8001100:	080012d1 	.word	0x080012d1
 8001104:	080012d1 	.word	0x080012d1
 8001108:	08001475 	.word	0x08001475
 800110c:	08001553 	.word	0x08001553
 8001110:	08001553 	.word	0x08001553
 8001114:	08001553 	.word	0x08001553
 8001118:	08001553 	.word	0x08001553
 800111c:	08001553 	.word	0x08001553
 8001120:	08001509 	.word	0x08001509
 8001124:	08001553 	.word	0x08001553
 8001128:	08001509 	.word	0x08001509
 800112c:	08001509 	.word	0x08001509
 8001130:	08001509 	.word	0x08001509
 8001134:	08001509 	.word	0x08001509
 8001138:	08001553 	.word	0x08001553
 800113c:	080013c3 	.word	0x080013c3
 8001140:	08001509 	.word	0x08001509
 8001144:	08001509 	.word	0x08001509
 8001148:	080015a1 	.word	0x080015a1
 800114c:	0800121d 	.word	0x0800121d
 8001150:	080011c3 	.word	0x080011c3
 8001154:	0800121d 	.word	0x0800121d
 8001158:	080011c3 	.word	0x080011c3
 800115c:	08001553 	.word	0x08001553
 8001160:	08001553 	.word	0x08001553
 8001164:	08001553 	.word	0x08001553
 8001168:	08001553 	.word	0x08001553
 800116c:	08001553 	.word	0x08001553
 8001170:	080011c3 	.word	0x080011c3
  {
    case AT:
    case AT_RESET:
    case AT_JOIN:
    {
      if (Marker == SET_MARKER)
 8001174:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001178:	2b01      	cmp	r3, #1
 800117a:	d114      	bne.n	80011a6 <at_cmd_format+0xe6>
      {
        value_8 =  *(uint8_t *)ptr;
 800117c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        len = AT_VPRINTF("%s%s%s%d\r\n", AT_HEADER, CmdTab[Cmd], AT_SET_MARKER, value_8);
 8001184:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001188:	4aa3      	ldr	r2, [pc, #652]	; (8001418 <at_cmd_format+0x358>)
 800118a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800118e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	4ba1      	ldr	r3, [pc, #644]	; (800141c <at_cmd_format+0x35c>)
 8001196:	49a2      	ldr	r1, [pc, #648]	; (8001420 <at_cmd_format+0x360>)
 8001198:	48a2      	ldr	r0, [pc, #648]	; (8001424 <at_cmd_format+0x364>)
 800119a:	f000 fc35 	bl	8001a08 <at_cmd_vprintf>
 800119e:	4603      	mov	r3, r0
 80011a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      else
      {
      /*Format = FORMAT_VOID_PARAM;*/
      len = AT_VPRINTF("%s%s\r\n", AT_HEADER, CmdTab[Cmd]);
      }
      break;
 80011a4:	e232      	b.n	800160c <at_cmd_format+0x54c>
      len = AT_VPRINTF("%s%s\r\n", AT_HEADER, CmdTab[Cmd]);
 80011a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011aa:	4a9b      	ldr	r2, [pc, #620]	; (8001418 <at_cmd_format+0x358>)
 80011ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b0:	461a      	mov	r2, r3
 80011b2:	499b      	ldr	r1, [pc, #620]	; (8001420 <at_cmd_format+0x360>)
 80011b4:	489c      	ldr	r0, [pc, #624]	; (8001428 <at_cmd_format+0x368>)
 80011b6:	f000 fc27 	bl	8001a08 <at_cmd_vprintf>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      break;
 80011c0:	e224      	b.n	800160c <at_cmd_format+0x54c>
    case  AT_SEND:
    case  AT_RECV:
    case  AT_VER:
    {
      /*Format = FORMAT_PLAIN_TEXT;*/
      if (Marker == SET_MARKER)
 80011c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d11a      	bne.n	8001200 <at_cmd_format+0x140>
        len = AT_VPRINTF("%s%s%s%d%s%d%s%s\r\n", AT_HEADER, CmdTab[Cmd], AT_SET_MARKER, ((sSendDataString_t *)ptr)->Port,
 80011ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011ce:	4a92      	ldr	r2, [pc, #584]	; (8001418 <at_cmd_format+0x358>)
 80011d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d6:	791b      	ldrb	r3, [r3, #4]
 80011d8:	4619      	mov	r1, r3
 80011da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	9304      	str	r3, [sp, #16]
 80011e0:	4b92      	ldr	r3, [pc, #584]	; (800142c <at_cmd_format+0x36c>)
 80011e2:	9303      	str	r3, [sp, #12]
 80011e4:	2300      	movs	r3, #0
 80011e6:	9302      	str	r3, [sp, #8]
 80011e8:	4b90      	ldr	r3, [pc, #576]	; (800142c <at_cmd_format+0x36c>)
 80011ea:	9301      	str	r3, [sp, #4]
 80011ec:	9100      	str	r1, [sp, #0]
 80011ee:	4b8b      	ldr	r3, [pc, #556]	; (800141c <at_cmd_format+0x35c>)
 80011f0:	498b      	ldr	r1, [pc, #556]	; (8001420 <at_cmd_format+0x360>)
 80011f2:	488f      	ldr	r0, [pc, #572]	; (8001430 <at_cmd_format+0x370>)
 80011f4:	f000 fc08 	bl	8001a08 <at_cmd_vprintf>
 80011f8:	4603      	mov	r3, r0
 80011fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
                         AT_COLON,0,AT_COLON,((sSendDataString_t *)ptr)->Buffer);
      else
      {
        len = AT_VPRINTF("%s%s%s\r\n", AT_HEADER, CmdTab[Cmd], AT_GET_MARKER);
      }
      break;
 80011fe:	e205      	b.n	800160c <at_cmd_format+0x54c>
        len = AT_VPRINTF("%s%s%s\r\n", AT_HEADER, CmdTab[Cmd], AT_GET_MARKER);
 8001200:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001204:	4a84      	ldr	r2, [pc, #528]	; (8001418 <at_cmd_format+0x358>)
 8001206:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800120a:	4b8a      	ldr	r3, [pc, #552]	; (8001434 <at_cmd_format+0x374>)
 800120c:	4984      	ldr	r1, [pc, #528]	; (8001420 <at_cmd_format+0x360>)
 800120e:	488a      	ldr	r0, [pc, #552]	; (8001438 <at_cmd_format+0x378>)
 8001210:	f000 fbfa 	bl	8001a08 <at_cmd_vprintf>
 8001214:	4603      	mov	r3, r0
 8001216:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      break;
 800121a:	e1f7      	b.n	800160c <at_cmd_format+0x54c>
    }
    case  AT_SENDB:
    case  AT_RECVB:
    {
      /*Format = FORMAT_BINARY_TEXT; */
      if (Marker == SET_MARKER)
 800121c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001220:	2b01      	cmp	r3, #1
 8001222:	d147      	bne.n	80012b4 <at_cmd_format+0x1f4>
      {
        Offset = AT_VPRINTF("%s%s%s%d%s%d%s", AT_HEADER, CmdTab[Cmd], AT_SET_MARKER, ((sSendDataBinary_t *)ptr)->Port,AT_COLON,0,AT_COLON);
 8001224:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001228:	4a7b      	ldr	r2, [pc, #492]	; (8001418 <at_cmd_format+0x358>)
 800122a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800122e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001230:	795b      	ldrb	r3, [r3, #5]
 8001232:	4619      	mov	r1, r3
 8001234:	4b7d      	ldr	r3, [pc, #500]	; (800142c <at_cmd_format+0x36c>)
 8001236:	9303      	str	r3, [sp, #12]
 8001238:	2300      	movs	r3, #0
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	4b7b      	ldr	r3, [pc, #492]	; (800142c <at_cmd_format+0x36c>)
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	9100      	str	r1, [sp, #0]
 8001242:	4b76      	ldr	r3, [pc, #472]	; (800141c <at_cmd_format+0x35c>)
 8001244:	4976      	ldr	r1, [pc, #472]	; (8001420 <at_cmd_format+0x360>)
 8001246:	487d      	ldr	r0, [pc, #500]	; (800143c <at_cmd_format+0x37c>)
 8001248:	f000 fbde 	bl	8001a08 <at_cmd_vprintf>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	4b7b      	ldr	r3, [pc, #492]	; (8001440 <at_cmd_format+0x380>)
 8001252:	801a      	strh	r2, [r3, #0]
        unsigned i;
        for (i = 0; i < ((sSendDataBinary_t *)ptr)->DataSize; i++)
 8001254:	2300      	movs	r3, #0
 8001256:	643b      	str	r3, [r7, #64]	; 0x40
 8001258:	e013      	b.n	8001282 <at_cmd_format+0x1c2>
        {
          Offset += AT_VPRINTF("%02x", ((sSendDataBinary_t *)ptr)->Buffer[i]);
 800125a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001260:	4413      	add	r3, r2
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	4877      	ldr	r0, [pc, #476]	; (8001444 <at_cmd_format+0x384>)
 8001268:	f000 fbce 	bl	8001a08 <at_cmd_vprintf>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	4b73      	ldr	r3, [pc, #460]	; (8001440 <at_cmd_format+0x380>)
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	4413      	add	r3, r2
 8001276:	b29a      	uxth	r2, r3
 8001278:	4b71      	ldr	r3, [pc, #452]	; (8001440 <at_cmd_format+0x380>)
 800127a:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < ((sSendDataBinary_t *)ptr)->DataSize; i++)
 800127c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800127e:	3301      	adds	r3, #1
 8001280:	643b      	str	r3, [r7, #64]	; 0x40
 8001282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001284:	791b      	ldrb	r3, [r3, #4]
 8001286:	461a      	mov	r2, r3
 8001288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800128a:	4293      	cmp	r3, r2
 800128c:	d3e5      	bcc.n	800125a <at_cmd_format+0x19a>
        }
        Offset += AT_VPRINTF("\r\n");
 800128e:	486e      	ldr	r0, [pc, #440]	; (8001448 <at_cmd_format+0x388>)
 8001290:	f000 fbba 	bl	8001a08 <at_cmd_vprintf>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	4b69      	ldr	r3, [pc, #420]	; (8001440 <at_cmd_format+0x380>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	4413      	add	r3, r2
 800129e:	b29a      	uxth	r2, r3
 80012a0:	4b67      	ldr	r3, [pc, #412]	; (8001440 <at_cmd_format+0x380>)
 80012a2:	801a      	strh	r2, [r3, #0]
        len = Offset;
 80012a4:	4b66      	ldr	r3, [pc, #408]	; (8001440 <at_cmd_format+0x380>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        Offset = 0;
 80012ac:	4b64      	ldr	r3, [pc, #400]	; (8001440 <at_cmd_format+0x380>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	801a      	strh	r2, [r3, #0]
      }
      else
      {
        len = AT_VPRINTF("AT%s%s\r\n", CmdTab[Cmd], AT_GET_MARKER);
      }
      break;
 80012b2:	e1ab      	b.n	800160c <at_cmd_format+0x54c>
        len = AT_VPRINTF("AT%s%s\r\n", CmdTab[Cmd], AT_GET_MARKER);
 80012b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012b8:	4a57      	ldr	r2, [pc, #348]	; (8001418 <at_cmd_format+0x358>)
 80012ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012be:	4a5d      	ldr	r2, [pc, #372]	; (8001434 <at_cmd_format+0x374>)
 80012c0:	4619      	mov	r1, r3
 80012c2:	4862      	ldr	r0, [pc, #392]	; (800144c <at_cmd_format+0x38c>)
 80012c4:	f000 fba0 	bl	8001a08 <at_cmd_vprintf>
 80012c8:	4603      	mov	r3, r0
 80012ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      break;
 80012ce:	e19d      	b.n	800160c <at_cmd_format+0x54c>
    case AT_APPKEY:
    case AT_NWKSKEY:
    case AT_APPSKEY:
    {
      /*Format = FORMAT_16_02X_PARAM;*/
      PtrValue = (uint8_t *) ptr;
 80012d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d2:	63bb      	str	r3, [r7, #56]	; 0x38
      if (Marker == SET_MARKER)
 80012d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d164      	bne.n	80013a6 <at_cmd_format+0x2e6>
      {
        len = AT_VPRINTF("AT%s%s%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x\r\n",
 80012dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012e0:	4a4d      	ldr	r2, [pc, #308]	; (8001418 <at_cmd_format+0x358>)
 80012e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	469c      	mov	ip, r3
 80012ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ee:	3301      	adds	r3, #1
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461d      	mov	r5, r3
 80012f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012f6:	3302      	adds	r3, #2
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461e      	mov	r6, r3
 80012fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012fe:	3303      	adds	r3, #3
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
 8001304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001306:	3304      	adds	r3, #4
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	623b      	str	r3, [r7, #32]
 800130c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800130e:	3305      	adds	r3, #5
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001316:	3306      	adds	r3, #6
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	61bb      	str	r3, [r7, #24]
 800131c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800131e:	3307      	adds	r3, #7
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001326:	3308      	adds	r3, #8
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800132e:	3309      	adds	r3, #9
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001336:	330a      	adds	r3, #10
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800133e:	330b      	adds	r3, #11
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001346:	330c      	adds	r3, #12
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	461c      	mov	r4, r3
 800134c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800134e:	330d      	adds	r3, #13
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	4619      	mov	r1, r3
 8001354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001356:	330e      	adds	r3, #14
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800135e:	330f      	adds	r3, #15
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	930e      	str	r3, [sp, #56]	; 0x38
 8001364:	920d      	str	r2, [sp, #52]	; 0x34
 8001366:	910c      	str	r1, [sp, #48]	; 0x30
 8001368:	940b      	str	r4, [sp, #44]	; 0x2c
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	920a      	str	r2, [sp, #40]	; 0x28
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	9209      	str	r2, [sp, #36]	; 0x24
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	9208      	str	r2, [sp, #32]
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	9207      	str	r2, [sp, #28]
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	9206      	str	r2, [sp, #24]
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	9205      	str	r2, [sp, #20]
 8001382:	69fa      	ldr	r2, [r7, #28]
 8001384:	9204      	str	r2, [sp, #16]
 8001386:	6a3a      	ldr	r2, [r7, #32]
 8001388:	9203      	str	r2, [sp, #12]
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	9302      	str	r3, [sp, #8]
 800138e:	9601      	str	r6, [sp, #4]
 8001390:	9500      	str	r5, [sp, #0]
 8001392:	4663      	mov	r3, ip
 8001394:	4a21      	ldr	r2, [pc, #132]	; (800141c <at_cmd_format+0x35c>)
 8001396:	4601      	mov	r1, r0
 8001398:	482d      	ldr	r0, [pc, #180]	; (8001450 <at_cmd_format+0x390>)
 800139a:	f000 fb35 	bl	8001a08 <at_cmd_vprintf>
 800139e:	4603      	mov	r3, r0
 80013a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      }
      else
      {
        len = AT_VPRINTF("AT%s%s\r\n", CmdTab[Cmd], AT_GET_MARKER);
      }
      break;
 80013a4:	e132      	b.n	800160c <at_cmd_format+0x54c>
        len = AT_VPRINTF("AT%s%s\r\n", CmdTab[Cmd], AT_GET_MARKER);
 80013a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013aa:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <at_cmd_format+0x358>)
 80013ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b0:	4a20      	ldr	r2, [pc, #128]	; (8001434 <at_cmd_format+0x374>)
 80013b2:	4619      	mov	r1, r3
 80013b4:	4825      	ldr	r0, [pc, #148]	; (800144c <at_cmd_format+0x38c>)
 80013b6:	f000 fb27 	bl	8001a08 <at_cmd_vprintf>
 80013ba:	4603      	mov	r3, r0
 80013bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      break;
 80013c0:	e124      	b.n	800160c <at_cmd_format+0x54c>
    }
    case AT_DADDR:
    case AT_NWKID:
    {
      /*Format = FORMAT_32_02X_PARAM;*/
      value =  *(uint32_t *)ptr;
 80013c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	633b      	str	r3, [r7, #48]	; 0x30
      if (Marker == SET_MARKER)
 80013c8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d143      	bne.n	8001458 <at_cmd_format+0x398>
      {
        len = AT_VPRINTF("%s%s%s%02x:%02x:%02x:%02x\r\n", AT_HEADER, CmdTab[Cmd], AT_SET_MARKER,
 80013d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013d4:	4a10      	ldr	r2, [pc, #64]	; (8001418 <at_cmd_format+0x358>)
 80013d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013de:	3303      	adds	r3, #3
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	4619      	mov	r1, r3
 80013e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013e8:	3302      	adds	r3, #2
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013f2:	3301      	adds	r3, #1
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461c      	mov	r4, r3
 80013f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	9303      	str	r3, [sp, #12]
 8001400:	9402      	str	r4, [sp, #8]
 8001402:	9001      	str	r0, [sp, #4]
 8001404:	9100      	str	r1, [sp, #0]
 8001406:	4b05      	ldr	r3, [pc, #20]	; (800141c <at_cmd_format+0x35c>)
 8001408:	4905      	ldr	r1, [pc, #20]	; (8001420 <at_cmd_format+0x360>)
 800140a:	4812      	ldr	r0, [pc, #72]	; (8001454 <at_cmd_format+0x394>)
 800140c:	f000 fafc 	bl	8001a08 <at_cmd_vprintf>
 8001410:	4603      	mov	r3, r0
 8001412:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      }
      else
      {
        len = AT_VPRINTF("%s%s%s\r\n", AT_HEADER, CmdTab[Cmd], AT_GET_MARKER);
      }
      break;
 8001416:	e0f9      	b.n	800160c <at_cmd_format+0x54c>
 8001418:	20000000 	.word	0x20000000
 800141c:	08011374 	.word	0x08011374
 8001420:	08011378 	.word	0x08011378
 8001424:	0801137c 	.word	0x0801137c
 8001428:	08011388 	.word	0x08011388
 800142c:	080113a4 	.word	0x080113a4
 8001430:	08011390 	.word	0x08011390
 8001434:	080113a8 	.word	0x080113a8
 8001438:	080113ac 	.word	0x080113ac
 800143c:	080113b8 	.word	0x080113b8
 8001440:	20000314 	.word	0x20000314
 8001444:	080113c8 	.word	0x080113c8
 8001448:	080113d0 	.word	0x080113d0
 800144c:	080113d4 	.word	0x080113d4
 8001450:	080113e0 	.word	0x080113e0
 8001454:	08011438 	.word	0x08011438
        len = AT_VPRINTF("%s%s%s\r\n", AT_HEADER, CmdTab[Cmd], AT_GET_MARKER);
 8001458:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800145c:	4a6f      	ldr	r2, [pc, #444]	; (800161c <at_cmd_format+0x55c>)
 800145e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001462:	4b6f      	ldr	r3, [pc, #444]	; (8001620 <at_cmd_format+0x560>)
 8001464:	496f      	ldr	r1, [pc, #444]	; (8001624 <at_cmd_format+0x564>)
 8001466:	4870      	ldr	r0, [pc, #448]	; (8001628 <at_cmd_format+0x568>)
 8001468:	f000 face 	bl	8001a08 <at_cmd_vprintf>
 800146c:	4603      	mov	r3, r0
 800146e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      break;
 8001472:	e0cb      	b.n	800160c <at_cmd_format+0x54c>
    }
    case AT_APPEUI:
    case AT_DEUI:
    {
      /*Format = FORMAT_8_02X_PARAM;*/
      PtrValue = (uint8_t *)ptr;
 8001474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001476:	63bb      	str	r3, [r7, #56]	; 0x38
      if (Marker == SET_MARKER)
 8001478:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800147c:	2b01      	cmp	r3, #1
 800147e:	d135      	bne.n	80014ec <at_cmd_format+0x42c>
      {
        len = AT_VPRINTF("%s%s%s%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x\r\n", AT_HEADER,
 8001480:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001484:	4a65      	ldr	r2, [pc, #404]	; (800161c <at_cmd_format+0x55c>)
 8001486:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800148a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	4619      	mov	r1, r3
 8001490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001492:	3301      	adds	r3, #1
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800149a:	3302      	adds	r3, #2
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461c      	mov	r4, r3
 80014a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014a2:	3303      	adds	r3, #3
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461d      	mov	r5, r3
 80014a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014aa:	3304      	adds	r3, #4
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461e      	mov	r6, r3
 80014b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b2:	3305      	adds	r3, #5
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
 80014b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ba:	3306      	adds	r3, #6
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	623b      	str	r3, [r7, #32]
 80014c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014c2:	3307      	adds	r3, #7
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	9307      	str	r3, [sp, #28]
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	9306      	str	r3, [sp, #24]
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	9305      	str	r3, [sp, #20]
 80014d0:	9604      	str	r6, [sp, #16]
 80014d2:	9503      	str	r5, [sp, #12]
 80014d4:	9402      	str	r4, [sp, #8]
 80014d6:	9001      	str	r0, [sp, #4]
 80014d8:	9100      	str	r1, [sp, #0]
 80014da:	4b54      	ldr	r3, [pc, #336]	; (800162c <at_cmd_format+0x56c>)
 80014dc:	4951      	ldr	r1, [pc, #324]	; (8001624 <at_cmd_format+0x564>)
 80014de:	4854      	ldr	r0, [pc, #336]	; (8001630 <at_cmd_format+0x570>)
 80014e0:	f000 fa92 	bl	8001a08 <at_cmd_vprintf>
 80014e4:	4603      	mov	r3, r0
 80014e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      }
      else
      {
        len = AT_VPRINTF("%s%s%s\r\n", AT_HEADER, CmdTab[Cmd], AT_GET_MARKER);
      }
      break;
 80014ea:	e08f      	b.n	800160c <at_cmd_format+0x54c>
        len = AT_VPRINTF("%s%s%s\r\n", AT_HEADER, CmdTab[Cmd], AT_GET_MARKER);
 80014ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014f0:	4a4a      	ldr	r2, [pc, #296]	; (800161c <at_cmd_format+0x55c>)
 80014f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014f6:	4b4a      	ldr	r3, [pc, #296]	; (8001620 <at_cmd_format+0x560>)
 80014f8:	494a      	ldr	r1, [pc, #296]	; (8001624 <at_cmd_format+0x564>)
 80014fa:	484b      	ldr	r0, [pc, #300]	; (8001628 <at_cmd_format+0x568>)
 80014fc:	f000 fa84 	bl	8001a08 <at_cmd_vprintf>
 8001500:	4603      	mov	r3, r0
 8001502:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      break;
 8001506:	e081      	b.n	800160c <at_cmd_format+0x54c>
    case  AT_JN2DL:
    case  AT_FCU:
    case  AT_FCD:
    {
      /*Format = FORMAT_32_D_PARAM;*/
      if (Marker == SET_MARKER)
 8001508:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800150c:	2b01      	cmp	r3, #1
 800150e:	d112      	bne.n	8001536 <at_cmd_format+0x476>
      {
        value =  *(uint32_t *)ptr;
 8001510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	633b      	str	r3, [r7, #48]	; 0x30
        len = AT_VPRINTF("%s%s%s%u\r\n", AT_HEADER, CmdTab[Cmd], AT_SET_MARKER, value);
 8001516:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800151a:	4a40      	ldr	r2, [pc, #256]	; (800161c <at_cmd_format+0x55c>)
 800151c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	4b41      	ldr	r3, [pc, #260]	; (800162c <at_cmd_format+0x56c>)
 8001526:	493f      	ldr	r1, [pc, #252]	; (8001624 <at_cmd_format+0x564>)
 8001528:	4842      	ldr	r0, [pc, #264]	; (8001634 <at_cmd_format+0x574>)
 800152a:	f000 fa6d 	bl	8001a08 <at_cmd_vprintf>
 800152e:	4603      	mov	r3, r0
 8001530:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      }
      else
      {
        len = AT_VPRINTF("%s%s%s\r\n", AT_HEADER, CmdTab[Cmd], AT_GET_MARKER);
      }
      break;
 8001534:	e06a      	b.n	800160c <at_cmd_format+0x54c>
        len = AT_VPRINTF("%s%s%s\r\n", AT_HEADER, CmdTab[Cmd], AT_GET_MARKER);
 8001536:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800153a:	4a38      	ldr	r2, [pc, #224]	; (800161c <at_cmd_format+0x55c>)
 800153c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001540:	4b37      	ldr	r3, [pc, #220]	; (8001620 <at_cmd_format+0x560>)
 8001542:	4938      	ldr	r1, [pc, #224]	; (8001624 <at_cmd_format+0x564>)
 8001544:	4838      	ldr	r0, [pc, #224]	; (8001628 <at_cmd_format+0x568>)
 8001546:	f000 fa5f 	bl	8001a08 <at_cmd_vprintf>
 800154a:	4603      	mov	r3, r0
 800154c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      break;
 8001550:	e05c      	b.n	800160c <at_cmd_format+0x54c>
    case  AT_RSSI:
    case  AT_SNR:
    case  AT_NJS:
    {
      /*Format = FORMAT_8_D_PARAM;*/
      if (Marker == SET_MARKER)
 8001552:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001556:	2b01      	cmp	r3, #1
 8001558:	d114      	bne.n	8001584 <at_cmd_format+0x4c4>
      {
        value_8 =  *(uint8_t *)ptr;
 800155a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        len = AT_VPRINTF("%s%s%s%d\r\n", AT_HEADER, CmdTab[Cmd], AT_SET_MARKER, value_8);
 8001562:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001566:	4a2d      	ldr	r2, [pc, #180]	; (800161c <at_cmd_format+0x55c>)
 8001568:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800156c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	4b2e      	ldr	r3, [pc, #184]	; (800162c <at_cmd_format+0x56c>)
 8001574:	492b      	ldr	r1, [pc, #172]	; (8001624 <at_cmd_format+0x564>)
 8001576:	4830      	ldr	r0, [pc, #192]	; (8001638 <at_cmd_format+0x578>)
 8001578:	f000 fa46 	bl	8001a08 <at_cmd_vprintf>
 800157c:	4603      	mov	r3, r0
 800157e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      }
      else
      {
        len = AT_VPRINTF("%s%s%s\r\n", AT_HEADER, CmdTab[Cmd], AT_GET_MARKER);
      }
      break;
 8001582:	e043      	b.n	800160c <at_cmd_format+0x54c>
        len = AT_VPRINTF("%s%s%s\r\n", AT_HEADER, CmdTab[Cmd], AT_GET_MARKER);
 8001584:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001588:	4a24      	ldr	r2, [pc, #144]	; (800161c <at_cmd_format+0x55c>)
 800158a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800158e:	4b24      	ldr	r3, [pc, #144]	; (8001620 <at_cmd_format+0x560>)
 8001590:	4924      	ldr	r1, [pc, #144]	; (8001624 <at_cmd_format+0x564>)
 8001592:	4825      	ldr	r0, [pc, #148]	; (8001628 <at_cmd_format+0x568>)
 8001594:	f000 fa38 	bl	8001a08 <at_cmd_vprintf>
 8001598:	4603      	mov	r3, r0
 800159a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      break;
 800159e:	e035      	b.n	800160c <at_cmd_format+0x54c>
    }
    case  AT_CLASS:
    {
      /*Format = FORMAT_8_C_PARAM;*/
      if (Marker == SET_MARKER)
 80015a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d114      	bne.n	80015d2 <at_cmd_format+0x512>
      {
        value_c =  *(char *)ptr;
 80015a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        len = AT_VPRINTF("%s%s%s%c\r\n", AT_HEADER, CmdTab[Cmd], AT_SET_MARKER, value_c);
 80015b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015b4:	4a19      	ldr	r2, [pc, #100]	; (800161c <at_cmd_format+0x55c>)
 80015b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <at_cmd_format+0x56c>)
 80015c2:	4918      	ldr	r1, [pc, #96]	; (8001624 <at_cmd_format+0x564>)
 80015c4:	481d      	ldr	r0, [pc, #116]	; (800163c <at_cmd_format+0x57c>)
 80015c6:	f000 fa1f 	bl	8001a08 <at_cmd_vprintf>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      }
      else
      {
        len = AT_VPRINTF("%s%s%s\r\n", AT_HEADER, CmdTab[Cmd], AT_GET_MARKER);
      }
      break;
 80015d0:	e01c      	b.n	800160c <at_cmd_format+0x54c>
        len = AT_VPRINTF("%s%s%s\r\n", AT_HEADER, CmdTab[Cmd], AT_GET_MARKER);
 80015d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015d6:	4a11      	ldr	r2, [pc, #68]	; (800161c <at_cmd_format+0x55c>)
 80015d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015dc:	4b10      	ldr	r3, [pc, #64]	; (8001620 <at_cmd_format+0x560>)
 80015de:	4911      	ldr	r1, [pc, #68]	; (8001624 <at_cmd_format+0x564>)
 80015e0:	4811      	ldr	r0, [pc, #68]	; (8001628 <at_cmd_format+0x568>)
 80015e2:	f000 fa11 	bl	8001a08 <at_cmd_vprintf>
 80015e6:	4603      	mov	r3, r0
 80015e8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      break;
 80015ec:	e00e      	b.n	800160c <at_cmd_format+0x54c>
    }
    default:
      len = AT_VPRINTF("%s%s%s\r\n", AT_HEADER, CmdTab[Cmd], Marker);
 80015ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <at_cmd_format+0x55c>)
 80015f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80015fc:	4909      	ldr	r1, [pc, #36]	; (8001624 <at_cmd_format+0x564>)
 80015fe:	480a      	ldr	r0, [pc, #40]	; (8001628 <at_cmd_format+0x568>)
 8001600:	f000 fa02 	bl	8001a08 <at_cmd_vprintf>
 8001604:	4603      	mov	r3, r0
 8001606:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      DBG_PRINTF("Format not yet supported \n\r");
      break;
 800160a:	bf00      	nop
  } /*end switch(cmd)*/
  return len;
 800160c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001610:	b2db      	uxtb	r3, r3
}
 8001612:	4618      	mov	r0, r3
 8001614:	374c      	adds	r7, #76	; 0x4c
 8001616:	46bd      	mov	sp, r7
 8001618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800161a:	bf00      	nop
 800161c:	20000000 	.word	0x20000000
 8001620:	080113a8 	.word	0x080113a8
 8001624:	08011378 	.word	0x08011378
 8001628:	080113ac 	.word	0x080113ac
 800162c:	08011374 	.word	0x08011374
 8001630:	08011454 	.word	0x08011454
 8001634:	08011484 	.word	0x08011484
 8001638:	0801137c 	.word	0x0801137c
 800163c:	08011490 	.word	0x08011490

08001640 <at_cmd_send>:
  * @brief This function sends an AT cmd to the slave device
  * @param len: length of the AT cmd to be sent
  * @retval HAL return code
  ******************************************************************************/
static HAL_StatusTypeDef at_cmd_send(uint16_t len)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef RetCode;

  /*transmit the command from master to slave*/
 // __HAL_UART_SEND_REQ(&hlpuart1, UART_RXDATA_FLUSH_REQUEST);

  RetCode = HAL_UART_Transmit(&hlpuart1, (uint8_t *)LoRa_AT_Cmd_Buff, len, 5000);
 800164a:	88fa      	ldrh	r2, [r7, #6]
 800164c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001650:	4905      	ldr	r1, [pc, #20]	; (8001668 <at_cmd_send+0x28>)
 8001652:	4806      	ldr	r0, [pc, #24]	; (800166c <at_cmd_send+0x2c>)
 8001654:	f008 fd06 	bl	800a064 <HAL_UART_Transmit>
 8001658:	4603      	mov	r3, r0
 800165a:	73fb      	strb	r3, [r7, #15]
  return (RetCode);
 800165c:	7bfb      	ldrb	r3, [r7, #15]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000674 	.word	0x20000674
 800166c:	2000c6c4 	.word	0x2000c6c4

08001670 <at_cmd_receive>:
  * @brief This function receives response from the slave device
  * @param pdata: pointer to the value returned by the slave
  * @retval return code coming from slave
  ******************************************************************************/
static ATEerror_t at_cmd_receive(void *pdata)
{
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint8_t  ResponseComplete = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	72fb      	strb	r3, [r7, #11]
  int8_t i = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]
  int8_t charnumber = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	73bb      	strb	r3, [r7, #14]
  ATEerror_t RetCode;
  uint8_t NoReturnCode = 1;  /*to discriminate the Get return code from return value*/
 8001684:	2301      	movs	r3, #1
 8001686:	733b      	strb	r3, [r7, #12]

  /*cleanup the response buffer*/
  memset(response, 0x00, DATA_RX_MAX_BUFF_SIZE);
 8001688:	2240      	movs	r2, #64	; 0x40
 800168a:	2100      	movs	r1, #0
 800168c:	4849      	ldr	r0, [pc, #292]	; (80017b4 <at_cmd_receive+0x144>)
 800168e:	f00b fb09 	bl	800cca4 <memset>

  //__HAL_UART_SEND_REQ(&hlpuart1, UART_RXDATA_FLUSH_REQUEST); //Added

  /*UART peripheral in reception process for response returned by slave*/
  if (HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)aRxBuffer, 1) != HAL_OK)
 8001692:	2201      	movs	r2, #1
 8001694:	4948      	ldr	r1, [pc, #288]	; (80017b8 <at_cmd_receive+0x148>)
 8001696:	4849      	ldr	r0, [pc, #292]	; (80017bc <at_cmd_receive+0x14c>)
 8001698:	f008 fe4a 	bl	800a330 <HAL_UART_Receive_IT>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d078      	beq.n	8001794 <at_cmd_receive+0x124>
  {
    while (1);
 80016a2:	e7fe      	b.n	80016a2 <at_cmd_receive+0x32>
  }

  while (!ResponseComplete)
  {
    while (HW_UART_Modem_IsNewCharReceived() == RESET);
 80016a4:	bf00      	nop
 80016a6:	f002 fd9d 	bl	80041e4 <HW_UART_Modem_IsNewCharReceived>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0fa      	beq.n	80016a6 <at_cmd_receive+0x36>

    /*process the response*/
    response[i] = HW_UART_Modem_GetNewChar();
 80016b0:	f997 400f 	ldrsb.w	r4, [r7, #15]
 80016b4:	f002 fdbc 	bl	8004230 <HW_UART_Modem_GetNewChar>
 80016b8:	4603      	mov	r3, r0
 80016ba:	461a      	mov	r2, r3
 80016bc:	4b3d      	ldr	r3, [pc, #244]	; (80017b4 <at_cmd_receive+0x144>)
 80016be:	551a      	strb	r2, [r3, r4]

    /*wait up to carriage return OR the line feed marker*/
    if (/*(response[i] =='\r') ||*/ (response[i] == '\n'))
 80016c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c4:	4a3b      	ldr	r2, [pc, #236]	; (80017b4 <at_cmd_receive+0x144>)
 80016c6:	5cd3      	ldrb	r3, [r2, r3]
 80016c8:	2b0a      	cmp	r3, #10
 80016ca:	d14a      	bne.n	8001762 <at_cmd_receive+0xf2>
    {
      if (pdata == NULL) /*return code following a SET cmd or simple AT cmd*/
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d11a      	bne.n	8001708 <at_cmd_receive+0x98>
      {
        if (i > 1) /*return code following a SET cmd or simple AT cmd- we skip the first <cr><ln>*/
 80016d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	dd4b      	ble.n	8001772 <at_cmd_receive+0x102>
        {
          i = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	73fb      	strb	r3, [r7, #15]
          ResponseComplete = 1;
 80016de:	2301      	movs	r3, #1
 80016e0:	72fb      	strb	r3, [r7, #11]
          /*for(int j=0; j<charnumber+1; j++)
        	  DBG_PRINTF("%c",response[j]);
          DBG_PRINTF("\n");*/
          RetCode = at_cmd_responseAnalysing(response);
 80016e2:	4834      	ldr	r0, [pc, #208]	; (80017b4 <at_cmd_receive+0x144>)
 80016e4:	f000 f8fc 	bl	80018e0 <at_cmd_responseAnalysing>
 80016e8:	4603      	mov	r3, r0
 80016ea:	737b      	strb	r3, [r7, #13]
          if(RetCode != AT_OK)//Added
 80016ec:	7b7b      	ldrb	r3, [r7, #13]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d054      	beq.n	800179c <at_cmd_receive+0x12c>
        	  __HAL_UART_SEND_REQ(&hlpuart1, UART_RXDATA_FLUSH_REQUEST); //Added
 80016f2:	4b32      	ldr	r3, [pc, #200]	; (80017bc <at_cmd_receive+0x14c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	8b1b      	ldrh	r3, [r3, #24]
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	4b30      	ldr	r3, [pc, #192]	; (80017bc <at_cmd_receive+0x14c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0208 	orr.w	r2, r2, #8
 8001702:	b292      	uxth	r2, r2
 8001704:	831a      	strh	r2, [r3, #24]
          break;
 8001706:	e049      	b.n	800179c <at_cmd_receive+0x12c>
        }
      }
      else    /* returned value following a GET cmd */
      {
        if (i != 0 && NoReturnCode)
 8001708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d015      	beq.n	800173c <at_cmd_receive+0xcc>
 8001710:	7b3b      	ldrb	r3, [r7, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d012      	beq.n	800173c <at_cmd_receive+0xcc>
        {
          /*first statement to get back the return value*/
          response[i] = '\0';
 8001716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171a:	4a26      	ldr	r2, [pc, #152]	; (80017b4 <at_cmd_receive+0x144>)
 800171c:	2100      	movs	r1, #0
 800171e:	54d1      	strb	r1, [r2, r3]
          strcpy(pdata, response);
 8001720:	4924      	ldr	r1, [pc, #144]	; (80017b4 <at_cmd_receive+0x144>)
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f00c f803 	bl	800d72e <strcpy>
          memset(response, 0x00, 16);
 8001728:	2210      	movs	r2, #16
 800172a:	2100      	movs	r1, #0
 800172c:	4821      	ldr	r0, [pc, #132]	; (80017b4 <at_cmd_receive+0x144>)
 800172e:	f00b fab9 	bl	800cca4 <memset>
          i = -1; /*to compensate the next index iteration and restart in [0]*/
 8001732:	23ff      	movs	r3, #255	; 0xff
 8001734:	73fb      	strb	r3, [r7, #15]
          NoReturnCode = 0;  /*return code for the Get cmd*/
 8001736:	2300      	movs	r3, #0
 8001738:	733b      	strb	r3, [r7, #12]
 800173a:	e01a      	b.n	8001772 <at_cmd_receive+0x102>
        }
        else
        {
          if (i > 1)
 800173c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001740:	2b01      	cmp	r3, #1
 8001742:	dd16      	ble.n	8001772 <at_cmd_receive+0x102>
          {
            /*second statement to get back the return code*/
            i = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]
            ResponseComplete = 1;   /*when value + return code have been trapped*/
 8001748:	2301      	movs	r3, #1
 800174a:	72fb      	strb	r3, [r7, #11]
            RetCode = at_cmd_responseAnalysing(response);
 800174c:	4819      	ldr	r0, [pc, #100]	; (80017b4 <at_cmd_receive+0x144>)
 800174e:	f000 f8c7 	bl	80018e0 <at_cmd_responseAnalysing>
 8001752:	4603      	mov	r3, r0
 8001754:	737b      	strb	r3, [r7, #13]
            memset(response, 0x00, 16);
 8001756:	2210      	movs	r2, #16
 8001758:	2100      	movs	r1, #0
 800175a:	4816      	ldr	r0, [pc, #88]	; (80017b4 <at_cmd_receive+0x144>)
 800175c:	f00b faa2 	bl	800cca4 <memset>
            break;
 8001760:	e01d      	b.n	800179e <at_cmd_receive+0x12e>
        }
      }
    }
    else
    {
      if (i == (DATA_RX_MAX_BUFF_SIZE - 1)) /* frame overflow */
 8001762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001766:	2b3f      	cmp	r3, #63	; 0x3f
 8001768:	d103      	bne.n	8001772 <at_cmd_receive+0x102>
      {
        i = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	73fb      	strb	r3, [r7, #15]
        return (AT_TEST_PARAM_OVERFLOW);
 800176e:	2305      	movs	r3, #5
 8001770:	e01c      	b.n	80017ac <at_cmd_receive+0x13c>
      }
    }
    i++;
 8001772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	3301      	adds	r3, #1
 800177a:	b2db      	uxtb	r3, r3
 800177c:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)aRxBuffer, 1) ;
 800177e:	2201      	movs	r2, #1
 8001780:	490d      	ldr	r1, [pc, #52]	; (80017b8 <at_cmd_receive+0x148>)
 8001782:	480e      	ldr	r0, [pc, #56]	; (80017bc <at_cmd_receive+0x14c>)
 8001784:	f008 fdd4 	bl	800a330 <HAL_UART_Receive_IT>
    charnumber++;
 8001788:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	3301      	adds	r3, #1
 8001790:	b2db      	uxtb	r3, r3
 8001792:	73bb      	strb	r3, [r7, #14]
  while (!ResponseComplete)
 8001794:	7afb      	ldrb	r3, [r7, #11]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d084      	beq.n	80016a4 <at_cmd_receive+0x34>
 800179a:	e000      	b.n	800179e <at_cmd_receive+0x12e>
          break;
 800179c:	bf00      	nop
  } /*end while(!Responsablecomplete)*/
  hlpuart1.gState = HAL_UART_STATE_READY;
 800179e:	4b07      	ldr	r3, [pc, #28]	; (80017bc <at_cmd_receive+0x14c>)
 80017a0:	2220      	movs	r2, #32
 80017a2:	679a      	str	r2, [r3, #120]	; 0x78
  hlpuart1.RxState = HAL_UART_STATE_READY;        /*to be checked since was validated with previous */
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <at_cmd_receive+0x14c>)
 80017a6:	2220      	movs	r2, #32
 80017a8:	67da      	str	r2, [r3, #124]	; 0x7c
  return (RetCode);                             /*version of HAL .. there was not Rx field state*/
 80017aa:	7b7b      	ldrb	r3, [r7, #13]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd90      	pop	{r4, r7, pc}
 80017b4:	20000320 	.word	0x20000320
 80017b8:	20000318 	.word	0x20000318
 80017bc:	2000c6c4 	.word	0x2000c6c4

080017c0 <at_cmd_receive_async_event>:
  * @brief This function receives asynchronus event from the slave device
  * @param none
  * @retval return code coming from slave
  ******************************************************************************/
static ATEerror_t at_cmd_receive_async_event(void)
{
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
  uint8_t  ResponseComplete = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	733b      	strb	r3, [r7, #12]
  int8_t i = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	73fb      	strb	r3, [r7, #15]
  int8_t charnumber = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	73bb      	strb	r3, [r7, #14]
  char *ptrChr;
  ATEerror_t RetCode;
  uint8_t NoReturnCode =  1;  /*too discriminate the Get return code from return value*/
 80017d2:	2301      	movs	r3, #1
 80017d4:	72fb      	strb	r3, [r7, #11]

  /*cleanup the response buffer*/
  memset(response, 0x00, 16);
 80017d6:	2210      	movs	r2, #16
 80017d8:	2100      	movs	r1, #0
 80017da:	483e      	ldr	r0, [pc, #248]	; (80018d4 <at_cmd_receive_async_event+0x114>)
 80017dc:	f00b fa62 	bl	800cca4 <memset>

  /*UART peripheral in reception process for response returned by slave*/
  if (HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)aRxBuffer, 1) != HAL_OK)
 80017e0:	2201      	movs	r2, #1
 80017e2:	493d      	ldr	r1, [pc, #244]	; (80018d8 <at_cmd_receive_async_event+0x118>)
 80017e4:	483d      	ldr	r0, [pc, #244]	; (80018dc <at_cmd_receive_async_event+0x11c>)
 80017e6:	f008 fda3 	bl	800a330 <HAL_UART_Receive_IT>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d063      	beq.n	80018b8 <at_cmd_receive_async_event+0xf8>
  {
    while (1);
 80017f0:	e7fe      	b.n	80017f0 <at_cmd_receive_async_event+0x30>
  }

  while (!ResponseComplete)
  {

    while (HW_UART_Modem_IsNewCharReceived() == RESET);
 80017f2:	bf00      	nop
 80017f4:	f002 fcf6 	bl	80041e4 <HW_UART_Modem_IsNewCharReceived>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0fa      	beq.n	80017f4 <at_cmd_receive_async_event+0x34>

    /*process the response*/
    response[i] = HW_UART_Modem_GetNewChar();
 80017fe:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8001802:	f002 fd15 	bl	8004230 <HW_UART_Modem_GetNewChar>
 8001806:	4603      	mov	r3, r0
 8001808:	461a      	mov	r2, r3
 800180a:	4b32      	ldr	r3, [pc, #200]	; (80018d4 <at_cmd_receive_async_event+0x114>)
 800180c:	551a      	strb	r2, [r3, r4]

    /*wait up to carriage return OR the line feed marker*/
    if (/*(response[i] =='\r') || */(response[i] == '\n'))
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	4a30      	ldr	r2, [pc, #192]	; (80018d4 <at_cmd_receive_async_event+0x114>)
 8001814:	5cd3      	ldrb	r3, [r2, r3]
 8001816:	2b0a      	cmp	r3, #10
 8001818:	d135      	bne.n	8001886 <at_cmd_receive_async_event+0xc6>
    {
      if (i != 0 && NoReturnCode)     /*trap the asynchronous event*/
 800181a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d01e      	beq.n	8001860 <at_cmd_receive_async_event+0xa0>
 8001822:	7afb      	ldrb	r3, [r7, #11]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d01b      	beq.n	8001860 <at_cmd_receive_async_event+0xa0>
      {
        /*first statement to get back the return value*/
        response[i] = '\0';
 8001828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182c:	4a29      	ldr	r2, [pc, #164]	; (80018d4 <at_cmd_receive_async_event+0x114>)
 800182e:	2100      	movs	r1, #0
 8001830:	54d1      	strb	r1, [r2, r3]
        ptrChr = strchr(response, '+');      /*to skip the '\0''\r'*/
 8001832:	212b      	movs	r1, #43	; 0x2b
 8001834:	4827      	ldr	r0, [pc, #156]	; (80018d4 <at_cmd_receive_async_event+0x114>)
 8001836:	f00b ff6d 	bl	800d714 <strchr>
 800183a:	6078      	str	r0, [r7, #4]
        RetCode = at_cmd_AsyncEventAnalysing(ptrChr, NULL);
 800183c:	2100      	movs	r1, #0
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f88a 	bl	8001958 <at_cmd_AsyncEventAnalysing>
 8001844:	4603      	mov	r3, r0
 8001846:	737b      	strb	r3, [r7, #13]
        memset(response, 0x00, 16);
 8001848:	2210      	movs	r2, #16
 800184a:	2100      	movs	r1, #0
 800184c:	4821      	ldr	r0, [pc, #132]	; (80018d4 <at_cmd_receive_async_event+0x114>)
 800184e:	f00b fa29 	bl	800cca4 <memset>
        i = -1;            /*to compensate the next index iteration and restart in [0]*/
 8001852:	23ff      	movs	r3, #255	; 0xff
 8001854:	73fb      	strb	r3, [r7, #15]
        NoReturnCode = 0;  /*return code for the Get cmd*/
 8001856:	2300      	movs	r3, #0
 8001858:	72fb      	strb	r3, [r7, #11]
        ResponseComplete = 1;
 800185a:	2301      	movs	r3, #1
 800185c:	733b      	strb	r3, [r7, #12]
        break;
 800185e:	e02e      	b.n	80018be <at_cmd_receive_async_event+0xfe>
      }
      else
      {
        if (i > 1)
 8001860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001864:	2b01      	cmp	r3, #1
 8001866:	dd16      	ble.n	8001896 <at_cmd_receive_async_event+0xd6>
        {
          /*second statement to get back the return code*/
          i = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	73fb      	strb	r3, [r7, #15]
          ResponseComplete = 1;   /*when value + return code have been trapped*/
 800186c:	2301      	movs	r3, #1
 800186e:	733b      	strb	r3, [r7, #12]
          RetCode = at_cmd_responseAnalysing(response);
 8001870:	4818      	ldr	r0, [pc, #96]	; (80018d4 <at_cmd_receive_async_event+0x114>)
 8001872:	f000 f835 	bl	80018e0 <at_cmd_responseAnalysing>
 8001876:	4603      	mov	r3, r0
 8001878:	737b      	strb	r3, [r7, #13]
          memset(response, 0x00, 16);
 800187a:	2210      	movs	r2, #16
 800187c:	2100      	movs	r1, #0
 800187e:	4815      	ldr	r0, [pc, #84]	; (80018d4 <at_cmd_receive_async_event+0x114>)
 8001880:	f00b fa10 	bl	800cca4 <memset>
          break;
 8001884:	e01b      	b.n	80018be <at_cmd_receive_async_event+0xfe>
        }
      }
    }
    else
    {
      if (i == (DATA_RX_MAX_BUFF_SIZE - 1)) /* frame overflow */
 8001886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188a:	2b3f      	cmp	r3, #63	; 0x3f
 800188c:	d103      	bne.n	8001896 <at_cmd_receive_async_event+0xd6>
      {
        i = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	73fb      	strb	r3, [r7, #15]
        return (AT_TEST_PARAM_OVERFLOW);
 8001892:	2305      	movs	r3, #5
 8001894:	e01a      	b.n	80018cc <at_cmd_receive_async_event+0x10c>
      }
    }
    i++;
 8001896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	3301      	adds	r3, #1
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)aRxBuffer, 1) ;
 80018a2:	2201      	movs	r2, #1
 80018a4:	490c      	ldr	r1, [pc, #48]	; (80018d8 <at_cmd_receive_async_event+0x118>)
 80018a6:	480d      	ldr	r0, [pc, #52]	; (80018dc <at_cmd_receive_async_event+0x11c>)
 80018a8:	f008 fd42 	bl	800a330 <HAL_UART_Receive_IT>
    charnumber++;
 80018ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	3301      	adds	r3, #1
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	73bb      	strb	r3, [r7, #14]
  while (!ResponseComplete)
 80018b8:	7b3b      	ldrb	r3, [r7, #12]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d099      	beq.n	80017f2 <at_cmd_receive_async_event+0x32>
  }
  hlpuart1.gState = HAL_UART_STATE_READY;
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <at_cmd_receive_async_event+0x11c>)
 80018c0:	2220      	movs	r2, #32
 80018c2:	679a      	str	r2, [r3, #120]	; 0x78
  hlpuart1.RxState = HAL_UART_STATE_READY;        /*to be checked since was validated with previous */
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <at_cmd_receive_async_event+0x11c>)
 80018c6:	2220      	movs	r2, #32
 80018c8:	67da      	str	r2, [r3, #124]	; 0x7c
  return (RetCode);                             /*version of HAL .. there was not Rx field state*/
 80018ca:	7b7b      	ldrb	r3, [r7, #13]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd90      	pop	{r4, r7, pc}
 80018d4:	20000320 	.word	0x20000320
 80018d8:	20000318 	.word	0x20000318
 80018dc:	2000c6c4 	.word	0x2000c6c4

080018e0 <at_cmd_responseAnalysing>:
  * @brief This function does analysis of the response received by the device
  * @param response: pointer to the received response
  * @retval ATEerror_t error type
  ******************************************************************************/
static ATEerror_t at_cmd_responseAnalysing(const char *ReturnResp)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  ATEerror_t status;
  int i;

  status = AT_END_ERROR;
 80018e8:	2308      	movs	r3, #8
 80018ea:	72fb      	strb	r3, [r7, #11]

  for (i = 0; i < AT_END_ERROR; i++)
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	e027      	b.n	8001942 <at_cmd_responseAnalysing+0x62>
  {
    if (strncmp(ReturnResp, ATE_RetCode[i].RetCodeStr, (ATE_RetCode[i].SizeRetCodeStr - 1)) == 0)
 80018f2:	4918      	ldr	r1, [pc, #96]	; (8001954 <at_cmd_responseAnalysing+0x74>)
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	4613      	mov	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4413      	add	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	6819      	ldr	r1, [r3, #0]
 8001902:	4814      	ldr	r0, [pc, #80]	; (8001954 <at_cmd_responseAnalysing+0x74>)
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4403      	add	r3, r0
 8001910:	3304      	adds	r3, #4
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	3b01      	subs	r3, #1
 8001916:	461a      	mov	r2, r3
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f00b ff10 	bl	800d73e <strncmp>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10b      	bne.n	800193c <at_cmd_responseAnalysing+0x5c>
    {
      /* command has been found found*/
      status = ATE_RetCode[i].RetCode;
 8001924:	490b      	ldr	r1, [pc, #44]	; (8001954 <at_cmd_responseAnalysing+0x74>)
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	3308      	adds	r3, #8
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	72fb      	strb	r3, [r7, #11]
      return (status);
 8001938:	7afb      	ldrb	r3, [r7, #11]
 800193a:	e006      	b.n	800194a <at_cmd_responseAnalysing+0x6a>
  for (i = 0; i < AT_END_ERROR; i++)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3301      	adds	r3, #1
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2b07      	cmp	r3, #7
 8001946:	ddd4      	ble.n	80018f2 <at_cmd_responseAnalysing+0x12>
    }
  }
  return (status);
 8001948:	7afb      	ldrb	r3, [r7, #11]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000090 	.word	0x20000090

08001958 <at_cmd_AsyncEventAnalysing>:
  * @brief This function does analysis of the asynchronous event received by the device
  * @param response: pointer to the received response
  * @retval ATEerror_t error type
  ******************************************************************************/
static ATEerror_t at_cmd_AsyncEventAnalysing(const char *ReturnResp, int8_t *Flag)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  ATEerror_t status;

  status = AT_END_ERROR;
 8001962:	2308      	movs	r3, #8
 8001964:	73fb      	strb	r3, [r7, #15]

  if (strncmp(ReturnResp, "+EVT:JOINED\r", sizeof("+EVT:JOINED\r") - 1) == 0)
 8001966:	220c      	movs	r2, #12
 8001968:	4923      	ldr	r1, [pc, #140]	; (80019f8 <at_cmd_AsyncEventAnalysing+0xa0>)
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f00b fee7 	bl	800d73e <strncmp>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d103      	bne.n	800197e <at_cmd_AsyncEventAnalysing+0x26>
  {
    /* event has been identified*/
    status = AT_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	73fb      	strb	r3, [r7, #15]
    return (status);
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	e037      	b.n	80019ee <at_cmd_AsyncEventAnalysing+0x96>
  }

  /*following statements for network downlink data analysis*/
  if (strncmp(ReturnResp, "+RXPORT", sizeof("+RXPORT") - 1) == 0)
 800197e:	2207      	movs	r2, #7
 8001980:	491e      	ldr	r1, [pc, #120]	; (80019fc <at_cmd_AsyncEventAnalysing+0xa4>)
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f00b fedb 	bl	800d73e <strncmp>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d108      	bne.n	80019a0 <at_cmd_AsyncEventAnalysing+0x48>
  {
    /* event has been identified*/
    *Flag <<= (0x0U);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	f993 2000 	ldrsb.w	r2, [r3]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	701a      	strb	r2, [r3, #0]
    status = AT_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	73fb      	strb	r3, [r7, #15]
    return (status);
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	e026      	b.n	80019ee <at_cmd_AsyncEventAnalysing+0x96>
  }

  /*following statement for network downlink data*/
  if (strncmp(ReturnResp, "+PAYLOADSIZE", sizeof("+PAYLOADSIZE") - 1) == 0)
 80019a0:	220c      	movs	r2, #12
 80019a2:	4917      	ldr	r1, [pc, #92]	; (8001a00 <at_cmd_AsyncEventAnalysing+0xa8>)
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f00b feca 	bl	800d73e <strncmp>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10a      	bne.n	80019c6 <at_cmd_AsyncEventAnalysing+0x6e>
  {
    /* event has been identified*/
    *Flag <<= (0x1U);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	f993 3000 	ldrsb.w	r3, [r3]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	b25a      	sxtb	r2, r3
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	701a      	strb	r2, [r3, #0]
    status = AT_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	73fb      	strb	r3, [r7, #15]
    return (status);
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	e013      	b.n	80019ee <at_cmd_AsyncEventAnalysing+0x96>
  }

  /*following statement for network downlink data*/
  if (strncmp(ReturnResp, "+RCV", sizeof("+RCV") - 1) == 0)
 80019c6:	2204      	movs	r2, #4
 80019c8:	490e      	ldr	r1, [pc, #56]	; (8001a04 <at_cmd_AsyncEventAnalysing+0xac>)
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f00b feb7 	bl	800d73e <strncmp>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10a      	bne.n	80019ec <at_cmd_AsyncEventAnalysing+0x94>
  {
    /* event has been identified*/
    *Flag <<= (0x1U);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	f993 3000 	ldrsb.w	r3, [r3]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	b25a      	sxtb	r2, r3
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	701a      	strb	r2, [r3, #0]
    status = AT_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	73fb      	strb	r3, [r7, #15]
    return (status);
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	e000      	b.n	80019ee <at_cmd_AsyncEventAnalysing+0x96>
  }

  return (status);
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	0801149c 	.word	0x0801149c
 80019fc:	080114ac 	.word	0x080114ac
 8001a00:	080114b4 	.word	0x080114b4
 8001a04:	080114c4 	.word	0x080114c4

08001a08 <at_cmd_vprintf>:
  * @brief format the AT frame to be sent to the modem (slave)
  * @param pointer to the format string
  * @retval len of the string to be sent
  ******************************************************************************/
uint16_t at_cmd_vprintf(const char *format, ...)
{
 8001a08:	b40f      	push	{r0, r1, r2, r3}
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
  va_list args;
  uint16_t len;

  va_start(args, format);
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	603b      	str	r3, [r7, #0]

  len = tiny_vsnprintf_like(LoRa_AT_Cmd_Buff + Offset, sizeof(LoRa_AT_Cmd_Buff) - Offset, format, args);
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <at_cmd_vprintf+0x40>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <at_cmd_vprintf+0x44>)
 8001a1e:	18d0      	adds	r0, r2, r3
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <at_cmd_vprintf+0x40>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	f1c3 034e 	rsb	r3, r3, #78	; 0x4e
 8001a28:	4619      	mov	r1, r3
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	f00a f8a7 	bl	800bb80 <tiny_vsnprintf_like>
 8001a32:	4603      	mov	r3, r0
 8001a34:	80fb      	strh	r3, [r7, #6]

  va_end(args);

  return len;
 8001a36:	88fb      	ldrh	r3, [r7, #6]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a42:	b004      	add	sp, #16
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000314 	.word	0x20000314
 8001a4c:	20000674 	.word	0x20000674

08001a50 <FFT_PROCESSING_F32Process>:
  * @brief  This function Calculate FFT in F32.
  * @param  FFT Length : 1024, 256, 64
  * @retval None ```` `                                                                                                                                                                                                                                                                                                                                                                                                                JU
  */
void FFT_PROCESSING_F32Process(vibrationStat_t* vibrationData)
{
 8001a50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a54:	f5ad 4d10 	sub.w	sp, sp, #36864	; 0x9000
 8001a58:	b094      	sub	sp, #80	; 0x50
 8001a5a:	af04      	add	r7, sp, #16
 8001a5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a60:	3b3c      	subs	r3, #60	; 0x3c
 8001a62:	6018      	str	r0, [r3, #0]
  //float32_t maxValueTemp;    /* Max FFT value is stored here */
  //uint32_t maxIndexTemp;    /* Index in Output array where max value is */
  int32_t an_dx_peak_locs[FFT_LENGTH/4] ;  // Peak location index
  int32_t n_npks;                //Total Number of max peaks

  unsigned index_fill_input_buffer, index_fill_adc_buffer = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8001a6a:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001a6e:	6013      	str	r3, [r2, #0]
  uint32_t duration_us = 0x00;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8001a76:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001a7a:	6013      	str	r3, [r2, #0]
    aADC1ConvertedValue_s[index_fill_adc_buffer] = uhADCxConvertedValue;
    TIM2_Config();
  }*/
  float32_t hann_multiplier_buffer[FFT_LENGTH];
  float32_t windowed_data_buffer[FFT_LENGTH];
  for (int i = 0; i < FFT_LENGTH; i++) {
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8001a82:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	e049      	b.n	8001b1e <FFT_PROCESSING_F32Process+0xce>
	  hann_multiplier_buffer[i] = 0.5 * (1 - cos(2*PI*i/(FFT_LENGTH-1)));
 8001a8a:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 8001a8e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	ee07 3a90 	vmov	s15, r3
 8001a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a9c:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8001d4c <FFT_PROCESSING_F32Process+0x2fc>
 8001aa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aa4:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8001d50 <FFT_PROCESSING_F32Process+0x300>
 8001aa8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001aac:	ee16 0a90 	vmov	r0, s13
 8001ab0:	f7fe fd52 	bl	8000558 <__aeabi_f2d>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	ec43 2b10 	vmov	d0, r2, r3
 8001abc:	f00d feb8 	bl	800f830 <cos>
 8001ac0:	ec53 2b10 	vmov	r2, r3, d0
 8001ac4:	f04f 0000 	mov.w	r0, #0
 8001ac8:	49a2      	ldr	r1, [pc, #648]	; (8001d54 <FFT_PROCESSING_F32Process+0x304>)
 8001aca:	f7fe fbe5 	bl	8000298 <__aeabi_dsub>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	4b9f      	ldr	r3, [pc, #636]	; (8001d58 <FFT_PROCESSING_F32Process+0x308>)
 8001adc:	f7fe fd94 	bl	8000608 <__aeabi_dmul>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f7ff f866 	bl	8000bb8 <__aeabi_d2f>
 8001aec:	4601      	mov	r1, r0
 8001aee:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8001af2:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8001af6:	3b34      	subs	r3, #52	; 0x34
 8001af8:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8001afc:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	0092      	lsls	r2, r2, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < FFT_LENGTH; i++) {
 8001b08:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 8001b0c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	3301      	adds	r3, #1
 8001b14:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8001b18:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 8001b22:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b2c:	dbad      	blt.n	8001a8a <FFT_PROCESSING_F32Process+0x3a>
  }

  #if defined (DECIMATION_FACTOR) && (DECIMATION_FACTOR != 1)
  	  arm_mult_f32(aFIR_F32_Output,hann_multiplier_buffer,windowed_data_buffer,FFT_LENGTH);
  #else
  	  arm_mult_f32(aADC1EngineeringValue,hann_multiplier_buffer,windowed_data_buffer,FFT_LENGTH);
 8001b2e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001b32:	3a34      	subs	r2, #52	; 0x34
 8001b34:	f507 4180 	add.w	r1, r7, #16384	; 0x4000
 8001b38:	f101 0140 	add.w	r1, r1, #64	; 0x40
 8001b3c:	3934      	subs	r1, #52	; 0x34
 8001b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b42:	4886      	ldr	r0, [pc, #536]	; (8001d5c <FFT_PROCESSING_F32Process+0x30c>)
 8001b44:	f00b f82a 	bl	800cb9c <arm_mult_f32>
  #endif

  for (index_fill_input_buffer = 0; index_fill_input_buffer < FFT_LENGTH*2; index_fill_input_buffer += 2, index_fill_adc_buffer++)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8001b4e:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	e039      	b.n	8001bca <FFT_PROCESSING_F32Process+0x17a>
  {
    aFFT_Input_f32[(uint16_t)index_fill_input_buffer] = (float32_t)windowed_data_buffer[index_fill_adc_buffer];// / (float32_t)4096.0;
 8001b56:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 8001b5a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	4618      	mov	r0, r3
 8001b64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b68:	3b34      	subs	r3, #52	; 0x34
 8001b6a:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8001b6e:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	0092      	lsls	r2, r2, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4979      	ldr	r1, [pc, #484]	; (8001d60 <FFT_PROCESSING_F32Process+0x310>)
 8001b7c:	0083      	lsls	r3, r0, #2
 8001b7e:	440b      	add	r3, r1
 8001b80:	601a      	str	r2, [r3, #0]
    /* Imaginary part */
    aFFT_Input_f32[(uint16_t)(index_fill_input_buffer + 1)] = 0;
 8001b82:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 8001b86:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	3301      	adds	r3, #1
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	4a73      	ldr	r2, [pc, #460]	; (8001d60 <FFT_PROCESSING_F32Process+0x310>)
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
  for (index_fill_input_buffer = 0; index_fill_input_buffer < FFT_LENGTH*2; index_fill_input_buffer += 2, index_fill_adc_buffer++)
 8001b9e:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 8001ba2:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	3302      	adds	r3, #2
 8001baa:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8001bae:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 8001bb8:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8001bc4:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 8001bce:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bd8:	d3bd      	bcc.n	8001b56 <FFT_PROCESSING_F32Process+0x106>
    //TIM2_Config();
  }
  /* Initialize the CFFT/CIFFT module, intFlag = 0, doBitReverse = 1 */
  //arm_cfft_init_f32(&FFT_F32_struct,FFT_LENGTH);
  arm_cfft_radix2_init_f32(&FFT_F32_struct, FFT_LENGTH, FFT_INVERSE_FLAG, FFT_Normal_OUTPUT_FLAG);
 8001bda:	f507 4010 	add.w	r0, r7, #36864	; 0x9000
 8001bde:	f100 0010 	add.w	r0, r0, #16
 8001be2:	2301      	movs	r3, #1
 8001be4:	2200      	movs	r2, #0
 8001be6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bea:	f00a fc0d 	bl	800c408 <arm_cfft_radix2_init_f32>

  TimerCount_Start();
 8001bee:	4b5d      	ldr	r3, [pc, #372]	; (8001d64 <FFT_PROCESSING_F32Process+0x314>)
 8001bf0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	4b5b      	ldr	r3, [pc, #364]	; (8001d64 <FFT_PROCESSING_F32Process+0x314>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	4b59      	ldr	r3, [pc, #356]	; (8001d64 <FFT_PROCESSING_F32Process+0x314>)
 8001bfe:	2205      	movs	r2, #5
 8001c00:	601a      	str	r2, [r3, #0]
  arm_cfft_radix2_f32(&FFT_F32_struct, aFFT_Input_f32);
 8001c02:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 8001c06:	f103 0310 	add.w	r3, r3, #16
 8001c0a:	4955      	ldr	r1, [pc, #340]	; (8001d60 <FFT_PROCESSING_F32Process+0x310>)
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f00a fe11 	bl	800c834 <arm_cfft_radix2_f32>
  TimerCount_Stop(nb_cycles);
 8001c12:	4b54      	ldr	r3, [pc, #336]	; (8001d64 <FFT_PROCESSING_F32Process+0x314>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	4b52      	ldr	r3, [pc, #328]	; (8001d64 <FFT_PROCESSING_F32Process+0x314>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8001c20:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 8001c2a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 8001c34:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001c38:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8001c3c:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001c40:	6013      	str	r3, [r2, #0]

  //GUI_Clear();
  //LCD_OUTPUT_Cycles(5, 305, nb_cycles);
  duration_us = (uint32_t)(((uint64_t)US_IN_SECOND * (nb_cycles)) / SystemCoreClock);
 8001c42:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 8001c46:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	461c      	mov	r4, r3
 8001c4e:	f04f 0500 	mov.w	r5, #0
 8001c52:	4622      	mov	r2, r4
 8001c54:	462b      	mov	r3, r5
 8001c56:	f04f 0000 	mov.w	r0, #0
 8001c5a:	f04f 0100 	mov.w	r1, #0
 8001c5e:	0159      	lsls	r1, r3, #5
 8001c60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c64:	0150      	lsls	r0, r2, #5
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	1b12      	subs	r2, r2, r4
 8001c6c:	eb63 0305 	sbc.w	r3, r3, r5
 8001c70:	f04f 0000 	mov.w	r0, #0
 8001c74:	f04f 0100 	mov.w	r1, #0
 8001c78:	0259      	lsls	r1, r3, #9
 8001c7a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c7e:	0250      	lsls	r0, r2, #9
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	1912      	adds	r2, r2, r4
 8001c86:	eb45 0303 	adc.w	r3, r5, r3
 8001c8a:	f04f 0000 	mov.w	r0, #0
 8001c8e:	f04f 0100 	mov.w	r1, #0
 8001c92:	0199      	lsls	r1, r3, #6
 8001c94:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8001c98:	0190      	lsls	r0, r2, #6
 8001c9a:	1a80      	subs	r0, r0, r2
 8001c9c:	eb61 0103 	sbc.w	r1, r1, r3
 8001ca0:	eb10 0804 	adds.w	r8, r0, r4
 8001ca4:	eb41 0905 	adc.w	r9, r1, r5
 8001ca8:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <FFT_PROCESSING_F32Process+0x318>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	4640      	mov	r0, r8
 8001cb4:	4649      	mov	r1, r9
 8001cb6:	f7fe ffcf 	bl	8000c58 <__aeabi_uldivmod>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8001cc4:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001cc8:	6013      	str	r3, [r2, #0]
  //LCD_OUTPUT_DURATION(120, 305, duration_us);

  /* Process the data through the Complex Magnitude Module for calculating the magnitude at each bin */
  arm_cmplx_mag_f32(aFFT_Input_f32, aFFT_Output_f32, FFT_LENGTH);
 8001cca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cce:	4927      	ldr	r1, [pc, #156]	; (8001d6c <FFT_PROCESSING_F32Process+0x31c>)
 8001cd0:	4823      	ldr	r0, [pc, #140]	; (8001d60 <FFT_PROCESSING_F32Process+0x310>)
 8001cd2:	f00a fe3f 	bl	800c954 <arm_cmplx_mag_f32>

  aFFT_Output_f32[0]= 0.0; //Eliminate DC component.
 8001cd6:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <FFT_PROCESSING_F32Process+0x31c>)
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
  //DBG_PRINTF("Frequency Bins \r");
  for(int i=0;i<FFT_LENGTH;i++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8001ce4:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	e00a      	b.n	8001d02 <FFT_PROCESSING_F32Process+0x2b2>
 8001cec:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 8001cf0:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8001cfc:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 8001d06:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d10:	dbec      	blt.n	8001cec <FFT_PROCESSING_F32Process+0x29c>
	  vibrationData->maxFFTIndexArray[k] = maxIndexTemp ;
	  printf("\nMAX Value %d  = %f, Max Index = %d\n",k,maxValueTemp,(int)maxIndexTemp);
	  aFFT_Output_f32[maxIndexTemp]= 0.0;
  }*/
  //DBG_PRINTF("TIM 1 clock frequency = %d\n",(int)(TIM1_CLOCK_FREQ));
  find_peaks(an_dx_peak_locs, &n_npks, aFFT_Output_f32,PEAK_MAX_FREQUENCY_BIN,PEAK_MIN_HEIGHT,PEAK_MIN_WIDTH_BIN,PEAK_NO_OF_PEAKS);//peak_height, peak_distance, max_num_peaks
 8001d12:	f507 4100 	add.w	r1, r7, #32768	; 0x8000
 8001d16:	f101 0120 	add.w	r1, r1, #32
 8001d1a:	3914      	subs	r1, #20
 8001d1c:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 8001d20:	f100 0020 	add.w	r0, r0, #32
 8001d24:	3810      	subs	r0, #16
 8001d26:	2305      	movs	r3, #5
 8001d28:	9302      	str	r3, [sp, #8]
 8001d2a:	2328      	movs	r3, #40	; 0x28
 8001d2c:	9301      	str	r3, [sp, #4]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d36:	4a0d      	ldr	r2, [pc, #52]	; (8001d6c <FFT_PROCESSING_F32Process+0x31c>)
 8001d38:	f000 f898 	bl	8001e6c <find_peaks>
  for(int i=0; i<n_npks; i++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8001d42:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	e06a      	b.n	8001e20 <FFT_PROCESSING_F32Process+0x3d0>
 8001d4a:	bf00      	nop
 8001d4c:	40c90fdb 	.word	0x40c90fdb
 8001d50:	457ff000 	.word	0x457ff000
 8001d54:	3ff00000 	.word	0x3ff00000
 8001d58:	3fe00000 	.word	0x3fe00000
 8001d5c:	2000c8a0 	.word	0x2000c8a0
 8001d60:	200006c4 	.word	0x200006c4
 8001d64:	e000e010 	.word	0xe000e010
 8001d68:	20000110 	.word	0x20000110
 8001d6c:	200086c4 	.word	0x200086c4
  {
	 vibrationData->maxFFTAmplitudeArray[i]= aFFT_Output_f32[(an_dx_peak_locs[i])] * 100 ;
 8001d70:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8001d74:	f103 0320 	add.w	r3, r3, #32
 8001d78:	3b10      	subs	r3, #16
 8001d7a:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8001d7e:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d88:	4a35      	ldr	r2, [pc, #212]	; (8001e60 <FFT_PROCESSING_F32Process+0x410>)
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	edd3 7a00 	vldr	s15, [r3]
 8001d92:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001e64 <FFT_PROCESSING_F32Process+0x414>
 8001d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d9e:	ee17 3a90 	vmov	r3, s15
 8001da2:	b219      	sxth	r1, r3
 8001da4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001da8:	3b3c      	subs	r3, #60	; 0x3c
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8001db0:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	3204      	adds	r2, #4
 8001db8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	 vibrationData->maxFFTFrequencyArray[i] = (an_dx_peak_locs[i] * FFT_BIN_WIDTH);
 8001dbc:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8001dc0:	f103 0320 	add.w	r3, r3, #32
 8001dc4:	3b10      	subs	r3, #16
 8001dc6:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8001dca:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd4:	ee07 3a90 	vmov	s15, r3
 8001dd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ddc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001e68 <FFT_PROCESSING_F32Process+0x418>
 8001de0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001de4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001de8:	ee17 3a90 	vmov	r3, s15
 8001dec:	b219      	sxth	r1, r3
 8001dee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001df2:	3b3c      	subs	r3, #60	; 0x3c
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 8001dfa:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	3310      	adds	r3, #16
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4413      	add	r3, r2
 8001e06:	460a      	mov	r2, r1
 8001e08:	80da      	strh	r2, [r3, #6]
  for(int i=0; i<n_npks; i++)
 8001e0a:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 8001e0e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	3301      	adds	r3, #1
 8001e16:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8001e1a:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8001e24:	f103 0320 	add.w	r3, r3, #32
 8001e28:	3b14      	subs	r3, #20
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8001e30:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001e34:	6812      	ldr	r2, [r2, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	db9a      	blt.n	8001d70 <FFT_PROCESSING_F32Process+0x320>
	 DBG_PRINTF("1,1,1,%f,%d,%d\r",aFFT_Output_f32[an_dx_peak_locs[i]], an_dx_peak_locs[i],vibrationData->maxFFTFrequencyArray[i]);
	 //DBG_PRINTF("%f @ %d @ %d Hz\r",aFFT_Output_f32[an_dx_peak_locs[i]], an_dx_peak_locs[i],vibrationData->maxFFTFrequencyArray[i]);
  }
  vibrationData->noOfFFTPeaks = n_npks;
 8001e3a:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8001e3e:	f103 0320 	add.w	r3, r3, #32
 8001e42:	3b14      	subs	r3, #20
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e4c:	3b3c      	subs	r3, #60	; 0x3c
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	719a      	strb	r2, [r3, #6]
  aFFT_Output_f32[maxIndex]= 0.0;
  arm_max_f32(aFFT_Output_f32, (FFT_Length/2), &maxValue, &maxIndex);
  printf("\nMAX Value 2 = %f, Max Index = %d\n",maxValue, maxIndex);
  aFFT_Output_f32[maxIndex]= 0.0;
  maxValue = 0;*/
}
 8001e52:	bf00      	nop
 8001e54:	f507 4710 	add.w	r7, r7, #36864	; 0x9000
 8001e58:	3740      	adds	r7, #64	; 0x40
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e60:	200086c4 	.word	0x200086c4
 8001e64:	42c80000 	.word	0x42c80000
 8001e68:	401c4000 	.word	0x401c4000

08001e6c <find_peaks>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af02      	add	r7, sp, #8
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
 8001e78:	603b      	str	r3, [r7, #0]
    peaks_above_min_height( pn_locs, pn_npks, pn_x, n_size, n_min_height );
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	68b9      	ldr	r1, [r7, #8]
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f000 f812 	bl	8001eae <peaks_above_min_height>
    remove_close_peaks( pn_locs, pn_npks, pn_x, n_min_distance );
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	68b9      	ldr	r1, [r7, #8]
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f000 f89b 	bl	8001fcc <remove_close_peaks>
    *pn_npks = minOfTwo( *pn_npks, n_max_num );
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	bfa8      	it	ge
 8001ea0:	461a      	movge	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	601a      	str	r2, [r3, #0]
}
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b087      	sub	sp, #28
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	603b      	str	r3, [r7, #0]
    int32_t i = 1, n_width;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	617b      	str	r3, [r7, #20]
    *pn_npks = 0;
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]

    while (i < n_size-1){
 8001ec6:	e075      	b.n	8001fb4 <peaks_above_min_height+0x106>
        if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){            // find left edge of potential peaks
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	ed93 7a00 	vldr	s14, [r3]
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	ee07 3a90 	vmov	s15, r3
 8001eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ede:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee6:	dd62      	ble.n	8001fae <peaks_above_min_height+0x100>
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	ed93 7a00 	vldr	s14, [r3]
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001efa:	3b01      	subs	r3, #1
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	edd3 7a00 	vldr	s15, [r3]
 8001f06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0e:	dd4e      	ble.n	8001fae <peaks_above_min_height+0x100>
            n_width = 1;
 8001f10:	2301      	movs	r3, #1
 8001f12:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 8001f14:	e002      	b.n	8001f1c <peaks_above_min_height+0x6e>
                n_width++;
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4413      	add	r3, r2
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	dd12      	ble.n	8001f4e <peaks_above_min_height+0xa0>
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	ed93 7a00 	vldr	s14, [r3]
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	4413      	add	r3, r2
 8001f40:	edd3 7a00 	vldr	s15, [r3]
 8001f44:	eeb4 7a67 	vcmp.f32	s14, s15
 8001f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4c:	d0e3      	beq.n	8001f16 <peaks_above_min_height+0x68>
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < (n_size/2) ){                            // find right edge of peaks
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	ed93 7a00 	vldr	s14, [r3]
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4413      	add	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	edd3 7a00 	vldr	s15, [r3]
 8001f6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f72:	dd17      	ble.n	8001fa4 <peaks_above_min_height+0xf6>
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	0fd9      	lsrs	r1, r3, #31
 8001f7c:	440b      	add	r3, r1
 8001f7e:	105b      	asrs	r3, r3, #1
 8001f80:	429a      	cmp	r2, r3
 8001f82:	da0f      	bge.n	8001fa4 <peaks_above_min_height+0xf6>
                pn_locs[(*pn_npks)++] = i;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	1c59      	adds	r1, r3, #1
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	6011      	str	r1, [r2, #0]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	601a      	str	r2, [r3, #0]
                // for flat peaks, peak location is left edge
                i += n_width+1;
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	e003      	b.n	8001fac <peaks_above_min_height+0xfe>
            }
            else
                i += n_width;
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4413      	add	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < (n_size/2) ){                            // find right edge of peaks
 8001fac:	e002      	b.n	8001fb4 <peaks_above_min_height+0x106>
        }
        else
            i++;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
    while (i < n_size-1){
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	db84      	blt.n	8001ec8 <peaks_above_min_height+0x1a>
    }
}
 8001fbe:	bf00      	nop
 8001fc0:	bf00      	nop
 8001fc2:	371c      	adds	r7, #28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <remove_close_peaks>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	603b      	str	r3, [r7, #0]

    int32_t i, j, n_old_npks, n_dist;

    /* Order peaks from large to small */
    sort_indices_descend(pn_x, pn_locs, *pn_npks );
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68f9      	ldr	r1, [r7, #12]
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f860 	bl	80020a8 <sort_indices_descend>

    for ( i = -1; i < *pn_npks; i++ ){
 8001fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	e051      	b.n	8002094 <remove_close_peaks+0xc8>
        n_old_npks = *pn_npks;
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	617b      	str	r3, [r7, #20]
        *pn_npks = i+1;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3301      	adds	r3, #1
 8002002:	61bb      	str	r3, [r7, #24]
 8002004:	e03f      	b.n	8002086 <remove_close_peaks+0xba>
            n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	4413      	add	r3, r2
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002016:	d005      	beq.n	8002024 <remove_close_peaks+0x58>
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	68f9      	ldr	r1, [r7, #12]
 800201e:	440b      	add	r3, r1
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	e001      	b.n	8002028 <remove_close_peaks+0x5c>
 8002024:	f04f 33ff 	mov.w	r3, #4294967295
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	613b      	str	r3, [r7, #16]
            if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	dc04      	bgt.n	800203e <remove_close_peaks+0x72>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	425b      	negs	r3, r3
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	429a      	cmp	r2, r3
 800203c:	da0e      	bge.n	800205c <remove_close_peaks+0x90>
                pn_locs[(*pn_npks)++] = pn_locs[j];
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	441a      	add	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	1c58      	adds	r0, r3, #1
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	6008      	str	r0, [r1, #0]
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	68f9      	ldr	r1, [r7, #12]
 8002054:	440b      	add	r3, r1
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	e011      	b.n	8002080 <remove_close_peaks+0xb4>
            else if(i == -1)
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002062:	d10d      	bne.n	8002080 <remove_close_peaks+0xb4>
                {pn_locs[(*pn_npks)++] = pn_locs[j];}
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	441a      	add	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	1c58      	adds	r0, r3, #1
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	6008      	str	r0, [r1, #0]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	68f9      	ldr	r1, [r7, #12]
 800207a:	440b      	add	r3, r1
 800207c:	6812      	ldr	r2, [r2, #0]
 800207e:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	3301      	adds	r3, #1
 8002084:	61bb      	str	r3, [r7, #24]
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	429a      	cmp	r2, r3
 800208c:	dbbb      	blt.n	8002006 <remove_close_peaks+0x3a>
    for ( i = -1; i < *pn_npks; i++ ){
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3301      	adds	r3, #1
 8002092:	61fb      	str	r3, [r7, #28]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	429a      	cmp	r2, r3
 800209c:	dba8      	blt.n	8001ff0 <remove_close_peaks+0x24>
        }
    }

    // Resort indices longo ascending order
  //  sort_ascend(pn_locs, *pn_npks );
}
 800209e:	bf00      	nop
 80020a0:	bf00      	nop
 80020a2:	3720      	adds	r7, #32
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/
{
 80020a8:	b480      	push	{r7}
 80020aa:	b089      	sub	sp, #36	; 0x24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 80020b4:	2301      	movs	r3, #1
 80020b6:	61fb      	str	r3, [r7, #28]
 80020b8:	e03c      	b.n	8002134 <sort_indices_descend+0x8c>
        n_temp = pn_indx[i];
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	4413      	add	r3, r2
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	617b      	str	r3, [r7, #20]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	e00f      	b.n	80020ec <sort_indices_descend+0x44>
            pn_indx[j] = pn_indx[j-1];
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020d2:	3b01      	subs	r3, #1
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	441a      	add	r2, r3
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	68b9      	ldr	r1, [r7, #8]
 80020e0:	440b      	add	r3, r1
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	61bb      	str	r3, [r7, #24]
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	dd17      	ble.n	8002122 <sort_indices_descend+0x7a>
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4413      	add	r3, r2
 80020fa:	ed93 7a00 	vldr	s14, [r3]
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002104:	3b01      	subs	r3, #1
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	4413      	add	r3, r2
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	4413      	add	r3, r2
 8002114:	edd3 7a00 	vldr	s15, [r3]
 8002118:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800211c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002120:	dcd4      	bgt.n	80020cc <sort_indices_descend+0x24>
        pn_indx[j] = n_temp;
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	4413      	add	r3, r2
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3301      	adds	r3, #1
 8002132:	61fb      	str	r3, [r7, #28]
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	429a      	cmp	r2, r3
 800213a:	dbbe      	blt.n	80020ba <sort_indices_descend+0x12>
    }
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	3724      	adds	r7, #36	; 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <Lora_Init>:
  * @brief  Check if the LoRa module is working
  * @param  void
  * @retval status of the module (ready or not ready)
  **************************************************************/
RetCode_t Lora_Init(void)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
  ATEerror_t Status;

  /*check if the module is working*/
  Status = Modem_AT_Cmd(AT_CTRL, AT, NULL);
 8002150:	2200      	movs	r2, #0
 8002152:	2100      	movs	r1, #0
 8002154:	2000      	movs	r0, #0
 8002156:	f7fe ff31 	bl	8000fbc <Modem_AT_Cmd>
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
#ifdef USE_LRWAN_NS1
  if (Status == ATCTL_RET_CMD_AT)
#else
  if (Status == AT_OK)
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <Lora_Init+0x1e>
#endif
    /* received Ok from module*/
    return (MODULE_READY);
 8002164:	2300      	movs	r3, #0
 8002166:	e004      	b.n	8002172 <Lora_Init+0x28>
  else
  {
	//DBG_PRINTF("Module Not Ready\n");
	HAL_Delay(5000);
 8002168:	f241 3088 	movw	r0, #5000	; 0x1388
 800216c:	f001 ff0c 	bl	8003f88 <HAL_Delay>
    return (MODULE_NO_READY);
 8002170:	2301      	movs	r3, #1
  }
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <Lora_Join>:
  * @param  Mode: by OTAA or by ABP
  * @retval LoRA return code
  * @Nota param is relevant for USI WM_SG_SM_XX modem/LRWAN_NS1 modem / WL55 modem - Not relevant for MDM32L07X01 modem
  **************************************************************/
ATEerror_t Lora_Join(uint8_t Mode)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b084      	sub	sp, #16
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	71fb      	strb	r3, [r7, #7]
#ifdef USE_LRWAN_NS1
  ATEerror_t Status = ATCTL_RET_IDLE;
  atctl_data_t dttmp;
  uint32_t current_st = 0;
#else
  ATEerror_t Status = AT_END_ERROR;
 8002184:	2308      	movs	r3, #8
 8002186:	73fb      	strb	r3, [r7, #15]
    default:
      break;
  }
#elif USE_MDM32L07X01
  /*request a join connection and whatever the mode DO waiting DELAY_FOR_JOIN_STATUS_REQ seconds*/
  Status = Modem_AT_Cmd(AT_SET, AT_JOIN, &Mode);
 8002188:	1dfb      	adds	r3, r7, #7
 800218a:	461a      	mov	r2, r3
 800218c:	2102      	movs	r1, #2
 800218e:	2001      	movs	r0, #1
 8002190:	f7fe ff14 	bl	8000fbc <Modem_AT_Cmd>
 8002194:	4603      	mov	r3, r0
 8002196:	73fb      	strb	r3, [r7, #15]
  //Status = Modem_AT_Cmd(AT_CTRL, AT_JOIN, NULL);
  if (Status == AT_BUSY_ERROR)
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	2b04      	cmp	r3, #4
 800219c:	d101      	bne.n	80021a2 <Lora_Join+0x28>
  {
    return Status;
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	e002      	b.n	80021a8 <Lora_Join+0x2e>
    //UTIL_TIMER_Create(&JoinStatusDelayTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, Lora_OnJoinStatusDelayTimerEvt, NULL);
    /*Set and start the Join status request timeout */
    //UTIL_TIMER_SetPeriod(&JoinStatusDelayTimer, DELAY_FOR_JOIN_STATUS_REQ);
    //UTIL_TIMER_Start(&JoinStatusDelayTimer);

    Status = AT_JOIN_SLEEP_TRANSITION;
 80021a2:	230a      	movs	r3, #10
 80021a4:	73fb      	strb	r3, [r7, #15]
    default:
      break;
  }
#endif

  return (Status);
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <Lora_JoinAccept>:
  * @param  void
  * @retval LoRA return code
  * @Nota this function supports either USI protocol or MDM32L07X01 protocol
  **************************************************************/
ATEerror_t Lora_JoinAccept(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
  ATEerror_t Status = AT_END_ERROR;
 80021b6:	2308      	movs	r3, #8
 80021b8:	71fb      	strb	r3, [r7, #7]

#if USE_I_NUCLEO_LRWAN1 || USE_MDM32WL
  /*trap the asynchronous accept event (OTAA mode) coming from USI modem or WL55 modem*/
  Status = Modem_AT_Cmd(AT_ASYNC_EVENT, AT_JOIN, NULL);
#elif USE_MDM32L07X01
  uint8_t JoinStatus = 0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	71bb      	strb	r3, [r7, #6]
 // {
 //   UTIL_TIMER_Stop(&JoinStatusDelayTimer);
 //   JoinTimeOutFlag = RESET;
    /*request the join network status*/
    //Status = Modem_AT_Cmd(AT_GET, AT_NJS, &JoinStatus);
    Status = Modem_AT_Cmd(AT_ASYNC_EVENT, AT_JOIN, NULL);
 80021be:	2200      	movs	r2, #0
 80021c0:	2102      	movs	r1, #2
 80021c2:	2004      	movs	r0, #4
 80021c4:	f7fe fefa 	bl	8000fbc <Modem_AT_Cmd>
 80021c8:	4603      	mov	r3, r0
 80021ca:	71fb      	strb	r3, [r7, #7]
    if (Status == AT_OK)
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d104      	bne.n	80021dc <Lora_JoinAccept+0x2c>
    {
      if (JoinStatus)       /*LoRa Nwk joined*/
 80021d2:	79bb      	ldrb	r3, [r7, #6]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <Lora_JoinAccept+0x30>
      {
        return Status;
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	e002      	b.n	80021e2 <Lora_JoinAccept+0x32>
      }
    }
    else
    {
      /*LoRa nwk not joined*/
      return  AT_NO_NET_JOINED;
 80021dc:	2307      	movs	r3, #7
 80021de:	e000      	b.n	80021e2 <Lora_JoinAccept+0x32>
    }
 // }
#endif
  return (Status);
 80021e0:	79fb      	ldrb	r3, [r7, #7]

}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <LoRa_GetAppID>:
  * @brief  Request the Application Identifier
  * @param  pointer to the APPEUI out value
  * @retval LoRa return code
  **************************************************************/
ATEerror_t LoRa_GetAppID(uint8_t *AppEui)
{
 80021ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ee:	b08b      	sub	sp, #44	; 0x2c
 80021f0:	af06      	add	r7, sp, #24
 80021f2:	6078      	str	r0, [r7, #4]
  ATEerror_t Status;

  Status = Modem_AT_Cmd(AT_GET, AT_APPEUI, PtrTempValueFromDevice);
 80021f4:	4a15      	ldr	r2, [pc, #84]	; (800224c <LoRa_GetAppID+0x60>)
 80021f6:	2109      	movs	r1, #9
 80021f8:	2002      	movs	r0, #2
 80021fa:	f7fe fedf 	bl	8000fbc <Modem_AT_Cmd>
 80021fe:	4603      	mov	r3, r0
 8002200:	73fb      	strb	r3, [r7, #15]
      AppEui[i] = dt.id.appeui[i];
    }
    return (Status);
  }
#else
  if (Status == 0)
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d11b      	bne.n	8002240 <LoRa_GetAppID+0x54>
                 &AppEui[4], &AppEui[5], &AppEui[6], &AppEui[7]);
    }
#endif

#ifdef USE_MDM32L07X01
    AT_VSSCANF((char *)PtrTempValueFromDevice, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	1c5e      	adds	r6, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3302      	adds	r3, #2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	3203      	adds	r2, #3
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	3104      	adds	r1, #4
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	3005      	adds	r0, #5
 800221c:	687c      	ldr	r4, [r7, #4]
 800221e:	3406      	adds	r4, #6
 8002220:	687d      	ldr	r5, [r7, #4]
 8002222:	3507      	adds	r5, #7
 8002224:	9505      	str	r5, [sp, #20]
 8002226:	9404      	str	r4, [sp, #16]
 8002228:	9003      	str	r0, [sp, #12]
 800222a:	9102      	str	r1, [sp, #8]
 800222c:	9201      	str	r2, [sp, #4]
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	4633      	mov	r3, r6
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	4906      	ldr	r1, [pc, #24]	; (8002250 <LoRa_GetAppID+0x64>)
 8002236:	4805      	ldr	r0, [pc, #20]	; (800224c <LoRa_GetAppID+0x60>)
 8002238:	f009 fb72 	bl	800b920 <tiny_sscanf>
               &AppEui[0], &AppEui[1], &AppEui[2], &AppEui[3],
               &AppEui[4], &AppEui[5], &AppEui[6], &AppEui[7]);
#endif

    return (Status);
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	e000      	b.n	8002242 <LoRa_GetAppID+0x56>
  }
#endif
  else
  {
    return (Status);
 8002240:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800224a:	bf00      	nop
 800224c:	200003a8 	.word	0x200003a8
 8002250:	0801151c 	.word	0x0801151c

08002254 <LoRa_GetDeviceID>:
  * @brief  Request the device extended universal identifier
  * @param  pointer to the DEUI out value
  * @retval LoRa return code
  **************************************************************/
ATEerror_t LoRa_GetDeviceID(uint8_t *PtrDeviceID)
{
 8002254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002256:	b08b      	sub	sp, #44	; 0x2c
 8002258:	af06      	add	r7, sp, #24
 800225a:	6078      	str	r0, [r7, #4]
  ATEerror_t Status;

  Status = Modem_AT_Cmd(AT_GET, AT_DEUI, PtrTempValueFromDevice);
 800225c:	4a15      	ldr	r2, [pc, #84]	; (80022b4 <LoRa_GetDeviceID+0x60>)
 800225e:	2104      	movs	r1, #4
 8002260:	2002      	movs	r0, #2
 8002262:	f7fe feab 	bl	8000fbc <Modem_AT_Cmd>
 8002266:	4603      	mov	r3, r0
 8002268:	73fb      	strb	r3, [r7, #15]
      PtrDeviceID[i] = dt.id.deveui[i];
    }
    return (Status);
  }
#else
  if (Status == 0)
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d11b      	bne.n	80022a8 <LoRa_GetDeviceID+0x54>
                 &PtrDeviceID[4], &PtrDeviceID[5], &PtrDeviceID[6], &PtrDeviceID[7]);
    }
#endif

#ifdef USE_MDM32L07X01
    AT_VSSCANF((char *)PtrTempValueFromDevice, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	1c5e      	adds	r6, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3302      	adds	r3, #2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	3203      	adds	r2, #3
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	3104      	adds	r1, #4
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	3005      	adds	r0, #5
 8002284:	687c      	ldr	r4, [r7, #4]
 8002286:	3406      	adds	r4, #6
 8002288:	687d      	ldr	r5, [r7, #4]
 800228a:	3507      	adds	r5, #7
 800228c:	9505      	str	r5, [sp, #20]
 800228e:	9404      	str	r4, [sp, #16]
 8002290:	9003      	str	r0, [sp, #12]
 8002292:	9102      	str	r1, [sp, #8]
 8002294:	9201      	str	r2, [sp, #4]
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	4633      	mov	r3, r6
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	4906      	ldr	r1, [pc, #24]	; (80022b8 <LoRa_GetDeviceID+0x64>)
 800229e:	4805      	ldr	r0, [pc, #20]	; (80022b4 <LoRa_GetDeviceID+0x60>)
 80022a0:	f009 fb3e 	bl	800b920 <tiny_sscanf>
               &PtrDeviceID[0], &PtrDeviceID[1], &PtrDeviceID[2], &PtrDeviceID[3],
               &PtrDeviceID[4], &PtrDeviceID[5], &PtrDeviceID[6], &PtrDeviceID[7]);
#endif

    return (Status);
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	e000      	b.n	80022aa <LoRa_GetDeviceID+0x56>
  }
#endif
  else
  {
    return (Status);
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200003a8 	.word	0x200003a8
 80022b8:	0801151c 	.word	0x0801151c

080022bc <Lora_SetAdaptiveDataRate>:
  * @brief  Do a request to set the adaptive data rate
  * @param  ADR in value 0(off) / 1(on)
  * @retval LoRa return code
  **************************************************************/
ATEerror_t Lora_SetAdaptiveDataRate(uint8_t Rate)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
  ATEerror_t Status;

  Status = Modem_AT_Cmd(AT_SET, AT_ADR, &Rate);
 80022c6:	1dfb      	adds	r3, r7, #7
 80022c8:	461a      	mov	r2, r3
 80022ca:	210a      	movs	r1, #10
 80022cc:	2001      	movs	r0, #1
 80022ce:	f7fe fe75 	bl	8000fbc <Modem_AT_Cmd>
 80022d2:	4603      	mov	r3, r0
 80022d4:	73fb      	strb	r3, [r7, #15]

  return (Status);
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <Lora_SetDataRate>:
  * @param  DR in value [0,1,2,3,4,5,6,7]
  *         If use USE_LRWAN_NS1, DR range in 0~15
  * @retval LoRa return code
  **************************************************************/
ATEerror_t Lora_SetDataRate(uint8_t DataRate)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
  ATEerror_t Status;

  Status = Modem_AT_Cmd(AT_SET, AT_DR, &DataRate);
 80022ea:	1dfb      	adds	r3, r7, #7
 80022ec:	461a      	mov	r2, r3
 80022ee:	210c      	movs	r1, #12
 80022f0:	2001      	movs	r0, #1
 80022f2:	f7fe fe63 	bl	8000fbc <Modem_AT_Cmd>
 80022f6:	4603      	mov	r3, r0
 80022f8:	73fb      	strb	r3, [r7, #15]

  return (Status);
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <Lora_SendDataBin>:
  * @brief  Send binary data to a giving port number
  * @param  SENDB in value ( USE_MDM32L07X01) SEND in value ( USE_I_NUCLEO_LRWAN1)
  * @retval LoRa return code
  **************************************************************/
ATEerror_t Lora_SendDataBin(sSendDataBinary_t *PtrStructData)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  ATEerror_t Status;

#ifdef USE_MDM32L07X01
  Status = Modem_AT_Cmd(AT_SET, AT_SENDB, PtrStructData);
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	211a      	movs	r1, #26
 8002310:	2001      	movs	r0, #1
 8002312:	f7fe fe53 	bl	8000fbc <Modem_AT_Cmd>
 8002316:	4603      	mov	r3, r0
 8002318:	73fb      	strb	r3, [r7, #15]
  Status = Modem_AT_Cmd(AT_SET, AT_SEND, PtrStructData);
#elif USE_LRWAN_NS1
  Status = Modem_AT_Cmd(AT_SET, AT_SENDB, PtrStructData);
  Status = Lora_Send();
#endif
  return (Status);
 800231a:	7bfb      	ldrb	r3, [r7, #15]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <Lora_fsm>:
  * @Brief lora Modem state machine
  * @param void
  * @retval None
  ******************************************************************************/
void Lora_fsm(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
  ATEerror_t LoraCmdRetCode;
  uint8_t devEui[8];
  uint8_t appEui[8];


  switch (DeviceState)
 800232a:	4b43      	ldr	r3, [pc, #268]	; (8002438 <Lora_fsm+0x114>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b04      	cmp	r3, #4
 8002330:	d876      	bhi.n	8002420 <Lora_fsm+0xfc>
 8002332:	a201      	add	r2, pc, #4	; (adr r2, 8002338 <Lora_fsm+0x14>)
 8002334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002338:	0800234d 	.word	0x0800234d
 800233c:	08002389 	.word	0x08002389
 8002340:	080023bd 	.word	0x080023bd
 8002344:	080023f1 	.word	0x080023f1
 8002348:	080023c5 	.word	0x080023c5
  {
    case DEVICE_INIT:
    {
      /* Check if the LoRa Modem is ready to work*/

      LoraModuleRetCode = Lora_Init();
 800234c:	f7ff fefd 	bl	800214a <Lora_Init>
 8002350:	4603      	mov	r3, r0
 8002352:	75bb      	strb	r3, [r7, #22]

      if (LoraModuleRetCode == MODULE_READY)
 8002354:	7dbb      	ldrb	r3, [r7, #22]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d166      	bne.n	8002428 <Lora_fsm+0x104>
      {
    	//DBG_PRINTF("Lora module ready\n");
        /* get the embedded DevEUI of the modem*/
        LoRa_GetDeviceID(&devEui[0]);
 800235a:	f107 030c 	add.w	r3, r7, #12
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff ff78 	bl	8002254 <LoRa_GetDeviceID>
        //DBG_PRINTF("Device EUI = %s \n",(char*)devEui);
        /* get the embedded AppEUI */
        LoRa_GetAppID(&appEui[0]);
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ff40 	bl	80021ec <LoRa_GetAppID>
       // DBG_PRINTF("APP EUI  = %s \n",(char*)appEui );
        DeviceState = DEVICE_READY;
 800236c:	4b32      	ldr	r3, [pc, #200]	; (8002438 <Lora_fsm+0x114>)
 800236e:	2201      	movs	r2, #1
 8002370:	701a      	strb	r2, [r3, #0]
        //LoraCmdRetCode = Lora_SetJoinMode(LoraDriverParam->JoinMode);

        /*to adapt the data rate during transmission*/
        /*LoraCmdRetCode = Lora_SetAdaptiveDataRate(ADAPT_DATA_RATE_ENABLE);*/

        LoraCmdRetCode = Lora_SetAdaptiveDataRate(ADAPT_DATA_RATE_DISABLE);
 8002372:	2000      	movs	r0, #0
 8002374:	f7ff ffa2 	bl	80022bc <Lora_SetAdaptiveDataRate>
 8002378:	4603      	mov	r3, r0
 800237a:	75fb      	strb	r3, [r7, #23]
        LoraCmdRetCode = Lora_SetDataRate(DR_3);
 800237c:	2003      	movs	r0, #3
 800237e:	f7ff ffaf 	bl	80022e0 <Lora_SetDataRate>
 8002382:	4603      	mov	r3, r0
 8002384:	75fb      	strb	r3, [r7, #23]
      }
      else
      {
        DBG_PRINTF("Lora module not ready\n");   /*we stay in Init state and redo Lora_Init*/
      }
      break;
 8002386:	e04f      	b.n	8002428 <Lora_fsm+0x104>

      //UTIL_TIMER_SetPeriod(&DemoLedTimer, 200);

      //UTIL_TIMER_Start(&DemoLedTimer);

      LoraCmdRetCode = Lora_Join(LoraDriverParam->JoinMode);
 8002388:	4b2c      	ldr	r3, [pc, #176]	; (800243c <Lora_fsm+0x118>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	789b      	ldrb	r3, [r3, #2]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fef3 	bl	800217a <Lora_Join>
 8002394:	4603      	mov	r3, r0
 8002396:	75fb      	strb	r3, [r7, #23]
      switch (LoraCmdRetCode)
 8002398:	7dfb      	ldrb	r3, [r7, #23]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <Lora_fsm+0x80>
 800239e:	2b0a      	cmp	r3, #10
 80023a0:	d004      	beq.n	80023ac <Lora_fsm+0x88>
            //DBG_PRINTF("Device join ongoing \n");
            break;
          }
        default:
          DBG_PRINTF("Nwk Not Joined\n");   /* we stay in ready state and redo LoRa_Join*/
          break;
 80023a2:	e00a      	b.n	80023ba <Lora_fsm+0x96>
            DeviceState = DEVICE_JOINED;
 80023a4:	4b24      	ldr	r3, [pc, #144]	; (8002438 <Lora_fsm+0x114>)
 80023a6:	2202      	movs	r2, #2
 80023a8:	701a      	strb	r2, [r3, #0]
            break;
 80023aa:	e006      	b.n	80023ba <Lora_fsm+0x96>
            DeviceState = DEVICE_SLEEP;
 80023ac:	4b22      	ldr	r3, [pc, #136]	; (8002438 <Lora_fsm+0x114>)
 80023ae:	2204      	movs	r2, #4
 80023b0:	701a      	strb	r2, [r3, #0]
            DeviceSubState = DEVICE_JOIN_ON_GOING;
 80023b2:	4b23      	ldr	r3, [pc, #140]	; (8002440 <Lora_fsm+0x11c>)
 80023b4:	2205      	movs	r2, #5
 80023b6:	701a      	strb	r2, [r3, #0]
            break;
 80023b8:	bf00      	nop
      }
      break;
 80023ba:	e038      	b.n	800242e <Lora_fsm+0x10a>

      /*UTIL_TIMER_SetPeriod(&NextSensorMeasureTimer,
                           LoraDriverParam->SensorCycleMeasure);  /* every #n ms*/
      //UTIL_TIMER_Start(&NextSensorMeasureTimer);

      DeviceState = DEVICE_SEND; // DEVICE_SLEEP;
 80023bc:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <Lora_fsm+0x114>)
 80023be:	2203      	movs	r2, #3
 80023c0:	701a      	strb	r2, [r3, #0]
      break;
 80023c2:	e034      	b.n	800242e <Lora_fsm+0x10a>
    }
    case DEVICE_SLEEP:
    {
      /* Wake up through RTC events or asynchronous event coming from modem*/
      if (DeviceSubState == DEVICE_JOIN_ON_GOING)
 80023c4:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <Lora_fsm+0x11c>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b05      	cmp	r3, #5
 80023ca:	d12f      	bne.n	800242c <Lora_fsm+0x108>
      {
        LoraCmdRetCode = Lora_JoinAccept();
 80023cc:	f7ff fef0 	bl	80021b0 <Lora_JoinAccept>
 80023d0:	4603      	mov	r3, r0
 80023d2:	75fb      	strb	r3, [r7, #23]
        if (LoraCmdRetCode == AT_OK)
 80023d4:	7dfb      	ldrb	r3, [r7, #23]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d106      	bne.n	80023e8 <Lora_fsm+0xc4>
        {
          DeviceState = DEVICE_JOINED;
 80023da:	4b17      	ldr	r3, [pc, #92]	; (8002438 <Lora_fsm+0x114>)
 80023dc:	2202      	movs	r2, #2
 80023de:	701a      	strb	r2, [r3, #0]
          DeviceSubState = DEVICE_INIT;  /* Reset the substate. We are Joined*/
 80023e0:	4b17      	ldr	r3, [pc, #92]	; (8002440 <Lora_fsm+0x11c>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	701a      	strb	r2, [r3, #0]
        {
          DeviceState = DEVICE_READY;
          DBG_PRINTF("Nwk Not Joined\n");   /* we stay in ready state and redo LoRa_Join*/
        }
      }
      break;
 80023e6:	e021      	b.n	800242c <Lora_fsm+0x108>
          DeviceState = DEVICE_READY;
 80023e8:	4b13      	ldr	r3, [pc, #76]	; (8002438 <Lora_fsm+0x114>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
      break;
 80023ee:	e01d      	b.n	800242c <Lora_fsm+0x108>
    case DEVICE_SEND:
    {
        /*Sensor reading on slave device*/
    	//DBG_PRINTF("Device Send \n");
    	//LoraModuleRetCode = Lora_Init();
    	LoraDriverCallbacks->SensorMeasureData(&SendDataBinary);
 80023f0:	4b14      	ldr	r3, [pc, #80]	; (8002444 <Lora_fsm+0x120>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4814      	ldr	r0, [pc, #80]	; (8002448 <Lora_fsm+0x124>)
 80023f8:	4798      	blx	r3
        //UTIL_TIMER_Create(&DemoLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, Lora_OnLedTimerEvent, NULL);
        //UTIL_TIMER_SetPeriod(&DemoLedTimer, 200);
        //UTIL_TIMER_Start(&DemoLedTimer);

        /*Send data to Slave device  */
        LoraCmdRetCode = Lora_SendDataBin(&SendDataBinary);
 80023fa:	4813      	ldr	r0, [pc, #76]	; (8002448 <Lora_fsm+0x124>)
 80023fc:	f7ff ff82 	bl	8002304 <Lora_SendDataBin>
 8002400:	4603      	mov	r3, r0
 8002402:	75fb      	strb	r3, [r7, #23]
        if (LoraCmdRetCode == AT_OK)
 8002404:	7dfb      	ldrb	r3, [r7, #23]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d006      	beq.n	8002418 <Lora_fsm+0xf4>
          //DBG_PRINTF("Data binary send on port = %d --> OK\n", SendDataBinary.Port);
        }
        else
        {
          DBG_PRINTF("Data binary Send on port = %d -->  Failed \n", SendDataBinary.Port);
          HAL_Delay(2000);
 800240a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800240e:	f001 fdbb 	bl	8003f88 <HAL_Delay>
          DeviceState = DEVICE_SEND;
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <Lora_fsm+0x114>)
 8002414:	2203      	movs	r2, #3
 8002416:	701a      	strb	r2, [r3, #0]
      /*  UTIL_TIMER_SetPeriod(&NextSensorMeasureTimer,
                             LoraDriverParam->SensorCycleMeasure );
          UTIL_TIMER_Start(&NextSensorMeasureTimer);*/


      DeviceState = DEVICE_SLEEP;
 8002418:	4b07      	ldr	r3, [pc, #28]	; (8002438 <Lora_fsm+0x114>)
 800241a:	2204      	movs	r2, #4
 800241c:	701a      	strb	r2, [r3, #0]
      break;
 800241e:	e006      	b.n	800242e <Lora_fsm+0x10a>
    }
    default:
    {
      DeviceState = DEVICE_INIT;
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <Lora_fsm+0x114>)
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]
      break;
 8002426:	e002      	b.n	800242e <Lora_fsm+0x10a>
      break;
 8002428:	bf00      	nop
 800242a:	e000      	b.n	800242e <Lora_fsm+0x10a>
      break;
 800242c:	bf00      	nop
    }
  }
}
 800242e:	bf00      	nop
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	200003b8 	.word	0x200003b8
 800243c:	200003a4 	.word	0x200003a4
 8002440:	200003b9 	.word	0x200003b9
 8002444:	200003a0 	.word	0x200003a0
 8002448:	200000fc 	.word	0x200000fc

0800244c <Lora_Ctx_Init>:
  * @param Period to do sensors measurement
  * @retval None
  ******************************************************************************/
void Lora_Ctx_Init(LoRaDriverCallback_t  *PtrLoRaDriverCallbacks,
                   LoRaDriverParam_t *PtrLoRaDriverParam)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]

  /* init the main call backs*/
  LoraDriverCallbacks = PtrLoRaDriverCallbacks;
 8002456:	4a06      	ldr	r2, [pc, #24]	; (8002470 <Lora_Ctx_Init+0x24>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6013      	str	r3, [r2, #0]
  LoraDriverParam = PtrLoRaDriverParam;
 800245c:	4a05      	ldr	r2, [pc, #20]	; (8002474 <Lora_Ctx_Init+0x28>)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	6013      	str	r3, [r2, #0]
  //BSP_LED_Init(LED2);              /*Led indicator on Nucleo master board*/
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	200003a0 	.word	0x200003a0
 8002474:	200003a4 	.word	0x200003a4

08002478 <lora_getDeviceState>:
  * @Brief get the current device finate state
  * @param void
  * @retval deviceState
  ******************************************************************************/
DeviceState_t lora_getDeviceState(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return DeviceState;
 800247c:	4b03      	ldr	r3, [pc, #12]	; (800248c <lora_getDeviceState+0x14>)
 800247e:	781b      	ldrb	r3, [r3, #0]
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	200003b8 	.word	0x200003b8

08002490 <lora_getDeviceSubState>:

DeviceState_t lora_getDeviceSubState(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return DeviceSubState;
 8002494:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <lora_getDeviceSubState+0x14>)
 8002496:	781b      	ldrb	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	200003b9 	.word	0x200003b9

080024a8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  SensorTimerWakeup = 1;
  DeviceState = DEVICE_SEND;
}

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 // DBG_PRINTF("Timer Triggered 2 \n");
  SensorTimerWakeup = 1;
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	701a      	strb	r2, [r3, #0]
  DeviceState = DEVICE_SEND;
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 80024b8:	2203      	movs	r2, #3
 80024ba:	701a      	strb	r2, [r3, #0]

}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	200003ba 	.word	0x200003ba
 80024cc:	200003b8 	.word	0x200003b8

080024d0 <MasterApp_Init>:
/*!
  * Master context initialization following the LoRa modem used
  *
  */
void MasterApp_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0

  Modem_IO_Init();
 80024d4:	f7fe fd6a 	bl	8000fac <Modem_IO_Init>

  /* if using sequencer uncomment the task creation */
  /*UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_Lora_fsm), UTIL_SEQ_RFU, Lora_fsm); */

  Lora_Ctx_Init(&LoRaDriverCallbacks, &LoRaDriverParam);
 80024d8:	4902      	ldr	r1, [pc, #8]	; (80024e4 <MasterApp_Init+0x14>)
 80024da:	4803      	ldr	r0, [pc, #12]	; (80024e8 <MasterApp_Init+0x18>)
 80024dc:	f7ff ffb6 	bl	800244c <Lora_Ctx_Init>
}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	2000010c 	.word	0x2000010c
 80024e8:	20000104 	.word	0x20000104

080024ec <SensorMeasureData>:
		int16_t value;
		uint8_t intBytes[2];
};

static void SensorMeasureData(sSendDataBinary_t *SendDataBinary)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	uint8_t index = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	77fb      	strb	r3, [r7, #31]
	union floatByteStuffing floatingPoint;
	union int16ByteStuffing int16Bytes;

	HAL_GPIO_WritePin(SENSOR_PWR_CNTRL_GPIO_Port, SENSOR_PWR_CNTRL_Pin, GPIO_PIN_RESET); // Switch on  power to the sensor
 80024f8:	2200      	movs	r2, #0
 80024fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024fe:	485a      	ldr	r0, [pc, #360]	; (8002668 <SensorMeasureData+0x17c>)
 8002500:	f004 fb4a 	bl	8006b98 <HAL_GPIO_WritePin>
	GetVibrationData(&VibrationData);
 8002504:	4859      	ldr	r0, [pc, #356]	; (800266c <SensorMeasureData+0x180>)
 8002506:	f001 fc9f 	bl	8003e48 <GetVibrationData>
	int16_t temperatureLevel = (GetTemperatureLevel() * 100);
 800250a:	f001 fc8b 	bl	8003e24 <GetTemperatureLevel>
 800250e:	eef0 7a40 	vmov.f32	s15, s0
 8002512:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002670 <SensorMeasureData+0x184>
 8002516:	ee67 7a87 	vmul.f32	s15, s15, s14
 800251a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800251e:	ee17 3a90 	vmov	r3, s15
 8002522:	82fb      	strh	r3, [r7, #22]
	//DBG_PRINTF("Temperature = %d\r",temperatureLevel);
	DBG_PRINTF("0,0,0,0,0,%d\r",temperatureLevel);
	HAL_GPIO_WritePin(SENSOR_PWR_CNTRL_GPIO_Port, SENSOR_PWR_CNTRL_Pin, GPIO_PIN_SET); // Switch off  power to the sensor
 8002524:	2201      	movs	r2, #1
 8002526:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800252a:	484f      	ldr	r0, [pc, #316]	; (8002668 <SensorMeasureData+0x17c>)
 800252c:	f004 fb34 	bl	8006b98 <HAL_GPIO_WritePin>

	int16Bytes.value = VibrationData.vRMS;
 8002530:	4b4e      	ldr	r3, [pc, #312]	; (800266c <SensorMeasureData+0x180>)
 8002532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002536:	81bb      	strh	r3, [r7, #12]
	SendDataBinary->Buffer[index++] = int16Bytes.intBytes[0];
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	7ffb      	ldrb	r3, [r7, #31]
 800253e:	1c59      	adds	r1, r3, #1
 8002540:	77f9      	strb	r1, [r7, #31]
 8002542:	4413      	add	r3, r2
 8002544:	7b3a      	ldrb	r2, [r7, #12]
 8002546:	701a      	strb	r2, [r3, #0]
	SendDataBinary->Buffer[index++] = int16Bytes.intBytes[1];
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	7ffb      	ldrb	r3, [r7, #31]
 800254e:	1c59      	adds	r1, r3, #1
 8002550:	77f9      	strb	r1, [r7, #31]
 8002552:	4413      	add	r3, r2
 8002554:	7b7a      	ldrb	r2, [r7, #13]
 8002556:	701a      	strb	r2, [r3, #0]

	int16Bytes.value = VibrationData.stdValue;
 8002558:	4b44      	ldr	r3, [pc, #272]	; (800266c <SensorMeasureData+0x180>)
 800255a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800255e:	81bb      	strh	r3, [r7, #12]
	SendDataBinary->Buffer[index++] = int16Bytes.intBytes[0];
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	7ffb      	ldrb	r3, [r7, #31]
 8002566:	1c59      	adds	r1, r3, #1
 8002568:	77f9      	strb	r1, [r7, #31]
 800256a:	4413      	add	r3, r2
 800256c:	7b3a      	ldrb	r2, [r7, #12]
 800256e:	701a      	strb	r2, [r3, #0]
	SendDataBinary->Buffer[index++] = int16Bytes.intBytes[1];
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	7ffb      	ldrb	r3, [r7, #31]
 8002576:	1c59      	adds	r1, r3, #1
 8002578:	77f9      	strb	r1, [r7, #31]
 800257a:	4413      	add	r3, r2
 800257c:	7b7a      	ldrb	r2, [r7, #13]
 800257e:	701a      	strb	r2, [r3, #0]

	int16Bytes.value = VibrationData.maxPeak;
 8002580:	4b3a      	ldr	r3, [pc, #232]	; (800266c <SensorMeasureData+0x180>)
 8002582:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002586:	81bb      	strh	r3, [r7, #12]
	SendDataBinary->Buffer[index++] = int16Bytes.intBytes[0];
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	7ffb      	ldrb	r3, [r7, #31]
 800258e:	1c59      	adds	r1, r3, #1
 8002590:	77f9      	strb	r1, [r7, #31]
 8002592:	4413      	add	r3, r2
 8002594:	7b3a      	ldrb	r2, [r7, #12]
 8002596:	701a      	strb	r2, [r3, #0]
	SendDataBinary->Buffer[index++] = int16Bytes.intBytes[1];
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	7ffb      	ldrb	r3, [r7, #31]
 800259e:	1c59      	adds	r1, r3, #1
 80025a0:	77f9      	strb	r1, [r7, #31]
 80025a2:	4413      	add	r3, r2
 80025a4:	7b7a      	ldrb	r2, [r7, #13]
 80025a6:	701a      	strb	r2, [r3, #0]

	int16Bytes.value = temperatureLevel;
 80025a8:	8afb      	ldrh	r3, [r7, #22]
 80025aa:	81bb      	strh	r3, [r7, #12]
	SendDataBinary->Buffer[index++] = int16Bytes.intBytes[0];
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	7ffb      	ldrb	r3, [r7, #31]
 80025b2:	1c59      	adds	r1, r3, #1
 80025b4:	77f9      	strb	r1, [r7, #31]
 80025b6:	4413      	add	r3, r2
 80025b8:	7b3a      	ldrb	r2, [r7, #12]
 80025ba:	701a      	strb	r2, [r3, #0]
	SendDataBinary->Buffer[index++] = int16Bytes.intBytes[1];
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	7ffb      	ldrb	r3, [r7, #31]
 80025c2:	1c59      	adds	r1, r3, #1
 80025c4:	77f9      	strb	r1, [r7, #31]
 80025c6:	4413      	add	r3, r2
 80025c8:	7b7a      	ldrb	r2, [r7, #13]
 80025ca:	701a      	strb	r2, [r3, #0]

	SendDataBinary->Buffer[index++] = VibrationData.noOfFFTPeaks;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	7ffb      	ldrb	r3, [r7, #31]
 80025d2:	1c59      	adds	r1, r3, #1
 80025d4:	77f9      	strb	r1, [r7, #31]
 80025d6:	4413      	add	r3, r2
 80025d8:	4a24      	ldr	r2, [pc, #144]	; (800266c <SensorMeasureData+0x180>)
 80025da:	7992      	ldrb	r2, [r2, #6]
 80025dc:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<VibrationData.noOfFFTPeaks; i++)
 80025de:	2300      	movs	r3, #0
 80025e0:	61bb      	str	r3, [r7, #24]
 80025e2:	e030      	b.n	8002646 <SensorMeasureData+0x15a>
	{
		int16Bytes.value = VibrationData.maxFFTAmplitudeArray[i];
 80025e4:	4a21      	ldr	r2, [pc, #132]	; (800266c <SensorMeasureData+0x180>)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	3304      	adds	r3, #4
 80025ea:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80025ee:	81bb      	strh	r3, [r7, #12]
		SendDataBinary->Buffer[index++] = int16Bytes.intBytes[0];
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	7ffb      	ldrb	r3, [r7, #31]
 80025f6:	1c59      	adds	r1, r3, #1
 80025f8:	77f9      	strb	r1, [r7, #31]
 80025fa:	4413      	add	r3, r2
 80025fc:	7b3a      	ldrb	r2, [r7, #12]
 80025fe:	701a      	strb	r2, [r3, #0]
		SendDataBinary->Buffer[index++] = int16Bytes.intBytes[1];
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	7ffb      	ldrb	r3, [r7, #31]
 8002606:	1c59      	adds	r1, r3, #1
 8002608:	77f9      	strb	r1, [r7, #31]
 800260a:	4413      	add	r3, r2
 800260c:	7b7a      	ldrb	r2, [r7, #13]
 800260e:	701a      	strb	r2, [r3, #0]

		int16Bytes.value = VibrationData.maxFFTFrequencyArray[i];
 8002610:	4a16      	ldr	r2, [pc, #88]	; (800266c <SensorMeasureData+0x180>)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	3310      	adds	r3, #16
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800261e:	81bb      	strh	r3, [r7, #12]
		SendDataBinary->Buffer[index++] = int16Bytes.intBytes[0];
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	7ffb      	ldrb	r3, [r7, #31]
 8002626:	1c59      	adds	r1, r3, #1
 8002628:	77f9      	strb	r1, [r7, #31]
 800262a:	4413      	add	r3, r2
 800262c:	7b3a      	ldrb	r2, [r7, #12]
 800262e:	701a      	strb	r2, [r3, #0]
		SendDataBinary->Buffer[index++] = int16Bytes.intBytes[1];
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	7ffb      	ldrb	r3, [r7, #31]
 8002636:	1c59      	adds	r1, r3, #1
 8002638:	77f9      	strb	r1, [r7, #31]
 800263a:	4413      	add	r3, r2
 800263c:	7b7a      	ldrb	r2, [r7, #13]
 800263e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<VibrationData.noOfFFTPeaks; i++)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	3301      	adds	r3, #1
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <SensorMeasureData+0x180>)
 8002648:	799b      	ldrb	r3, [r3, #6]
 800264a:	461a      	mov	r2, r3
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	4293      	cmp	r3, r2
 8002650:	dbc8      	blt.n	80025e4 <SensorMeasureData+0xf8>
	}

	SendDataBinary->DataSize = index;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	7ffa      	ldrb	r2, [r7, #31]
 8002656:	711a      	strb	r2, [r3, #4]
	SendDataBinary->Port = LORAWAN_APP_PORT;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2263      	movs	r2, #99	; 0x63
 800265c:	715a      	strb	r2, [r3, #5]
}
 800265e:	bf00      	nop
 8002660:	3720      	adds	r7, #32
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	48000400 	.word	0x48000400
 800266c:	200003bc 	.word	0x200003bc
 8002670:	42c80000 	.word	0x42c80000

08002674 <TIME_DOMAIN_PROCESSING>:
#include "time_domain_statistics.h"
#include "decimation_filter.h"


void TIME_DOMAIN_PROCESSING(vibrationStat_t* vibrationData)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	#if defined (DECIMATION_FACTOR) && (DECIMATION_FACTOR != 1)
		arm_rms_f32 (aFIR_F32_Output, NEW_SAMPLE_LENGTH, &vRMS);
		arm_std_f32 (aFIR_F32_Output, NEW_SAMPLE_LENGTH , &stdValue);
		arm_max_f32 (aFIR_F32_Output, NEW_SAMPLE_LENGTH, &maxPeak, &maxPeakIndex);
	#else
		arm_rms_f32 (aADC1EngineeringValue, NEW_SAMPLE_LENGTH, &vRMS);
 800267c:	f107 0310 	add.w	r3, r7, #16
 8002680:	461a      	mov	r2, r3
 8002682:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002686:	481f      	ldr	r0, [pc, #124]	; (8002704 <TIME_DOMAIN_PROCESSING+0x90>)
 8002688:	f009 fdee 	bl	800c268 <arm_rms_f32>
		arm_std_f32 (aADC1EngineeringValue, NEW_SAMPLE_LENGTH , &stdValue);
 800268c:	f107 030c 	add.w	r3, r7, #12
 8002690:	461a      	mov	r2, r3
 8002692:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002696:	481b      	ldr	r0, [pc, #108]	; (8002704 <TIME_DOMAIN_PROCESSING+0x90>)
 8002698:	f009 fd5c 	bl	800c154 <arm_std_f32>
		arm_max_f32 (aADC1EngineeringValue, NEW_SAMPLE_LENGTH, &maxPeak, &maxPeakIndex);
 800269c:	f107 0314 	add.w	r3, r7, #20
 80026a0:	f107 0208 	add.w	r2, r7, #8
 80026a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026a8:	4816      	ldr	r0, [pc, #88]	; (8002704 <TIME_DOMAIN_PROCESSING+0x90>)
 80026aa:	f009 fe41 	bl	800c330 <arm_max_f32>
    #endif

	vibrationData->vRMS = (vRMS * 100);
 80026ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80026b2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002708 <TIME_DOMAIN_PROCESSING+0x94>
 80026b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026be:	ee17 3a90 	vmov	r3, s15
 80026c2:	b21a      	sxth	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	801a      	strh	r2, [r3, #0]
	vibrationData->stdValue = stdValue * 100;
 80026c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80026cc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002708 <TIME_DOMAIN_PROCESSING+0x94>
 80026d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026d8:	ee17 3a90 	vmov	r3, s15
 80026dc:	b21a      	sxth	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	805a      	strh	r2, [r3, #2]
	vibrationData->maxPeak = maxPeak *100;
 80026e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80026e6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002708 <TIME_DOMAIN_PROCESSING+0x94>
 80026ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026f2:	ee17 3a90 	vmov	r3, s15
 80026f6:	b21a      	sxth	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	809a      	strh	r2, [r3, #4]
	//Skewness
	//Calculate Crest Factor
	//vibrationData->crestFactor = vibrationData->maxPeak/vibrationData->vRMS;
	DBG_PRINTF("%f,%f,%f,%f,0,0\r",vRMS,stdValue,maxPeak,maxPeakIndex);
	//DBG_PRINTF("RMS = %f,Standard Deviation = %f, Max Peak = %f @ %lu\r",vRMS,stdValue,maxPeak,maxPeakIndex);
}
 80026fc:	bf00      	nop
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	2000c8a0 	.word	0x2000c8a0
 8002708:	42c80000 	.word	0x42c80000
 800270c:	00000000 	.word	0x00000000

08002710 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

float SYS_GetTemperatureLevel(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	ed2d 8b02 	vpush	{d8}
 8002716:	b08a      	sub	sp, #40	; 0x28
 8002718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  float temperatureDegreeC = 0.0;
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Coefficients calculated using least square fitting in Matlab with the given data*/
  float THRM_A0 = 141.7502;
 8002720:	4b3b      	ldr	r3, [pc, #236]	; (8002810 <SYS_GetTemperatureLevel+0x100>)
 8002722:	623b      	str	r3, [r7, #32]
  float THRM_A1 = -178.9365;
 8002724:	4b3b      	ldr	r3, [pc, #236]	; (8002814 <SYS_GetTemperatureLevel+0x104>)
 8002726:	61fb      	str	r3, [r7, #28]
  float THRM_A2 = 170.7529;
 8002728:	4b3b      	ldr	r3, [pc, #236]	; (8002818 <SYS_GetTemperatureLevel+0x108>)
 800272a:	61bb      	str	r3, [r7, #24]
  float THRM_A3 = -99.0799;
 800272c:	4b3b      	ldr	r3, [pc, #236]	; (800281c <SYS_GetTemperatureLevel+0x10c>)
 800272e:	617b      	str	r3, [r7, #20]
  float THRM_A4 = 28.9903;
 8002730:	4b3b      	ldr	r3, [pc, #236]	; (8002820 <SYS_GetTemperatureLevel+0x110>)
 8002732:	613b      	str	r3, [r7, #16]
  float THRM_A5 = -3.3815;
 8002734:	4b3b      	ldr	r3, [pc, #236]	; (8002824 <SYS_GetTemperatureLevel+0x114>)
 8002736:	60fb      	str	r3, [r7, #12]

  uint32_t measuredLevel = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	60bb      	str	r3, [r7, #8]
  float msdV = 0.0;
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	607b      	str	r3, [r7, #4]
 // uint16_t batteryLevelmV = SYS_GetBatteryLevel();


  measuredLevel = ADC_ReadChannel_Temp(ADC_CHANNEL_11);
 8002742:	4839      	ldr	r0, [pc, #228]	; (8002828 <SYS_GetTemperatureLevel+0x118>)
 8002744:	f000 f8fc 	bl	8002940 <ADC_ReadChannel_Temp>
 8002748:	60b8      	str	r0, [r7, #8]
  msdV = (3.3/4096) * measuredLevel;
 800274a:	68b8      	ldr	r0, [r7, #8]
 800274c:	f7fd fee2 	bl	8000514 <__aeabi_ui2d>
 8002750:	a32d      	add	r3, pc, #180	; (adr r3, 8002808 <SYS_GetTemperatureLevel+0xf8>)
 8002752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002756:	f7fd ff57 	bl	8000608 <__aeabi_dmul>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4610      	mov	r0, r2
 8002760:	4619      	mov	r1, r3
 8002762:	f7fe fa29 	bl	8000bb8 <__aeabi_d2f>
 8002766:	4603      	mov	r3, r0
 8002768:	607b      	str	r3, [r7, #4]
  temperatureDegreeC = (THRM_A5 * powf(msdV,5)) + (THRM_A4 * powf(msdV,4)) + (THRM_A3 * powf(msdV,3)) + (THRM_A2 * powf( msdV,2)) + (THRM_A1 *  msdV) + THRM_A0;
 800276a:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 800276e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002772:	f00d f8ad 	bl	800f8d0 <powf>
 8002776:	eeb0 7a40 	vmov.f32	s14, s0
 800277a:	edd7 7a03 	vldr	s15, [r7, #12]
 800277e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002782:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8002786:	ed97 0a01 	vldr	s0, [r7, #4]
 800278a:	f00d f8a1 	bl	800f8d0 <powf>
 800278e:	eeb0 7a40 	vmov.f32	s14, s0
 8002792:	edd7 7a04 	vldr	s15, [r7, #16]
 8002796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800279a:	ee38 8a27 	vadd.f32	s16, s16, s15
 800279e:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80027a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80027a6:	f00d f893 	bl	800f8d0 <powf>
 80027aa:	eeb0 7a40 	vmov.f32	s14, s0
 80027ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80027b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b6:	ee38 8a27 	vadd.f32	s16, s16, s15
 80027ba:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80027be:	ed97 0a01 	vldr	s0, [r7, #4]
 80027c2:	f00d f885 	bl	800f8d0 <powf>
 80027c6:	eeb0 7a40 	vmov.f32	s14, s0
 80027ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80027ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d2:	ee38 7a27 	vadd.f32	s14, s16, s15
 80027d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80027da:	edd7 7a01 	vldr	s15, [r7, #4]
 80027de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e6:	ed97 7a08 	vldr	s14, [r7, #32]
 80027ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  return  temperatureDegreeC;
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	ee07 3a90 	vmov	s15, r3
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 80027f8:	eeb0 0a67 	vmov.f32	s0, s15
 80027fc:	3728      	adds	r7, #40	; 0x28
 80027fe:	46bd      	mov	sp, r7
 8002800:	ecbd 8b02 	vpop	{d8}
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	66666666 	.word	0x66666666
 800280c:	3f4a6666 	.word	0x3f4a6666
 8002810:	430dc00d 	.word	0x430dc00d
 8002814:	c332efbe 	.word	0xc332efbe
 8002818:	432ac0be 	.word	0x432ac0be
 800281c:	c2c628e9 	.word	0xc2c628e9
 8002820:	41e7ec22 	.word	0x41e7ec22
 8002824:	c0586a7f 	.word	0xc0586a7f
 8002828:	2e300800 	.word	0x2e300800
 800282c:	00000000 	.word	0x00000000

08002830 <SYS_GetVibrationData>:
}

/* Private Functions Definition -----------------------------------------------*/
/* USER CODE BEGIN PrFD */
void SYS_GetVibrationData(vibrationStat_t* vibrationData)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

	MX_ADC1_Init();
 8002838:	f000 f936 	bl	8002aa8 <MX_ADC1_Init>

    HAL_Delay(1000);
 800283c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002840:	f001 fba2 	bl	8003f88 <HAL_Delay>

    memset(aADC1ConvertedValue_s, 0x00, sizeof(aADC1ConvertedValue_s[0])*SAMPLES);
 8002844:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002848:	2100      	movs	r1, #0
 800284a:	4837      	ldr	r0, [pc, #220]	; (8002928 <SYS_GetVibrationData+0xf8>)
 800284c:	f00a fa2a 	bl	800cca4 <memset>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) // Initialize the timer PWM for ADC sampling
 8002850:	2100      	movs	r1, #0
 8002852:	4836      	ldr	r0, [pc, #216]	; (800292c <SYS_GetVibrationData+0xfc>)
 8002854:	f006 fbda 	bl	800900c <HAL_TIM_PWM_Start>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <SYS_GetVibrationData+0x32>
	  	  Error_Handler();
 800285e:	f000 fc15 	bl	800308c <Error_Handler>


	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&aADC1ConvertedValue_s, SAMPLES) != HAL_OK) // Initialize the DMA
 8002862:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002866:	4930      	ldr	r1, [pc, #192]	; (8002928 <SYS_GetVibrationData+0xf8>)
 8002868:	4831      	ldr	r0, [pc, #196]	; (8002930 <SYS_GetVibrationData+0x100>)
 800286a:	f002 fba1 	bl	8004fb0 <HAL_ADC_Start_DMA>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <SYS_GetVibrationData+0x50>
	{
	    /* Start Conversation Error */
		Error_Handler();
 8002874:	f000 fc0a 	bl	800308c <Error_Handler>
	}

	while(adcConversionFlag!=1)
 8002878:	e002      	b.n	8002880 <SYS_GetVibrationData+0x50>
	{
		HAL_Delay(50);
 800287a:	2032      	movs	r0, #50	; 0x32
 800287c:	f001 fb84 	bl	8003f88 <HAL_Delay>
	while(adcConversionFlag!=1)
 8002880:	4b2c      	ldr	r3, [pc, #176]	; (8002934 <SYS_GetVibrationData+0x104>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b01      	cmp	r3, #1
 8002888:	d1f7      	bne.n	800287a <SYS_GetVibrationData+0x4a>
	}
	adcConversionFlag = 0;
 800288a:	4b2a      	ldr	r3, [pc, #168]	; (8002934 <SYS_GetVibrationData+0x104>)
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]

	HAL_ADC_DeInit(&hadc1);
 8002890:	4827      	ldr	r0, [pc, #156]	; (8002930 <SYS_GetVibrationData+0x100>)
 8002892:	f002 f941 	bl	8004b18 <HAL_ADC_DeInit>

	//DBG_PRINTF("Raw Data\r");

	for(int i=0;i<SAMPLES;i++)
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	e02e      	b.n	80028fa <SYS_GetVibrationData+0xca>
	{
		//DBG_PRINTF("%d\r",aADC1ConvertedValue_s[i]);
		aADC1EngineeringValue[i] = (((aADC1ConvertedValue_s[i]-1525)*3.43)/4096)/0.118;
 800289c:	4a22      	ldr	r2, [pc, #136]	; (8002928 <SYS_GetVibrationData+0xf8>)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028a4:	f2a3 53f5 	subw	r3, r3, #1525	; 0x5f5
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fd fe43 	bl	8000534 <__aeabi_i2d>
 80028ae:	a31a      	add	r3, pc, #104	; (adr r3, 8002918 <SYS_GetVibrationData+0xe8>)
 80028b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b4:	f7fd fea8 	bl	8000608 <__aeabi_dmul>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4610      	mov	r0, r2
 80028be:	4619      	mov	r1, r3
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <SYS_GetVibrationData+0x108>)
 80028c6:	f7fd ffc9 	bl	800085c <__aeabi_ddiv>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4610      	mov	r0, r2
 80028d0:	4619      	mov	r1, r3
 80028d2:	a313      	add	r3, pc, #76	; (adr r3, 8002920 <SYS_GetVibrationData+0xf0>)
 80028d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d8:	f7fd ffc0 	bl	800085c <__aeabi_ddiv>
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	4610      	mov	r0, r2
 80028e2:	4619      	mov	r1, r3
 80028e4:	f7fe f968 	bl	8000bb8 <__aeabi_d2f>
 80028e8:	4602      	mov	r2, r0
 80028ea:	4914      	ldr	r1, [pc, #80]	; (800293c <SYS_GetVibrationData+0x10c>)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	601a      	str	r2, [r3, #0]
	for(int i=0;i<SAMPLES;i++)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	3301      	adds	r3, #1
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002900:	dbcc      	blt.n	800289c <SYS_GetVibrationData+0x6c>
    #if(DECIMATION_FACTOR != 1)
		FIR_DECIMATOR_F32Process();
    #endif

	/**Calculate Time domain Statistical Features**/
	TIME_DOMAIN_PROCESSING(vibrationData);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7ff feb6 	bl	8002674 <TIME_DOMAIN_PROCESSING>
	/**Calculate Frequency domain Features**/
	FFT_PROCESSING_F32Process(vibrationData);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff f8a1 	bl	8001a50 <FFT_PROCESSING_F32Process>

}
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	d70a3d71 	.word	0xd70a3d71
 800291c:	400b70a3 	.word	0x400b70a3
 8002920:	7ced9168 	.word	0x7ced9168
 8002924:	3fbe353f 	.word	0x3fbe353f
 8002928:	200108ec 	.word	0x200108ec
 800292c:	200108a0 	.word	0x200108a0
 8002930:	2000c748 	.word	0x2000c748
 8002934:	20000400 	.word	0x20000400
 8002938:	40b00000 	.word	0x40b00000
 800293c:	2000c8a0 	.word	0x2000c8a0

08002940 <ADC_ReadChannel_Temp>:
/* USER CODE END PrFD */

static uint32_t ADC_ReadChannel_Temp(uint32_t channel)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]

  MX_ADC1_Init_Temp();
 800294c:	f000 fb32 	bl	8002fb4 <MX_ADC1_Init_Temp>

  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8002950:	4810      	ldr	r0, [pc, #64]	; (8002994 <ADC_ReadChannel_Temp+0x54>)
 8002952:	f002 fa07 	bl	8004d64 <HAL_ADC_Start>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <ADC_ReadChannel_Temp+0x20>
  {
    /* Start Error */
    Error_Handler();
 800295c:	f000 fb96 	bl	800308c <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002960:	f04f 31ff 	mov.w	r1, #4294967295
 8002964:	480b      	ldr	r0, [pc, #44]	; (8002994 <ADC_ReadChannel_Temp+0x54>)
 8002966:	f002 fa93 	bl	8004e90 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc1) ;   /* it calls also ADC_Disable() */
 800296a:	480a      	ldr	r0, [pc, #40]	; (8002994 <ADC_ReadChannel_Temp+0x54>)
 800296c:	f002 fa5d 	bl	8004e2a <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc1);
 8002970:	4808      	ldr	r0, [pc, #32]	; (8002994 <ADC_ReadChannel_Temp+0x54>)
 8002972:	f002 fc02 	bl	800517a <HAL_ADC_GetValue>
 8002976:	60f8      	str	r0, [r7, #12]

  HAL_ADC_DeInit(&hadc1);
 8002978:	4806      	ldr	r0, [pc, #24]	; (8002994 <ADC_ReadChannel_Temp+0x54>)
 800297a:	f002 f8cd 	bl	8004b18 <HAL_ADC_DeInit>

  __HAL_RCC_ADC_CLK_DISABLE();
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <ADC_ReadChannel_Temp+0x58>)
 8002980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002982:	4a05      	ldr	r2, [pc, #20]	; (8002998 <ADC_ReadChannel_Temp+0x58>)
 8002984:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002988:	64d3      	str	r3, [r2, #76]	; 0x4c


  return ADCxConvertedValues;
 800298a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	2000c748 	.word	0x2000c748
 8002998:	40021000 	.word	0x40021000

0800299c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc1);
 80029a4:	4806      	ldr	r0, [pc, #24]	; (80029c0 <HAL_ADC_ConvCpltCallback+0x24>)
 80029a6:	f002 fb87 	bl	80050b8 <HAL_ADC_Stop_DMA>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80029aa:	2100      	movs	r1, #0
 80029ac:	4805      	ldr	r0, [pc, #20]	; (80029c4 <HAL_ADC_ConvCpltCallback+0x28>)
 80029ae:	f006 fc13 	bl	80091d8 <HAL_TIM_PWM_Stop>
	adcConversionFlag = 1;
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_DeInit(&hadc1);
}
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	2000c748 	.word	0x2000c748
 80029c4:	200108a0 	.word	0x200108a0
 80029c8:	20000400 	.word	0x20000400

080029cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029d0:	f001 fcb1 	bl	8004336 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
   SystemClock_Config();
 80029d4:	f000 f81a 	bl	8002a0c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
   Gpio_PreInit();
 80029d8:	f001 fa42 	bl	8003e60 <Gpio_PreInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

   MX_GPIO_Init();
 80029dc:	f000 fa86 	bl	8002eec <MX_GPIO_Init>
   MX_LPUART1_UART_Init();
 80029e0:	f000 f8d0 	bl	8002b84 <MX_LPUART1_UART_Init>
   MX_DMA_Init();
 80029e4:	f000 fa64 	bl	8002eb0 <MX_DMA_Init>
   MX_TIM1_Init();
 80029e8:	f000 f9b8 	bl	8002d5c <MX_TIM1_Init>
   MX_USART1_UART_Init();
 80029ec:	f000 f8f6 	bl	8002bdc <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
   RetargetInit(&huart1);
 80029f0:	4805      	ldr	r0, [pc, #20]	; (8002a08 <main+0x3c>)
 80029f2:	f000 fb51 	bl	8003098 <RetargetInit>
   MX_Master_Init();
 80029f6:	f7fe faab 	bl	8000f50 <MX_Master_Init>
   HAL_Delay(1000); // This delay is necessary to give enough room for the AT_Slave to finish its initialization.
 80029fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029fe:	f001 fac3 	bl	8003f88 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MX_Master_Process();
 8002a02:	f7fe faad 	bl	8000f60 <MX_Master_Process>
 8002a06:	e7fc      	b.n	8002a02 <main+0x36>
 8002a08:	2000c7b0 	.word	0x2000c7b0

08002a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b096      	sub	sp, #88	; 0x58
 8002a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a12:	f107 0314 	add.w	r3, r7, #20
 8002a16:	2244      	movs	r2, #68	; 0x44
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f00a f942 	bl	800cca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a20:	463b      	mov	r3, r7
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]
 8002a2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002a2e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002a32:	f004 f923 	bl	8006c7c <HAL_PWREx_ControlVoltageScaling>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002a3c:	f000 fb26 	bl	800308c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI|RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002a40:	231a      	movs	r3, #26
 8002a42:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a48:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a4a:	2340      	movs	r3, #64	; 0x40
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002a52:	2301      	movs	r3, #1
 8002a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002a5a:	2360      	movs	r3, #96	; 0x60
 8002a5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a62:	f107 0314 	add.w	r3, r7, #20
 8002a66:	4618      	mov	r0, r3
 8002a68:	f004 f9fc 	bl	8006e64 <HAL_RCC_OscConfig>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002a72:	f000 fb0b 	bl	800308c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a76:	230f      	movs	r3, #15
 8002a78:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI; //msi
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a8a:	463b      	mov	r3, r7
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f004 fdfa 	bl	8007688 <HAL_RCC_ClockConfig>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002a9a:	f000 faf7 	bl	800308c <Error_Handler>
  }
}
 8002a9e:	bf00      	nop
 8002aa0:	3758      	adds	r7, #88	; 0x58
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002aae:	463b      	mov	r3, r7
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]
 8002abc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002abe:	4b2e      	ldr	r3, [pc, #184]	; (8002b78 <MX_ADC1_Init+0xd0>)
 8002ac0:	4a2e      	ldr	r2, [pc, #184]	; (8002b7c <MX_ADC1_Init+0xd4>)
 8002ac2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002ac4:	4b2c      	ldr	r3, [pc, #176]	; (8002b78 <MX_ADC1_Init+0xd0>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002aca:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <MX_ADC1_Init+0xd0>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ad0:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <MX_ADC1_Init+0xd0>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002ad6:	4b28      	ldr	r3, [pc, #160]	; (8002b78 <MX_ADC1_Init+0xd0>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002adc:	4b26      	ldr	r3, [pc, #152]	; (8002b78 <MX_ADC1_Init+0xd0>)
 8002ade:	2204      	movs	r2, #4
 8002ae0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002ae2:	4b25      	ldr	r3, [pc, #148]	; (8002b78 <MX_ADC1_Init+0xd0>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002ae8:	4b23      	ldr	r3, [pc, #140]	; (8002b78 <MX_ADC1_Init+0xd0>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002aee:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <MX_ADC1_Init+0xd0>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002af4:	4b20      	ldr	r3, [pc, #128]	; (8002b78 <MX_ADC1_Init+0xd0>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8002afc:	4b1e      	ldr	r3, [pc, #120]	; (8002b78 <MX_ADC1_Init+0xd0>)
 8002afe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002b02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002b04:	4b1c      	ldr	r3, [pc, #112]	; (8002b78 <MX_ADC1_Init+0xd0>)
 8002b06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002b0c:	4b1a      	ldr	r3, [pc, #104]	; (8002b78 <MX_ADC1_Init+0xd0>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002b14:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <MX_ADC1_Init+0xd0>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002b1a:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <MX_ADC1_Init+0xd0>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b22:	4815      	ldr	r0, [pc, #84]	; (8002b78 <MX_ADC1_Init+0xd0>)
 8002b24:	f001 feac 	bl	8004880 <HAL_ADC_Init>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002b2e:	f000 faad 	bl	800308c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002b32:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <MX_ADC1_Init+0xd8>)
 8002b34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b36:	2306      	movs	r3, #6
 8002b38:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002b3e:	237f      	movs	r3, #127	; 0x7f
 8002b40:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002b42:	2304      	movs	r3, #4
 8002b44:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b4a:	463b      	mov	r3, r7
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	480a      	ldr	r0, [pc, #40]	; (8002b78 <MX_ADC1_Init+0xd0>)
 8002b50:	f002 fb34 	bl	80051bc <HAL_ADC_ConfigChannel>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8002b5a:	f000 fa97 	bl	800308c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8002b5e:	217f      	movs	r1, #127	; 0x7f
 8002b60:	4805      	ldr	r0, [pc, #20]	; (8002b78 <MX_ADC1_Init+0xd0>)
 8002b62:	f003 f989 	bl	8005e78 <HAL_ADCEx_Calibration_Start>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_ADC1_Init+0xc8>
  {
			Error_Handler();
 8002b6c:	f000 fa8e 	bl	800308c <Error_Handler>
  }
  /* USER CODE END ADC1_Init 2 */

}
 8002b70:	bf00      	nop
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	2000c748 	.word	0x2000c748
 8002b7c:	50040000 	.word	0x50040000
 8002b80:	2a000400 	.word	0x2a000400

08002b84 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002b88:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <MX_LPUART1_UART_Init+0x50>)
 8002b8a:	4a13      	ldr	r2, [pc, #76]	; (8002bd8 <MX_LPUART1_UART_Init+0x54>)
 8002b8c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <MX_LPUART1_UART_Init+0x50>)
 8002b90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b94:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b96:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <MX_LPUART1_UART_Init+0x50>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002b9c:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <MX_LPUART1_UART_Init+0x50>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002ba2:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <MX_LPUART1_UART_Init+0x50>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <MX_LPUART1_UART_Init+0x50>)
 8002baa:	220c      	movs	r2, #12
 8002bac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bae:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <MX_LPUART1_UART_Init+0x50>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bb4:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <MX_LPUART1_UART_Init+0x50>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <MX_LPUART1_UART_Init+0x50>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002bc0:	4804      	ldr	r0, [pc, #16]	; (8002bd4 <MX_LPUART1_UART_Init+0x50>)
 8002bc2:	f007 fa01 	bl	8009fc8 <HAL_UART_Init>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002bcc:	f000 fa5e 	bl	800308c <Error_Handler>

  /*Enable UART Stop Mode*/
//   HAL_UARTEx_EnableStopMode(&hlpuart1);
  /* USER CODE END LPUART1_Init 2 */

}
 8002bd0:	bf00      	nop
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	2000c6c4 	.word	0x2000c6c4
 8002bd8:	40008000 	.word	0x40008000

08002bdc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002be0:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <MX_USART1_UART_Init+0x58>)
 8002be2:	4a15      	ldr	r2, [pc, #84]	; (8002c38 <MX_USART1_UART_Init+0x5c>)
 8002be4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002be6:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <MX_USART1_UART_Init+0x58>)
 8002be8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bee:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <MX_USART1_UART_Init+0x58>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <MX_USART1_UART_Init+0x58>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bfa:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <MX_USART1_UART_Init+0x58>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <MX_USART1_UART_Init+0x58>)
 8002c02:	220c      	movs	r2, #12
 8002c04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c06:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <MX_USART1_UART_Init+0x58>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c0c:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <MX_USART1_UART_Init+0x58>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <MX_USART1_UART_Init+0x58>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <MX_USART1_UART_Init+0x58>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c1e:	4805      	ldr	r0, [pc, #20]	; (8002c34 <MX_USART1_UART_Init+0x58>)
 8002c20:	f007 f9d2 	bl	8009fc8 <HAL_UART_Init>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002c2a:	f000 fa2f 	bl	800308c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	2000c7b0 	.word	0x2000c7b0
 8002c38:	40013800 	.word	0x40013800

08002c3c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b092      	sub	sp, #72	; 0x48
 8002c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002c42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	605a      	str	r2, [r3, #4]
 8002c4c:	609a      	str	r2, [r3, #8]
 8002c4e:	60da      	str	r2, [r3, #12]
 8002c50:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002c52:	2300      	movs	r3, #0
 8002c54:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8002c56:	1d3b      	adds	r3, r7, #4
 8002c58:	222c      	movs	r2, #44	; 0x2c
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f00a f821 	bl	800cca4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002c62:	4b3c      	ldr	r3, [pc, #240]	; (8002d54 <MX_RTC_Init+0x118>)
 8002c64:	4a3c      	ldr	r2, [pc, #240]	; (8002d58 <MX_RTC_Init+0x11c>)
 8002c66:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002c68:	4b3a      	ldr	r3, [pc, #232]	; (8002d54 <MX_RTC_Init+0x118>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002c6e:	4b39      	ldr	r3, [pc, #228]	; (8002d54 <MX_RTC_Init+0x118>)
 8002c70:	227f      	movs	r2, #127	; 0x7f
 8002c72:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002c74:	4b37      	ldr	r3, [pc, #220]	; (8002d54 <MX_RTC_Init+0x118>)
 8002c76:	22ff      	movs	r2, #255	; 0xff
 8002c78:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002c7a:	4b36      	ldr	r3, [pc, #216]	; (8002d54 <MX_RTC_Init+0x118>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002c80:	4b34      	ldr	r3, [pc, #208]	; (8002d54 <MX_RTC_Init+0x118>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002c86:	4b33      	ldr	r3, [pc, #204]	; (8002d54 <MX_RTC_Init+0x118>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c8c:	4b31      	ldr	r3, [pc, #196]	; (8002d54 <MX_RTC_Init+0x118>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c92:	4830      	ldr	r0, [pc, #192]	; (8002d54 <MX_RTC_Init+0x118>)
 8002c94:	f005 fa7a 	bl	800818c <HAL_RTC_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002c9e:	f000 f9f5 	bl	800308c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002cbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4823      	ldr	r0, [pc, #140]	; (8002d54 <MX_RTC_Init+0x118>)
 8002cc6:	f005 fadc 	bl	8008282 <HAL_RTC_SetTime>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8002cd0:	f000 f9dc 	bl	800308c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x23;
 8002ce6:	2323      	movs	r3, #35	; 0x23
 8002ce8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002cec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4817      	ldr	r0, [pc, #92]	; (8002d54 <MX_RTC_Init+0x118>)
 8002cf6:	f005 fbbd 	bl	8008474 <HAL_RTC_SetDate>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8002d00:	f000 f9c4 	bl	800308c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002d14:	2300      	movs	r3, #0
 8002d16:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002d24:	2300      	movs	r3, #0
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8002d2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002d34:	1d3b      	adds	r3, r7, #4
 8002d36:	2201      	movs	r2, #1
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4806      	ldr	r0, [pc, #24]	; (8002d54 <MX_RTC_Init+0x118>)
 8002d3c:	f005 fc6e 	bl	800861c <HAL_RTC_SetAlarm_IT>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8002d46:	f000 f9a1 	bl	800308c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002d4a:	bf00      	nop
 8002d4c:	3748      	adds	r7, #72	; 0x48
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	2000c87c 	.word	0x2000c87c
 8002d58:	40002800 	.word	0x40002800

08002d5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b09a      	sub	sp, #104	; 0x68
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	605a      	str	r2, [r3, #4]
 8002d6c:	609a      	str	r2, [r3, #8]
 8002d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	60da      	str	r2, [r3, #12]
 8002d8a:	611a      	str	r2, [r3, #16]
 8002d8c:	615a      	str	r2, [r3, #20]
 8002d8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d90:	1d3b      	adds	r3, r7, #4
 8002d92:	222c      	movs	r2, #44	; 0x2c
 8002d94:	2100      	movs	r1, #0
 8002d96:	4618      	mov	r0, r3
 8002d98:	f009 ff84 	bl	800cca4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d9c:	4b42      	ldr	r3, [pc, #264]	; (8002ea8 <MX_TIM1_Init+0x14c>)
 8002d9e:	4a43      	ldr	r2, [pc, #268]	; (8002eac <MX_TIM1_Init+0x150>)
 8002da0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002da2:	4b41      	ldr	r3, [pc, #260]	; (8002ea8 <MX_TIM1_Init+0x14c>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002da8:	4b3f      	ldr	r3, [pc, #252]	; (8002ea8 <MX_TIM1_Init+0x14c>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000-1;
 8002dae:	4b3e      	ldr	r3, [pc, #248]	; (8002ea8 <MX_TIM1_Init+0x14c>)
 8002db0:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002db4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002db6:	4b3c      	ldr	r3, [pc, #240]	; (8002ea8 <MX_TIM1_Init+0x14c>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002dbc:	4b3a      	ldr	r3, [pc, #232]	; (8002ea8 <MX_TIM1_Init+0x14c>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dc2:	4b39      	ldr	r3, [pc, #228]	; (8002ea8 <MX_TIM1_Init+0x14c>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002dc8:	4837      	ldr	r0, [pc, #220]	; (8002ea8 <MX_TIM1_Init+0x14c>)
 8002dca:	f006 f867 	bl	8008e9c <HAL_TIM_Base_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002dd4:	f000 f95a 	bl	800308c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ddc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002dde:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002de2:	4619      	mov	r1, r3
 8002de4:	4830      	ldr	r0, [pc, #192]	; (8002ea8 <MX_TIM1_Init+0x14c>)
 8002de6:	f006 fb93 	bl	8009510 <HAL_TIM_ConfigClockSource>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002df0:	f000 f94c 	bl	800308c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002df4:	482c      	ldr	r0, [pc, #176]	; (8002ea8 <MX_TIM1_Init+0x14c>)
 8002df6:	f006 f8a8 	bl	8008f4a <HAL_TIM_PWM_Init>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002e00:	f000 f944 	bl	800308c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e04:	2320      	movs	r3, #32
 8002e06:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8002e08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e0c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e16:	4619      	mov	r1, r3
 8002e18:	4823      	ldr	r0, [pc, #140]	; (8002ea8 <MX_TIM1_Init+0x14c>)
 8002e1a:	f006 ffef 	bl	8009dfc <HAL_TIMEx_MasterConfigSynchronization>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8002e24:	f000 f932 	bl	800308c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e28:	2360      	movs	r3, #96	; 0x60
 8002e2a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e30:	2300      	movs	r3, #0
 8002e32:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e34:	2300      	movs	r3, #0
 8002e36:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e40:	2300      	movs	r3, #0
 8002e42:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e48:	2200      	movs	r2, #0
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4816      	ldr	r0, [pc, #88]	; (8002ea8 <MX_TIM1_Init+0x14c>)
 8002e4e:	f006 fa4b 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002e58:	f000 f918 	bl	800308c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e8c:	1d3b      	adds	r3, r7, #4
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4805      	ldr	r0, [pc, #20]	; (8002ea8 <MX_TIM1_Init+0x14c>)
 8002e92:	f007 f821 	bl	8009ed8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8002e9c:	f000 f8f6 	bl	800308c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002ea0:	bf00      	nop
 8002ea2:	3768      	adds	r7, #104	; 0x68
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	200108a0 	.word	0x200108a0
 8002eac:	40012c00 	.word	0x40012c00

08002eb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <MX_DMA_Init+0x38>)
 8002eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eba:	4a0b      	ldr	r2, [pc, #44]	; (8002ee8 <MX_DMA_Init+0x38>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6493      	str	r3, [r2, #72]	; 0x48
 8002ec2:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <MX_DMA_Init+0x38>)
 8002ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	607b      	str	r3, [r7, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	200b      	movs	r0, #11
 8002ed4:	f003 f90c 	bl	80060f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002ed8:	200b      	movs	r0, #11
 8002eda:	f003 f925 	bl	8006128 <HAL_NVIC_EnableIRQ>

}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000

08002eec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef2:	f107 030c 	add.w	r3, r7, #12
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	60da      	str	r2, [r3, #12]
 8002f00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f02:	4b2a      	ldr	r3, [pc, #168]	; (8002fac <MX_GPIO_Init+0xc0>)
 8002f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f06:	4a29      	ldr	r2, [pc, #164]	; (8002fac <MX_GPIO_Init+0xc0>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f0e:	4b27      	ldr	r3, [pc, #156]	; (8002fac <MX_GPIO_Init+0xc0>)
 8002f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f1a:	4b24      	ldr	r3, [pc, #144]	; (8002fac <MX_GPIO_Init+0xc0>)
 8002f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1e:	4a23      	ldr	r2, [pc, #140]	; (8002fac <MX_GPIO_Init+0xc0>)
 8002f20:	f043 0302 	orr.w	r3, r3, #2
 8002f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f26:	4b21      	ldr	r3, [pc, #132]	; (8002fac <MX_GPIO_Init+0xc0>)
 8002f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	607b      	str	r3, [r7, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SENSOR_PWR_CNTRL_GPIO_Port, SENSOR_PWR_CNTRL_Pin, GPIO_PIN_RESET);
 8002f32:	2200      	movs	r2, #0
 8002f34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f38:	481d      	ldr	r0, [pc, #116]	; (8002fb0 <MX_GPIO_Init+0xc4>)
 8002f3a:	f003 fe2d 	bl	8006b98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_CNTRL_GPIO_Port, LED_CNTRL_Pin, GPIO_PIN_RESET);
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f48:	f003 fe26 	bl	8006b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VBUS_DETECT_Pin */
  GPIO_InitStruct.Pin = VBUS_DETECT_Pin;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f50:	2300      	movs	r3, #0
 8002f52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(VBUS_DETECT_GPIO_Port, &GPIO_InitStruct);
 8002f58:	f107 030c 	add.w	r3, r7, #12
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f62:	f003 fbc5 	bl	80066f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR_PWR_CNTRL_Pin */
  GPIO_InitStruct.Pin = SENSOR_PWR_CNTRL_Pin;
 8002f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SENSOR_PWR_CNTRL_GPIO_Port, &GPIO_InitStruct);
 8002f78:	f107 030c 	add.w	r3, r7, #12
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	480c      	ldr	r0, [pc, #48]	; (8002fb0 <MX_GPIO_Init+0xc4>)
 8002f80:	f003 fbb6 	bl	80066f0 <HAL_GPIO_Init>

  /*Configure GPIO pins :  LED_CNTRL_Pin */
  GPIO_InitStruct.Pin = LED_CNTRL_Pin;
 8002f84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_CNTRL_GPIO_Port, &GPIO_InitStruct);
 8002f96:	f107 030c 	add.w	r3, r7, #12
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fa0:	f003 fba6 	bl	80066f0 <HAL_GPIO_Init>

}
 8002fa4:	bf00      	nop
 8002fa6:	3720      	adds	r7, #32
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	48000400 	.word	0x48000400

08002fb4 <MX_ADC1_Init_Temp>:

/* USER CODE BEGIN 4 */
void MX_ADC1_Init_Temp(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8002fba:	463b      	mov	r3, r7
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	611a      	str	r2, [r3, #16]
 8002fc8:	615a      	str	r2, [r3, #20]
	  /* USER CODE BEGIN ADC1_Init 1 */

	  /* USER CODE END ADC1_Init 1 */
	  /** Common config
	  */
	  hadc1.Instance = ADC1;
 8002fca:	4b2d      	ldr	r3, [pc, #180]	; (8003080 <MX_ADC1_Init_Temp+0xcc>)
 8002fcc:	4a2d      	ldr	r2, [pc, #180]	; (8003084 <MX_ADC1_Init_Temp+0xd0>)
 8002fce:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002fd0:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <MX_ADC1_Init_Temp+0xcc>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002fd6:	4b2a      	ldr	r3, [pc, #168]	; (8003080 <MX_ADC1_Init_Temp+0xcc>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	609a      	str	r2, [r3, #8]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fdc:	4b28      	ldr	r3, [pc, #160]	; (8003080 <MX_ADC1_Init_Temp+0xcc>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	60da      	str	r2, [r3, #12]
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002fe2:	4b27      	ldr	r3, [pc, #156]	; (8003080 <MX_ADC1_Init_Temp+0xcc>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	611a      	str	r2, [r3, #16]
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002fe8:	4b25      	ldr	r3, [pc, #148]	; (8003080 <MX_ADC1_Init_Temp+0xcc>)
 8002fea:	2204      	movs	r2, #4
 8002fec:	615a      	str	r2, [r3, #20]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002fee:	4b24      	ldr	r3, [pc, #144]	; (8003080 <MX_ADC1_Init_Temp+0xcc>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 8002ff4:	4b22      	ldr	r3, [pc, #136]	; (8003080 <MX_ADC1_Init_Temp+0xcc>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	765a      	strb	r2, [r3, #25]
	  hadc1.Init.NbrOfConversion = 1;
 8002ffa:	4b21      	ldr	r3, [pc, #132]	; (8003080 <MX_ADC1_Init_Temp+0xcc>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003000:	4b1f      	ldr	r3, [pc, #124]	; (8003080 <MX_ADC1_Init_Temp+0xcc>)
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <MX_ADC1_Init_Temp+0xcc>)
 800300a:	2200      	movs	r2, #0
 800300c:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800300e:	4b1c      	ldr	r3, [pc, #112]	; (8003080 <MX_ADC1_Init_Temp+0xcc>)
 8003010:	2200      	movs	r2, #0
 8003012:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003014:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <MX_ADC1_Init_Temp+0xcc>)
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800301c:	4b18      	ldr	r3, [pc, #96]	; (8003080 <MX_ADC1_Init_Temp+0xcc>)
 800301e:	2200      	movs	r2, #0
 8003020:	635a      	str	r2, [r3, #52]	; 0x34
	  hadc1.Init.OversamplingMode = DISABLE;
 8003022:	4b17      	ldr	r3, [pc, #92]	; (8003080 <MX_ADC1_Init_Temp+0xcc>)
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800302a:	4815      	ldr	r0, [pc, #84]	; (8003080 <MX_ADC1_Init_Temp+0xcc>)
 800302c:	f001 fc28 	bl	8004880 <HAL_ADC_Init>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <MX_ADC1_Init_Temp+0x86>
	  {
	    Error_Handler();
 8003036:	f000 f829 	bl	800308c <Error_Handler>
	  sConfig.Rank = ADC_RANK_NONE;
	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);*/

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_11;
 800303a:	4b13      	ldr	r3, [pc, #76]	; (8003088 <MX_ADC1_Init_Temp+0xd4>)
 800303c:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800303e:	2306      	movs	r3, #6
 8003040:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8003042:	2306      	movs	r3, #6
 8003044:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003046:	237f      	movs	r3, #127	; 0x7f
 8003048:	60fb      	str	r3, [r7, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800304a:	2304      	movs	r3, #4
 800304c:	613b      	str	r3, [r7, #16]
	  sConfig.Offset = 0;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003052:	463b      	mov	r3, r7
 8003054:	4619      	mov	r1, r3
 8003056:	480a      	ldr	r0, [pc, #40]	; (8003080 <MX_ADC1_Init_Temp+0xcc>)
 8003058:	f002 f8b0 	bl	80051bc <HAL_ADC_ConfigChannel>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <MX_ADC1_Init_Temp+0xb2>
	  {
	    Error_Handler();
 8003062:	f000 f813 	bl	800308c <Error_Handler>
	  }
	  /* USER CODE BEGIN ADC1_Init 2 */
	  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8003066:	217f      	movs	r1, #127	; 0x7f
 8003068:	4805      	ldr	r0, [pc, #20]	; (8003080 <MX_ADC1_Init_Temp+0xcc>)
 800306a:	f002 ff05 	bl	8005e78 <HAL_ADCEx_Calibration_Start>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <MX_ADC1_Init_Temp+0xc4>
	  {
		  Error_Handler();
 8003074:	f000 f80a 	bl	800308c <Error_Handler>
	  }
	  /* USER CODE END ADC1_Init 2 */

}
 8003078:	bf00      	nop
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	2000c748 	.word	0x2000c748
 8003084:	50040000 	.word	0x50040000
 8003088:	2e300800 	.word	0x2e300800

0800308c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003090:	b672      	cpsid	i
}
 8003092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003094:	e7fe      	b.n	8003094 <Error_Handler+0x8>
	...

08003098 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80030a0:	4a07      	ldr	r2, [pc, #28]	; (80030c0 <RetargetInit+0x28>)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80030a6:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <RetargetInit+0x2c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6898      	ldr	r0, [r3, #8]
 80030ac:	2300      	movs	r3, #0
 80030ae:	2202      	movs	r2, #2
 80030b0:	2100      	movs	r1, #0
 80030b2:	f00a fa69 	bl	800d588 <setvbuf>
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	200128f4 	.word	0x200128f4
 80030c4:	20000124 	.word	0x20000124

080030c8 <_isatty>:

int _isatty(int fd) {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	db04      	blt.n	80030e0 <_isatty+0x18>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b02      	cmp	r3, #2
 80030da:	dc01      	bgt.n	80030e0 <_isatty+0x18>
    return 1;
 80030dc:	2301      	movs	r3, #1
 80030de:	e005      	b.n	80030ec <_isatty+0x24>

  errno = EBADF;
 80030e0:	f009 fdb6 	bl	800cc50 <__errno>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2209      	movs	r2, #9
 80030e8:	601a      	str	r2, [r3, #0]
  return 0;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <_write>:

int _write(int fd, char* ptr, int len) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d002      	beq.n	800310c <_write+0x18>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d111      	bne.n	8003130 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800310c:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <_write+0x54>)
 800310e:	6818      	ldr	r0, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	b29a      	uxth	r2, r3
 8003114:	f04f 33ff 	mov.w	r3, #4294967295
 8003118:	68b9      	ldr	r1, [r7, #8]
 800311a:	f006 ffa3 	bl	800a064 <HAL_UART_Transmit>
 800311e:	4603      	mov	r3, r0
 8003120:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003122:	7dfb      	ldrb	r3, [r7, #23]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <_write+0x38>
      return len;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	e008      	b.n	800313e <_write+0x4a>
    else
      return EIO;
 800312c:	2305      	movs	r3, #5
 800312e:	e006      	b.n	800313e <_write+0x4a>
  }
  errno = EBADF;
 8003130:	f009 fd8e 	bl	800cc50 <__errno>
 8003134:	4603      	mov	r3, r0
 8003136:	2209      	movs	r2, #9
 8003138:	601a      	str	r2, [r3, #0]
  return -1;
 800313a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	200128f4 	.word	0x200128f4

0800314c <_close>:

int _close(int fd) {
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	db04      	blt.n	8003164 <_close+0x18>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b02      	cmp	r3, #2
 800315e:	dc01      	bgt.n	8003164 <_close+0x18>
    return 0;
 8003160:	2300      	movs	r3, #0
 8003162:	e006      	b.n	8003172 <_close+0x26>

  errno = EBADF;
 8003164:	f009 fd74 	bl	800cc50 <__errno>
 8003168:	4603      	mov	r3, r0
 800316a:	2209      	movs	r2, #9
 800316c:	601a      	str	r2, [r3, #0]
  return -1;
 800316e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800317a:	b580      	push	{r7, lr}
 800317c:	b084      	sub	sp, #16
 800317e:	af00      	add	r7, sp, #0
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8003186:	f009 fd63 	bl	800cc50 <__errno>
 800318a:	4603      	mov	r3, r0
 800318c:	2209      	movs	r2, #9
 800318e:	601a      	str	r2, [r3, #0]
  return -1;
 8003190:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <_read>:

int _read(int fd, char* ptr, int len) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d110      	bne.n	80031d0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80031ae:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <_read+0x4c>)
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	f04f 33ff 	mov.w	r3, #4294967295
 80031b6:	2201      	movs	r2, #1
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	f006 ffe7 	bl	800a18c <HAL_UART_Receive>
 80031be:	4603      	mov	r3, r0
 80031c0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80031c2:	7dfb      	ldrb	r3, [r7, #23]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <_read+0x30>
      return 1;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e008      	b.n	80031de <_read+0x42>
    else
      return EIO;
 80031cc:	2305      	movs	r3, #5
 80031ce:	e006      	b.n	80031de <_read+0x42>
  }
  errno = EBADF;
 80031d0:	f009 fd3e 	bl	800cc50 <__errno>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2209      	movs	r2, #9
 80031d8:	601a      	str	r2, [r3, #0]
  return -1;
 80031da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	200128f4 	.word	0x200128f4

080031ec <_fstat>:

int _fstat(int fd, struct stat* st) {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	db08      	blt.n	800320e <_fstat+0x22>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	dc05      	bgt.n	800320e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003208:	605a      	str	r2, [r3, #4]
    return 0;
 800320a:	2300      	movs	r3, #0
 800320c:	e005      	b.n	800321a <_fstat+0x2e>
  }

  errno = EBADF;
 800320e:	f009 fd1f 	bl	800cc50 <__errno>
 8003212:	4603      	mov	r3, r0
 8003214:	2209      	movs	r2, #9
 8003216:	601a      	str	r2, [r3, #0]
  return 0;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322e:	b29b      	uxth	r3, r3
}
 8003230:	4618      	mov	r0, r3
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <RTC_IF_Init>:
/* USER CODE BEGIN Exported_Functions */

/* USER CODE END Exported_Functions */

UTIL_TIMER_Status_t RTC_IF_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b09a      	sub	sp, #104	; 0x68
 8003240:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  if (RTC_Initalized == false)
 8003242:	4b14      	ldr	r3, [pc, #80]	; (8003294 <RTC_IF_Init+0x58>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	f083 0301 	eor.w	r3, r3, #1
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d01c      	beq.n	800328a <RTC_IF_Init+0x4e>
    RTC_IF_DBG_PRINTF("RTC_init\n\r");

    /* ##-1- Configure the RTC clock source ###################################### */

    /* Select LSE as RTC clock source */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003250:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003254:	603b      	str	r3, [r7, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003256:	f44f 7300 	mov.w	r3, #512	; 0x200
 800325a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800325c:	463b      	mov	r3, r7
 800325e:	4618      	mov	r0, r3
 8003260:	f004 fc36 	bl	8007ad0 <HAL_RCCEx_PeriphCLKConfig>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d000      	beq.n	800326c <RTC_IF_Init+0x30>
    {
      /* Initialization Error */
      while (1);
 800326a:	e7fe      	b.n	800326a <RTC_IF_Init+0x2e>
    }

    MX_RTC_Init();
 800326c:	f7ff fce6 	bl	8002c3c <MX_RTC_Init>

    /** Configure the Alarm A */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003270:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003274:	4808      	ldr	r0, [pc, #32]	; (8003298 <RTC_IF_Init+0x5c>)
 8003276:	f005 fb0d 	bl	8008894 <HAL_RTC_DeactivateAlarm>
    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800327a:	4807      	ldr	r0, [pc, #28]	; (8003298 <RTC_IF_Init+0x5c>)
 800327c:	f005 fdce 	bl	8008e1c <HAL_RTCEx_EnableBypassShadow>

    RTC_IF_SetTimerContext();
 8003280:	f000 f852 	bl	8003328 <RTC_IF_SetTimerContext>

    RTC_Initalized = true;
 8003284:	4b03      	ldr	r3, [pc, #12]	; (8003294 <RTC_IF_Init+0x58>)
 8003286:	2201      	movs	r2, #1
 8003288:	701a      	strb	r2, [r3, #0]
  }
  return UTIL_TIMER_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3768      	adds	r7, #104	; 0x68
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	20000401 	.word	0x20000401
 8003298:	2000c87c 	.word	0x2000c87c

0800329c <RTC_IF_StartTimer>:

UTIL_TIMER_Status_t RTC_IF_StartTimer(uint32_t timeout)
{
 800329c:	b590      	push	{r4, r7, lr}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 80032a4:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <RTC_IF_StartTimer+0x5c>)
 80032a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032aa:	3303      	adds	r3, #3
 80032ac:	461c      	mov	r4, r3
 80032ae:	f000 f85b 	bl	8003368 <RTC_IF_GetTimerElapsedTime>
 80032b2:	4602      	mov	r2, r0
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	429c      	cmp	r4, r3
 80032ba:	d204      	bcs.n	80032c6 <RTC_IF_StartTimer+0x2a>
  {
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 80032bc:	2100      	movs	r1, #0
 80032be:	2002      	movs	r0, #2
 80032c0:	f007 feea 	bl	800b098 <UTIL_LPM_SetStopMode>
 80032c4:	e003      	b.n	80032ce <RTC_IF_StartTimer+0x32>
  }
  else
  {
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 80032c6:	2101      	movs	r1, #1
 80032c8:	2002      	movs	r0, #2
 80032ca:	f007 fee5 	bl	800b098 <UTIL_LPM_SetStopMode>
  }

  /*In case stop mode is required */
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 80032ce:	f007 ff43 	bl	800b158 <UTIL_LPM_GetMode>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d106      	bne.n	80032e6 <RTC_IF_StartTimer+0x4a>
  {
    timeout = timeout -  McuWakeUpTimeCal;
 80032d8:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <RTC_IF_StartTimer+0x5c>)
 80032da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032de:	461a      	mov	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	607b      	str	r3, [r7, #4]
  }

  RTC_StartWakeUpAlarm(timeout);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f8f2 	bl	80034d0 <RTC_StartWakeUpAlarm>
  return UTIL_TIMER_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd90      	pop	{r4, r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000402 	.word	0x20000402

080032fc <RTC_IF_StopTimer>:

UTIL_TIMER_Status_t RTC_IF_StopTimer(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8003300:	4b08      	ldr	r3, [pc, #32]	; (8003324 <RTC_IF_StopTimer+0x28>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	b2da      	uxtb	r2, r3
 8003308:	4b06      	ldr	r3, [pc, #24]	; (8003324 <RTC_IF_StopTimer+0x28>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003310:	60da      	str	r2, [r3, #12]
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003316:	4803      	ldr	r0, [pc, #12]	; (8003324 <RTC_IF_StopTimer+0x28>)
 8003318:	f005 fabc 	bl	8008894 <HAL_RTC_DeactivateAlarm>
  return UTIL_TIMER_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	2000c87c 	.word	0x2000c87c

08003328 <RTC_IF_SetTimerContext>:

uint32_t RTC_IF_SetTimerContext(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 800332c:	4905      	ldr	r1, [pc, #20]	; (8003344 <RTC_IF_SetTimerContext+0x1c>)
 800332e:	4806      	ldr	r0, [pc, #24]	; (8003348 <RTC_IF_SetTimerContext+0x20>)
 8003330:	f000 f9c6 	bl	80036c0 <RTC_GetCalendarValue>
 8003334:	4603      	mov	r3, r0
 8003336:	4a05      	ldr	r2, [pc, #20]	; (800334c <RTC_IF_SetTimerContext+0x24>)
 8003338:	6013      	str	r3, [r2, #0]
  RTC_IF_DBG_PRINTF("RTC_IF_SetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 800333a:	4b04      	ldr	r3, [pc, #16]	; (800334c <RTC_IF_SetTimerContext+0x24>)
 800333c:	681b      	ldr	r3, [r3, #0]
}
 800333e:	4618      	mov	r0, r3
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000434 	.word	0x20000434
 8003348:	20000448 	.word	0x20000448
 800334c:	20000430 	.word	0x20000430

08003350 <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8003354:	4b03      	ldr	r3, [pc, #12]	; (8003364 <RTC_IF_GetTimerContext+0x14>)
 8003356:	681b      	ldr	r3, [r3, #0]
}
 8003358:	4618      	mov	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	20000430 	.word	0x20000430

08003368 <RTC_IF_GetTimerElapsedTime>:

uint32_t RTC_IF_GetTimerElapsedTime(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800336e:	f107 0208 	add.w	r2, r7, #8
 8003372:	1d3b      	adds	r3, r7, #4
 8003374:	4611      	mov	r1, r2
 8003376:	4618      	mov	r0, r3
 8003378:	f000 f9a2 	bl	80036c0 <RTC_GetCalendarValue>
 800337c:	61f8      	str	r0, [r7, #28]

  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 800337e:	4b04      	ldr	r3, [pc, #16]	; (8003390 <RTC_IF_GetTimerElapsedTime+0x28>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69fa      	ldr	r2, [r7, #28]
 8003384:	1ad3      	subs	r3, r2, r3
}
 8003386:	4618      	mov	r0, r3
 8003388:	3720      	adds	r7, #32
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000430 	.word	0x20000430

08003394 <RTC_IF_GetTimerValue>:

uint32_t RTC_IF_GetTimerValue(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af00      	add	r7, sp, #0
  uint32_t CalendarValue = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  if (RTC_Initalized == true)
 800339e:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <RTC_IF_GetTimerValue+0x2c>)
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <RTC_IF_GetTimerValue+0x22>
  {
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80033a6:	f107 0208 	add.w	r2, r7, #8
 80033aa:	1d3b      	adds	r3, r7, #4
 80033ac:	4611      	mov	r1, r2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 f986 	bl	80036c0 <RTC_GetCalendarValue>
 80033b4:	61f8      	str	r0, [r7, #28]
  }
  return CalendarValue;
 80033b6:	69fb      	ldr	r3, [r7, #28]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3720      	adds	r7, #32
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	20000401 	.word	0x20000401

080033c4 <RTC_IF_GetMinimumTimeout>:

uint32_t RTC_IF_GetMinimumTimeout(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  return (MIN_ALARM_DELAY);
 80033c8:	2303      	movs	r3, #3
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	461a      	mov	r2, r3
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	f04f 0000 	mov.w	r0, #0
 80033e8:	f04f 0100 	mov.w	r1, #0
 80033ec:	01d9      	lsls	r1, r3, #7
 80033ee:	ea41 6152 	orr.w	r1, r1, r2, lsr #25
 80033f2:	01d0      	lsls	r0, r2, #7
 80033f4:	f04f 027d 	mov.w	r2, #125	; 0x7d
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	f7fd fc2c 	bl	8000c58 <__aeabi_uldivmod>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4613      	mov	r3, r2
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 800340e:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4618      	mov	r0, r3
 800341c:	f04f 0100 	mov.w	r1, #0
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	f04f 0800 	mov.w	r8, #0
 8003428:	f04f 0900 	mov.w	r9, #0
 800342c:	ea4f 1943 	mov.w	r9, r3, lsl #5
 8003430:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
 8003434:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8003438:	4642      	mov	r2, r8
 800343a:	464b      	mov	r3, r9
 800343c:	1a12      	subs	r2, r2, r0
 800343e:	eb63 0301 	sbc.w	r3, r3, r1
 8003442:	f04f 0800 	mov.w	r8, #0
 8003446:	f04f 0900 	mov.w	r9, #0
 800344a:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800344e:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
 8003452:	ea4f 0882 	mov.w	r8, r2, lsl #2
 8003456:	4642      	mov	r2, r8
 8003458:	464b      	mov	r3, r9
 800345a:	1814      	adds	r4, r2, r0
 800345c:	eb43 0501 	adc.w	r5, r3, r1
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	09e2      	lsrs	r2, r4, #7
 800346a:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 800346e:	09eb      	lsrs	r3, r5, #7
 8003470:	4613      	mov	r3, r2
}
 8003472:	4618      	mov	r0, r3
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800347c:	4770      	bx	lr

0800347e <RTC_IF_DelayMs>:

void RTC_IF_DelayMs(uint32_t delay)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  uint32_t delayValue = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	60bb      	str	r3, [r7, #8]

  delayValue = RTC_IF_Convert_ms2Tick(delay);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff ffa0 	bl	80033d4 <RTC_IF_Convert_ms2Tick>
 8003494:	60f8      	str	r0, [r7, #12]

  /* Wait delay ms */
  timeout = RTC_IF_GetTimerValue();
 8003496:	f7ff ff7d 	bl	8003394 <RTC_IF_GetTimerValue>
 800349a:	60b8      	str	r0, [r7, #8]
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 800349c:	e000      	b.n	80034a0 <RTC_IF_DelayMs+0x22>
  {
    __NOP();
 800349e:	bf00      	nop
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 80034a0:	f7ff ff78 	bl	8003394 <RTC_IF_GetTimerValue>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d8f6      	bhi.n	800349e <RTC_IF_DelayMs+0x20>
  }
}
 80034b0:	bf00      	nop
 80034b2:	bf00      	nop
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  RtcHandle: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *RtcHandle)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_IRQ_Handler();
 80034c2:	f008 fd31 	bl	800bf28 <UTIL_TIMER_IRQ_Handler>
}
 80034c6:	bf00      	nop
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void RTC_StartWakeUpAlarm(uint32_t timeoutValue)
{
 80034d0:	b5b0      	push	{r4, r5, r7, lr}
 80034d2:	b08c      	sub	sp, #48	; 0x30
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t rtcAlarmSeconds = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint16_t rtcAlarmMinutes = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t rtcAlarmHours = 0;
 80034e4:	2300      	movs	r3, #0
 80034e6:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t rtcAlarmDays = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	84fb      	strh	r3, [r7, #38]	; 0x26
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 80034ec:	4b6e      	ldr	r3, [pc, #440]	; (80036a8 <RTC_StartWakeUpAlarm+0x1d8>)
 80034ee:	f107 0410 	add.w	r4, r7, #16
 80034f2:	1d1d      	adds	r5, r3, #4
 80034f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034f8:	682b      	ldr	r3, [r5, #0]
 80034fa:	6023      	str	r3, [r4, #0]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 80034fc:	4b6a      	ldr	r3, [pc, #424]	; (80036a8 <RTC_StartWakeUpAlarm+0x1d8>)
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	60fb      	str	r3, [r7, #12]

  RTC_IF_StopTimer();
 8003502:	f7ff fefb 	bl	80032fc <RTC_IF_StopTimer>


  /*reverse counter */
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	b29b      	uxth	r3, r3
 800350a:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 800350e:	3303      	adds	r3, #3
 8003510:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	b29b      	uxth	r3, r3
 8003516:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800351a:	b29a      	uxth	r2, r3
 800351c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800351e:	4413      	add	r3, r2
 8003520:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* convert timeout  to seconds */
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	0a9b      	lsrs	r3, r3, #10
 8003526:	607b      	str	r3, [r7, #4]

  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 8003528:	7bbb      	ldrb	r3, [r7, #14]
 800352a:	84fb      	strh	r3, [r7, #38]	; 0x26
  while (timeoutValue >= SECONDS_IN_1DAY)
 800352c:	e008      	b.n	8003540 <RTC_StartWakeUpAlarm+0x70>
  {
    timeoutValue -= SECONDS_IN_1DAY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 8003534:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003538:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 800353a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800353c:	3301      	adds	r3, #1
 800353e:	84fb      	strh	r3, [r7, #38]	; 0x26
  while (timeoutValue >= SECONDS_IN_1DAY)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a5a      	ldr	r2, [pc, #360]	; (80036ac <RTC_StartWakeUpAlarm+0x1dc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d8f2      	bhi.n	800352e <RTC_StartWakeUpAlarm+0x5e>
  }

  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8003548:	7c3b      	ldrb	r3, [r7, #16]
 800354a:	853b      	strh	r3, [r7, #40]	; 0x28
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800354c:	e006      	b.n	800355c <RTC_StartWakeUpAlarm+0x8c>
  {
    timeoutValue -= SECONDS_IN_1HOUR;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8003554:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 8003556:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003558:	3301      	adds	r3, #1
 800355a:	853b      	strh	r3, [r7, #40]	; 0x28
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8003562:	d2f4      	bcs.n	800354e <RTC_StartWakeUpAlarm+0x7e>
  }

  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8003564:	7c7b      	ldrb	r3, [r7, #17]
 8003566:	857b      	strh	r3, [r7, #42]	; 0x2a
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8003568:	e005      	b.n	8003576 <RTC_StartWakeUpAlarm+0xa6>
  {
    timeoutValue -= SECONDS_IN_1MINUTE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3b3c      	subs	r3, #60	; 0x3c
 800356e:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 8003570:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003572:	3301      	adds	r3, #1
 8003574:	857b      	strh	r3, [r7, #42]	; 0x2a
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b3b      	cmp	r3, #59	; 0x3b
 800357a:	d8f6      	bhi.n	800356a <RTC_StartWakeUpAlarm+0x9a>
  }

  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 800357c:	7cbb      	ldrb	r3, [r7, #18]
 800357e:	b29a      	uxth	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	b29b      	uxth	r3, r3
 8003584:	4413      	add	r3, r2
 8003586:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8003588:	e006      	b.n	8003598 <RTC_StartWakeUpAlarm+0xc8>
  {
    rtcAlarmSubSeconds -= (RTC_PREDIV_S + 1);
 800358a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800358c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003590:	85fb      	strh	r3, [r7, #46]	; 0x2e
    rtcAlarmSeconds++;
 8003592:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003594:	3301      	adds	r3, #1
 8003596:	85bb      	strh	r3, [r7, #44]	; 0x2c
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8003598:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800359a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359e:	d2f4      	bcs.n	800358a <RTC_StartWakeUpAlarm+0xba>
  }

  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 80035a0:	e005      	b.n	80035ae <RTC_StartWakeUpAlarm+0xde>
  {
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 80035a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80035a4:	3b3c      	subs	r3, #60	; 0x3c
 80035a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    rtcAlarmMinutes++;
 80035a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035aa:	3301      	adds	r3, #1
 80035ac:	857b      	strh	r3, [r7, #42]	; 0x2a
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 80035ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80035b0:	2b3b      	cmp	r3, #59	; 0x3b
 80035b2:	d8f6      	bhi.n	80035a2 <RTC_StartWakeUpAlarm+0xd2>
  }

  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 80035b4:	e005      	b.n	80035c2 <RTC_StartWakeUpAlarm+0xf2>
  {
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 80035b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035b8:	3b3c      	subs	r3, #60	; 0x3c
 80035ba:	857b      	strh	r3, [r7, #42]	; 0x2a
    rtcAlarmHours++;
 80035bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80035be:	3301      	adds	r3, #1
 80035c0:	853b      	strh	r3, [r7, #40]	; 0x28
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 80035c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035c4:	2b3b      	cmp	r3, #59	; 0x3b
 80035c6:	d8f6      	bhi.n	80035b6 <RTC_StartWakeUpAlarm+0xe6>
  }

  while (rtcAlarmHours >= HOURS_IN_1DAY)
 80035c8:	e005      	b.n	80035d6 <RTC_StartWakeUpAlarm+0x106>
  {
    rtcAlarmHours -= HOURS_IN_1DAY;
 80035ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80035cc:	3b18      	subs	r3, #24
 80035ce:	853b      	strh	r3, [r7, #40]	; 0x28
    rtcAlarmDays++;
 80035d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80035d2:	3301      	adds	r3, #1
 80035d4:	84fb      	strh	r3, [r7, #38]	; 0x26
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 80035d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80035d8:	2b17      	cmp	r3, #23
 80035da:	d8f6      	bhi.n	80035ca <RTC_StartWakeUpAlarm+0xfa>
  }

  if (RTC_DateStruct.Year % 4 == 0)
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d113      	bne.n	8003610 <RTC_StartWakeUpAlarm+0x140>
  {
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 80035e8:	7b7b      	ldrb	r3, [r7, #13]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	4a30      	ldr	r2, [pc, #192]	; (80036b0 <RTC_StartWakeUpAlarm+0x1e0>)
 80035ee:	5cd3      	ldrb	r3, [r2, r3]
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d91e      	bls.n	8003636 <RTC_StartWakeUpAlarm+0x166>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 80035f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80035fa:	7b7a      	ldrb	r2, [r7, #13]
 80035fc:	3a01      	subs	r2, #1
 80035fe:	492c      	ldr	r1, [pc, #176]	; (80036b0 <RTC_StartWakeUpAlarm+0x1e0>)
 8003600:	5c8a      	ldrb	r2, [r1, r2]
 8003602:	fb93 f1f2 	sdiv	r1, r3, r2
 8003606:	fb02 f201 	mul.w	r2, r2, r1
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800360e:	e012      	b.n	8003636 <RTC_StartWakeUpAlarm+0x166>
    }
  }
  else
  {
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8003610:	7b7b      	ldrb	r3, [r7, #13]
 8003612:	3b01      	subs	r3, #1
 8003614:	4a27      	ldr	r2, [pc, #156]	; (80036b4 <RTC_StartWakeUpAlarm+0x1e4>)
 8003616:	5cd3      	ldrb	r3, [r2, r3]
 8003618:	b29b      	uxth	r3, r3
 800361a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800361c:	429a      	cmp	r2, r3
 800361e:	d90a      	bls.n	8003636 <RTC_StartWakeUpAlarm+0x166>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8003620:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003622:	7b7a      	ldrb	r2, [r7, #13]
 8003624:	3a01      	subs	r2, #1
 8003626:	4923      	ldr	r1, [pc, #140]	; (80036b4 <RTC_StartWakeUpAlarm+0x1e4>)
 8003628:	5c8a      	ldrb	r2, [r1, r2]
 800362a:	fb93 f1f2 	sdiv	r1, r3, r2
 800362e:	fb02 f201 	mul.w	r2, r2, r1
 8003632:	1a9b      	subs	r3, r3, r2
 8003634:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8003636:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003638:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 800363c:	3303      	adds	r3, #3
 800363e:	461a      	mov	r2, r3
 8003640:	4b1d      	ldr	r3, [pc, #116]	; (80036b8 <RTC_StartWakeUpAlarm+0x1e8>)
 8003642:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 8003644:	4b1c      	ldr	r3, [pc, #112]	; (80036b8 <RTC_StartWakeUpAlarm+0x1e8>)
 8003646:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800364a:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 800364c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800364e:	b2da      	uxtb	r2, r3
 8003650:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <RTC_StartWakeUpAlarm+0x1e8>)
 8003652:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8003654:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003656:	b2da      	uxtb	r2, r3
 8003658:	4b17      	ldr	r3, [pc, #92]	; (80036b8 <RTC_StartWakeUpAlarm+0x1e8>)
 800365a:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 800365c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800365e:	b2da      	uxtb	r2, r3
 8003660:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <RTC_StartWakeUpAlarm+0x1e8>)
 8003662:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8003664:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003666:	b2da      	uxtb	r2, r3
 8003668:	4b13      	ldr	r3, [pc, #76]	; (80036b8 <RTC_StartWakeUpAlarm+0x1e8>)
 800366a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 800366e:	7cfa      	ldrb	r2, [r7, #19]
 8003670:	4b11      	ldr	r3, [pc, #68]	; (80036b8 <RTC_StartWakeUpAlarm+0x1e8>)
 8003672:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003674:	4b10      	ldr	r3, [pc, #64]	; (80036b8 <RTC_StartWakeUpAlarm+0x1e8>)
 8003676:	2200      	movs	r2, #0
 8003678:	621a      	str	r2, [r3, #32]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 800367a:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <RTC_StartWakeUpAlarm+0x1e8>)
 800367c:	2200      	movs	r2, #0
 800367e:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8003680:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <RTC_StartWakeUpAlarm+0x1e8>)
 8003682:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003686:	629a      	str	r2, [r3, #40]	; 0x28
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <RTC_StartWakeUpAlarm+0x1e8>)
 800368a:	2200      	movs	r2, #0
 800368c:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800368e:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <RTC_StartWakeUpAlarm+0x1e8>)
 8003690:	2200      	movs	r2, #0
 8003692:	611a      	str	r2, [r3, #16]

  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8003694:	2200      	movs	r2, #0
 8003696:	4908      	ldr	r1, [pc, #32]	; (80036b8 <RTC_StartWakeUpAlarm+0x1e8>)
 8003698:	4808      	ldr	r0, [pc, #32]	; (80036bc <RTC_StartWakeUpAlarm+0x1ec>)
 800369a:	f004 ffbf 	bl	800861c <HAL_RTC_SetAlarm_IT>
}
 800369e:	bf00      	nop
 80036a0:	3730      	adds	r7, #48	; 0x30
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bdb0      	pop	{r4, r5, r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20000430 	.word	0x20000430
 80036ac:	0001517f 	.word	0x0001517f
 80036b0:	080115d4 	.word	0x080115d4
 80036b4:	080115c8 	.word	0x080115c8
 80036b8:	20000404 	.word	0x20000404
 80036bc:	2000c87c 	.word	0x2000c87c

080036c0 <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t calendarValue = 0;
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 80036ce:	2200      	movs	r2, #0
 80036d0:	6839      	ldr	r1, [r7, #0]
 80036d2:	483b      	ldr	r0, [pc, #236]	; (80037c0 <RTC_GetCalendarValue+0x100>)
 80036d4:	f004 fe72 	bl	80083bc <HAL_RTC_GetTime>

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
 80036d8:	483a      	ldr	r0, [pc, #232]	; (80037c4 <RTC_GetCalendarValue+0x104>)
 80036da:	f7ff fda2 	bl	8003222 <LL_RTC_TIME_GetSubSecond>
 80036de:	6138      	str	r0, [r7, #16]
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 80036e0:	2200      	movs	r2, #0
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	4836      	ldr	r0, [pc, #216]	; (80037c0 <RTC_GetCalendarValue+0x100>)
 80036e6:	f004 ff4c 	bl	8008582 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 80036ea:	2200      	movs	r2, #0
 80036ec:	6839      	ldr	r1, [r7, #0]
 80036ee:	4834      	ldr	r0, [pc, #208]	; (80037c0 <RTC_GetCalendarValue+0x100>)
 80036f0:	f004 fe64 	bl	80083bc <HAL_RTC_GetTime>

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 80036f4:	4833      	ldr	r0, [pc, #204]	; (80037c4 <RTC_GetCalendarValue+0x104>)
 80036f6:	f7ff fd94 	bl	8003222 <LL_RTC_TIME_GetSubSecond>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4293      	cmp	r3, r2
 8003700:	d1ea      	bne.n	80036d8 <RTC_GetCalendarValue+0x18>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	78db      	ldrb	r3, [r3, #3]
 8003706:	461a      	mov	r2, r3
 8003708:	f240 53b5 	movw	r3, #1461	; 0x5b5
 800370c:	fb03 f302 	mul.w	r3, r3, r2
 8003710:	3303      	adds	r3, #3
 8003712:	089b      	lsrs	r3, r3, #2
 8003714:	617b      	str	r3, [r7, #20]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	78db      	ldrb	r3, [r3, #3]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <RTC_GetCalendarValue+0x68>
 8003724:	4b28      	ldr	r3, [pc, #160]	; (80037c8 <RTC_GetCalendarValue+0x108>)
 8003726:	e000      	b.n	800372a <RTC_GetCalendarValue+0x6a>
 8003728:	4b28      	ldr	r3, [pc, #160]	; (80037cc <RTC_GetCalendarValue+0x10c>)
 800372a:	60fb      	str	r3, [r7, #12]

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	785b      	ldrb	r3, [r3, #1]
 8003730:	1e5a      	subs	r2, r3, #1
 8003732:	4613      	mov	r3, r2
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	3301      	adds	r3, #1
 800373e:	0fda      	lsrs	r2, r3, #31
 8003740:	4413      	add	r3, r2
 8003742:	105b      	asrs	r3, r3, #1
 8003744:	4619      	mov	r1, r3
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	785b      	ldrb	r3, [r3, #1]
 800374a:	3b01      	subs	r3, #1
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	fa22 f303 	lsr.w	r3, r2, r3
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	1acb      	subs	r3, r1, r3
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4413      	add	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  calendarValue += (RTC_DateStruct->Date - 1);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	789b      	ldrb	r3, [r3, #2]
 8003764:	461a      	mov	r2, r3
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	4413      	add	r3, r2
 800376a:	3b01      	subs	r3, #1
 800376c:	617b      	str	r3, [r7, #20]

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	4a17      	ldr	r2, [pc, #92]	; (80037d0 <RTC_GetCalendarValue+0x110>)
 8003772:	fb02 f303 	mul.w	r3, r2, r3
 8003776:	617b      	str	r3, [r7, #20]

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	789b      	ldrb	r3, [r3, #2]
 800377c:	4618      	mov	r0, r3
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003788:	fb03 f202 	mul.w	r2, r3, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	785b      	ldrb	r3, [r3, #1]
 8003790:	4619      	mov	r1, r3
 8003792:	460b      	mov	r3, r1
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	1a5b      	subs	r3, r3, r1
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	4403      	add	r3, r0
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4413      	add	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	029a      	lsls	r2, r3, #10
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80037b2:	617b      	str	r3, [r7, #20]

  return (calendarValue);
 80037b4:	697b      	ldr	r3, [r7, #20]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	2000c87c 	.word	0x2000c87c
 80037c4:	40002800 	.word	0x40002800
 80037c8:	00445550 	.word	0x00445550
 80037cc:	0099aaa0 	.word	0x0099aaa0
 80037d0:	00015180 	.word	0x00015180

080037d4 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80037d8:	bf00      	nop
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 80037e2:	b480      	push	{r7}
 80037e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80037e6:	bf00      	nop
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <PWR_ExitSleepMode>:



void PWR_ExitSleepMode(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Suspend sysTick */
  HAL_ResumeTick();
 80037f4:	f000 fddc 	bl	80043b0 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80037f8:	bf00      	nop
 80037fa:	bd80      	pop	{r7, pc}

080037fc <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003802:	f3ef 8310 	mrs	r3, PRIMASK
 8003806:	607b      	str	r3, [r7, #4]
  return(result);
 8003808:	687b      	ldr	r3, [r7, #4]

  /* Disable IRQ while the MCU is not running to enter critiacl sect */
  UTILS_ENTER_CRITICAL_SECTION();
 800380a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800380c:	b672      	cpsid	i
}
 800380e:	bf00      	nop

  HW_IoDeInit();
 8003810:	f000 fae8 	bl	8003de4 <HW_IoDeInit>
  //Gpio_PreInit();

  //HAL_ADC_DeInit(&hadc1); /*needed if application has done an AdcInit()*/
  /*WARNING: we have to enable the IRQ since this*/
  /*function uses the systick for delay*/
  HAL_SuspendTick();
 8003814:	f000 fdbc 	bl	8004390 <HAL_SuspendTick>
  //__HAL_RCC_PWR_CLK_ENABLE();
  /*clear wake up flag*/
  SET_BIT(PWR->SCR, PWR_SCR_CWUF);
 8003818:	4b0d      	ldr	r3, [pc, #52]	; (8003850 <PWR_EnterStopMode+0x54>)
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	4a0c      	ldr	r2, [pc, #48]	; (8003850 <PWR_EnterStopMode+0x54>)
 800381e:	f043 031f 	orr.w	r3, r3, #31
 8003822:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(USART1->CR1, USART_CR1_RXNEIE);
#else
#if USE_USART2
  CLEAR_BIT(USART2->CR1, USART_CR1_RXNEIE);
#else
  CLEAR_BIT(LPUART1->CR1, USART_CR1_RXNEIE);
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <PWR_EnterStopMode+0x58>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a0a      	ldr	r2, [pc, #40]	; (8003854 <PWR_EnterStopMode+0x58>)
 800382a:	f023 0320 	bic.w	r3, r3, #32
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f383 8810 	msr	PRIMASK, r3
}
 800383a:	bf00      	nop

  /* RESTORE_PRIMASK();*/
  UTILS_EXIT_CRITICAL_SECTION();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800383c:	2101      	movs	r1, #1
 800383e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003842:	f003 f9f5 	bl	8006c30 <HAL_PWR_EnterSTOPMode>
}
 8003846:	bf00      	nop
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40007000 	.word	0x40007000
 8003854:	40008000 	.word	0x40008000

08003858 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800385e:	f3ef 8310 	mrs	r3, PRIMASK
 8003862:	60bb      	str	r3, [r7, #8]
  return(result);
 8003864:	68bb      	ldr	r3, [r7, #8]
  /* Disable IRQ while the MCU is not running on HSI */
  UTILS_ENTER_CRITICAL_SECTION();
 8003866:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8003868:	b672      	cpsid	i
}
 800386a:	bf00      	nop

  /* After wake-up from STOP reconfigure the system clock */


/*  /* Enable HSI */
  __HAL_RCC_MSI_ENABLE();// __HAL_RCC_HSI_ENABLE();
 800386c:	4b0e      	ldr	r3, [pc, #56]	; (80038a8 <PWR_ExitStopMode+0x50>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a0d      	ldr	r2, [pc, #52]	; (80038a8 <PWR_ExitStopMode+0x50>)
 8003872:	f043 0301 	orr.w	r3, r3, #1
 8003876:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET) {}
 8003878:	bf00      	nop
 800387a:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <PWR_ExitStopMode+0x50>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f9      	beq.n	800387a <PWR_ExitStopMode+0x22>
//  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);

  /* Wait till PLL is used as system clock source */
//  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI) {}

  SystemClock_Config();
 8003886:	f7ff f8c1 	bl	8002a0c <SystemClock_Config>

  HAL_ResumeTick();
 800388a:	f000 fd91 	bl	80043b0 <HAL_ResumeTick>

  /* initializes the peripherals */
  HW_IoInit();
 800388e:	f000 fa99 	bl	8003dc4 <HW_IoInit>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f383 8810 	msr	PRIMASK, r3
}
 800389c:	bf00      	nop

  /*exit the critical section by restoring PRIMASK*/
  UTILS_EXIT_CRITICAL_SECTION();
}
 800389e:	bf00      	nop
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40021000 	.word	0x40021000

080038ac <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80038b0:	2101      	movs	r1, #1
 80038b2:	2000      	movs	r0, #0
 80038b4:	f003 f988 	bl	8006bc8 <HAL_PWR_EnterSLEEPMode>
}
 80038b8:	bf00      	nop
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038c2:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <HAL_MspInit+0x44>)
 80038c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c6:	4a0e      	ldr	r2, [pc, #56]	; (8003900 <HAL_MspInit+0x44>)
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	6613      	str	r3, [r2, #96]	; 0x60
 80038ce:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <HAL_MspInit+0x44>)
 80038d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	607b      	str	r3, [r7, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <HAL_MspInit+0x44>)
 80038dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038de:	4a08      	ldr	r2, [pc, #32]	; (8003900 <HAL_MspInit+0x44>)
 80038e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e4:	6593      	str	r3, [r2, #88]	; 0x58
 80038e6:	4b06      	ldr	r3, [pc, #24]	; (8003900 <HAL_MspInit+0x44>)
 80038e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40021000 	.word	0x40021000

08003904 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b0a4      	sub	sp, #144	; 0x90
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800391c:	f107 0314 	add.w	r3, r7, #20
 8003920:	2268      	movs	r2, #104	; 0x68
 8003922:	2100      	movs	r1, #0
 8003924:	4618      	mov	r0, r3
 8003926:	f009 f9bd 	bl	800cca4 <memset>
  if(hadc->Instance==ADC1)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a34      	ldr	r2, [pc, #208]	; (8003a00 <HAL_ADC_MspInit+0xfc>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d161      	bne.n	80039f8 <HAL_ADC_MspInit+0xf4>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003934:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003938:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800393a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800393e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003940:	f107 0314 	add.w	r3, r7, #20
 8003944:	4618      	mov	r0, r3
 8003946:	f004 f8c3 	bl	8007ad0 <HAL_RCCEx_PeriphCLKConfig>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003950:	f7ff fb9c 	bl	800308c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003954:	4b2b      	ldr	r3, [pc, #172]	; (8003a04 <HAL_ADC_MspInit+0x100>)
 8003956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003958:	4a2a      	ldr	r2, [pc, #168]	; (8003a04 <HAL_ADC_MspInit+0x100>)
 800395a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800395e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003960:	4b28      	ldr	r3, [pc, #160]	; (8003a04 <HAL_ADC_MspInit+0x100>)
 8003962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800396c:	4b25      	ldr	r3, [pc, #148]	; (8003a04 <HAL_ADC_MspInit+0x100>)
 800396e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003970:	4a24      	ldr	r2, [pc, #144]	; (8003a04 <HAL_ADC_MspInit+0x100>)
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003978:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <HAL_ADC_MspInit+0x100>)
 800397a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003984:	2360      	movs	r3, #96	; 0x60
 8003986:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003988:	230b      	movs	r3, #11
 800398a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398e:	2300      	movs	r3, #0
 8003990:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003994:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003998:	4619      	mov	r1, r3
 800399a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800399e:	f002 fea7 	bl	80066f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80039a2:	4b19      	ldr	r3, [pc, #100]	; (8003a08 <HAL_ADC_MspInit+0x104>)
 80039a4:	4a19      	ldr	r2, [pc, #100]	; (8003a0c <HAL_ADC_MspInit+0x108>)
 80039a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80039a8:	4b17      	ldr	r3, [pc, #92]	; (8003a08 <HAL_ADC_MspInit+0x104>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039ae:	4b16      	ldr	r3, [pc, #88]	; (8003a08 <HAL_ADC_MspInit+0x104>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80039b4:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <HAL_ADC_MspInit+0x104>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80039ba:	4b13      	ldr	r3, [pc, #76]	; (8003a08 <HAL_ADC_MspInit+0x104>)
 80039bc:	2280      	movs	r2, #128	; 0x80
 80039be:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80039c0:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <HAL_ADC_MspInit+0x104>)
 80039c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039c6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80039c8:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <HAL_ADC_MspInit+0x104>)
 80039ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039ce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80039d0:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <HAL_ADC_MspInit+0x104>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80039d6:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <HAL_ADC_MspInit+0x104>)
 80039d8:	2200      	movs	r2, #0
 80039da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80039dc:	480a      	ldr	r0, [pc, #40]	; (8003a08 <HAL_ADC_MspInit+0x104>)
 80039de:	f002 fbbf 	bl	8006160 <HAL_DMA_Init>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_ADC_MspInit+0xe8>
    {
      Error_Handler();
 80039e8:	f7ff fb50 	bl	800308c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a06      	ldr	r2, [pc, #24]	; (8003a08 <HAL_ADC_MspInit+0x104>)
 80039f0:	651a      	str	r2, [r3, #80]	; 0x50
 80039f2:	4a05      	ldr	r2, [pc, #20]	; (8003a08 <HAL_ADC_MspInit+0x104>)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80039f8:	bf00      	nop
 80039fa:	3790      	adds	r7, #144	; 0x90
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	50040000 	.word	0x50040000
 8003a04:	40021000 	.word	0x40021000
 8003a08:	2000c834 	.word	0x2000c834
 8003a0c:	40020008 	.word	0x40020008

08003a10 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a0b      	ldr	r2, [pc, #44]	; (8003a4c <HAL_ADC_MspDeInit+0x3c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d10f      	bne.n	8003a42 <HAL_ADC_MspDeInit+0x32>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_ADC_MspDeInit+0x40>)
 8003a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a26:	4a0a      	ldr	r2, [pc, #40]	; (8003a50 <HAL_ADC_MspDeInit+0x40>)
 8003a28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a2c:	64d3      	str	r3, [r2, #76]	; 0x4c

    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN11
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6);
 8003a2e:	2160      	movs	r1, #96	; 0x60
 8003a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a34:	f002 ffd6 	bl	80069e4 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f002 fc47 	bl	80062d0 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	50040000 	.word	0x50040000
 8003a50:	40021000 	.word	0x40021000

08003a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b0a6      	sub	sp, #152	; 0x98
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a5c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	605a      	str	r2, [r3, #4]
 8003a66:	609a      	str	r2, [r3, #8]
 8003a68:	60da      	str	r2, [r3, #12]
 8003a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a6c:	f107 031c 	add.w	r3, r7, #28
 8003a70:	2268      	movs	r2, #104	; 0x68
 8003a72:	2100      	movs	r1, #0
 8003a74:	4618      	mov	r0, r3
 8003a76:	f009 f915 	bl	800cca4 <memset>
  if(huart->Instance==LPUART1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a47      	ldr	r2, [pc, #284]	; (8003b9c <HAL_UART_MspInit+0x148>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d145      	bne.n	8003b10 <HAL_UART_MspInit+0xbc>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003a84:	2320      	movs	r3, #32
 8003a86:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Lpuart1ClockSelection =  RCC_LPUART1CLKSOURCE_HSI;
 8003a88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a8e:	f107 031c 	add.w	r3, r7, #28
 8003a92:	4618      	mov	r0, r3
 8003a94:	f004 f81c 	bl	8007ad0 <HAL_RCCEx_PeriphCLKConfig>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003a9e:	f7ff faf5 	bl	800308c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003aa2:	4b3f      	ldr	r3, [pc, #252]	; (8003ba0 <HAL_UART_MspInit+0x14c>)
 8003aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa6:	4a3e      	ldr	r2, [pc, #248]	; (8003ba0 <HAL_UART_MspInit+0x14c>)
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003aae:	4b3c      	ldr	r3, [pc, #240]	; (8003ba0 <HAL_UART_MspInit+0x14c>)
 8003ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	61bb      	str	r3, [r7, #24]
 8003ab8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aba:	4b39      	ldr	r3, [pc, #228]	; (8003ba0 <HAL_UART_MspInit+0x14c>)
 8003abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003abe:	4a38      	ldr	r2, [pc, #224]	; (8003ba0 <HAL_UART_MspInit+0x14c>)
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ac6:	4b36      	ldr	r3, [pc, #216]	; (8003ba0 <HAL_UART_MspInit+0x14c>)
 8003ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003ad2:	230c      	movs	r3, #12
 8003ad4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad8:	2302      	movs	r3, #2
 8003ada:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003aea:	2308      	movs	r3, #8
 8003aec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003af4:	4619      	mov	r1, r3
 8003af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003afa:	f002 fdf9 	bl	80066f0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003afe:	2200      	movs	r2, #0
 8003b00:	2100      	movs	r1, #0
 8003b02:	2046      	movs	r0, #70	; 0x46
 8003b04:	f002 faf4 	bl	80060f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003b08:	2046      	movs	r0, #70	; 0x46
 8003b0a:	f002 fb0d 	bl	8006128 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003b0e:	e041      	b.n	8003b94 <HAL_UART_MspInit+0x140>
  else if(huart->Instance==USART1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a23      	ldr	r2, [pc, #140]	; (8003ba4 <HAL_UART_MspInit+0x150>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d13c      	bne.n	8003b94 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b22:	f107 031c 	add.w	r3, r7, #28
 8003b26:	4618      	mov	r0, r3
 8003b28:	f003 ffd2 	bl	8007ad0 <HAL_RCCEx_PeriphCLKConfig>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8003b32:	f7ff faab 	bl	800308c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b36:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <HAL_UART_MspInit+0x14c>)
 8003b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b3a:	4a19      	ldr	r2, [pc, #100]	; (8003ba0 <HAL_UART_MspInit+0x14c>)
 8003b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b40:	6613      	str	r3, [r2, #96]	; 0x60
 8003b42:	4b17      	ldr	r3, [pc, #92]	; (8003ba0 <HAL_UART_MspInit+0x14c>)
 8003b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b4e:	4b14      	ldr	r3, [pc, #80]	; (8003ba0 <HAL_UART_MspInit+0x14c>)
 8003b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b52:	4a13      	ldr	r2, [pc, #76]	; (8003ba0 <HAL_UART_MspInit+0x14c>)
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b5a:	4b11      	ldr	r3, [pc, #68]	; (8003ba0 <HAL_UART_MspInit+0x14c>)
 8003b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003b66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003b6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b74:	2300      	movs	r3, #0
 8003b76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b80:	2307      	movs	r3, #7
 8003b82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b86:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b90:	f002 fdae 	bl	80066f0 <HAL_GPIO_Init>
}
 8003b94:	bf00      	nop
 8003b96:	3798      	adds	r7, #152	; 0x98
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40008000 	.word	0x40008000
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	40013800 	.word	0x40013800

08003ba8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a13      	ldr	r2, [pc, #76]	; (8003c04 <HAL_UART_MspDeInit+0x5c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d10e      	bne.n	8003bd8 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8003bba:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <HAL_UART_MspDeInit+0x60>)
 8003bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbe:	4a12      	ldr	r2, [pc, #72]	; (8003c08 <HAL_UART_MspDeInit+0x60>)
 8003bc0:	f023 0301 	bic.w	r3, r3, #1
 8003bc4:	65d3      	str	r3, [r2, #92]	; 0x5c

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8003bc6:	210c      	movs	r1, #12
 8003bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bcc:	f002 ff0a 	bl	80069e4 <HAL_GPIO_DeInit>

    /* LPUART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8003bd0:	2046      	movs	r0, #70	; 0x46
 8003bd2:	f002 fab7 	bl	8006144 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8003bd6:	e010      	b.n	8003bfa <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a0b      	ldr	r2, [pc, #44]	; (8003c0c <HAL_UART_MspDeInit+0x64>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d10b      	bne.n	8003bfa <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART1_CLK_DISABLE();
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <HAL_UART_MspDeInit+0x60>)
 8003be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be6:	4a08      	ldr	r2, [pc, #32]	; (8003c08 <HAL_UART_MspDeInit+0x60>)
 8003be8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bec:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8003bee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bf6:	f002 fef5 	bl	80069e4 <HAL_GPIO_DeInit>
}
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40008000 	.word	0x40008000
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	40013800 	.word	0x40013800

08003c10 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b09c      	sub	sp, #112	; 0x70
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c18:	f107 0308 	add.w	r3, r7, #8
 8003c1c:	2268      	movs	r2, #104	; 0x68
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f009 f83f 	bl	800cca4 <memset>
  if(hrtc->Instance==RTC)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a17      	ldr	r2, [pc, #92]	; (8003c88 <HAL_RTC_MspInit+0x78>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d127      	bne.n	8003c80 <HAL_RTC_MspInit+0x70>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c34:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003c36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c3a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c3c:	f107 0308 	add.w	r3, r7, #8
 8003c40:	4618      	mov	r0, r3
 8003c42:	f003 ff45 	bl	8007ad0 <HAL_RCCEx_PeriphCLKConfig>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003c4c:	f7ff fa1e 	bl	800308c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003c50:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <HAL_RTC_MspInit+0x7c>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c56:	4a0d      	ldr	r2, [pc, #52]	; (8003c8c <HAL_RTC_MspInit+0x7c>)
 8003c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003c60:	2200      	movs	r2, #0
 8003c62:	2100      	movs	r1, #0
 8003c64:	2003      	movs	r0, #3
 8003c66:	f002 fa43 	bl	80060f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003c6a:	2003      	movs	r0, #3
 8003c6c:	f002 fa5c 	bl	8006128 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8003c70:	2200      	movs	r2, #0
 8003c72:	2100      	movs	r1, #0
 8003c74:	2029      	movs	r0, #41	; 0x29
 8003c76:	f002 fa3b 	bl	80060f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003c7a:	2029      	movs	r0, #41	; 0x29
 8003c7c:	f002 fa54 	bl	8006128 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003c80:	bf00      	nop
 8003c82:	3770      	adds	r7, #112	; 0x70
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40002800 	.word	0x40002800
 8003c8c:	40021000 	.word	0x40021000

08003c90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a0a      	ldr	r2, [pc, #40]	; (8003cc8 <HAL_TIM_Base_MspInit+0x38>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d10b      	bne.n	8003cba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ca2:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <HAL_TIM_Base_MspInit+0x3c>)
 8003ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca6:	4a09      	ldr	r2, [pc, #36]	; (8003ccc <HAL_TIM_Base_MspInit+0x3c>)
 8003ca8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cac:	6613      	str	r3, [r2, #96]	; 0x60
 8003cae:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <HAL_TIM_Base_MspInit+0x3c>)
 8003cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003cba:	bf00      	nop
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40012c00 	.word	0x40012c00
 8003ccc:	40021000 	.word	0x40021000

08003cd0 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a07      	ldr	r2, [pc, #28]	; (8003cfc <HAL_TIM_Base_MspDeInit+0x2c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d105      	bne.n	8003cee <HAL_TIM_Base_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8003ce2:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <HAL_TIM_Base_MspDeInit+0x30>)
 8003ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce6:	4a06      	ldr	r2, [pc, #24]	; (8003d00 <HAL_TIM_Base_MspDeInit+0x30>)
 8003ce8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cec:	6613      	str	r3, [r2, #96]	; 0x60
  /* USER CODE BEGIN TIM1_MspDeInit 1 */

  /* USER CODE END TIM1_MspDeInit 1 */
  }

}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40012c00 	.word	0x40012c00
 8003d00:	40021000 	.word	0x40021000

08003d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d08:	e7fe      	b.n	8003d08 <NMI_Handler+0x4>

08003d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d0e:	e7fe      	b.n	8003d0e <HardFault_Handler+0x4>

08003d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d14:	e7fe      	b.n	8003d14 <MemManage_Handler+0x4>

08003d16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d16:	b480      	push	{r7}
 8003d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d1a:	e7fe      	b.n	8003d1a <BusFault_Handler+0x4>

08003d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d20:	e7fe      	b.n	8003d20 <UsageFault_Handler+0x4>

08003d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d22:	b480      	push	{r7}
 8003d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d26:	bf00      	nop
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d34:	bf00      	nop
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d42:	bf00      	nop
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d50:	f000 fb0a 	bl	8004368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d54:	bf00      	nop
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003d5c:	4802      	ldr	r0, [pc, #8]	; (8003d68 <RTC_WKUP_IRQHandler+0x10>)
 8003d5e:	f005 f837 	bl	8008dd0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003d62:	bf00      	nop
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	2000c87c 	.word	0x2000c87c

08003d6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d70:	4802      	ldr	r0, [pc, #8]	; (8003d7c <DMA1_Channel1_IRQHandler+0x10>)
 8003d72:	f002 fbdd 	bl	8006530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003d76:	bf00      	nop
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	2000c834 	.word	0x2000c834

08003d80 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003d84:	4802      	ldr	r0, [pc, #8]	; (8003d90 <RTC_Alarm_IRQHandler+0x10>)
 8003d86:	f004 fe19 	bl	80089bc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003d8a:	bf00      	nop
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	2000c87c 	.word	0x2000c87c

08003d94 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  //HAL_UART_IRQHandler(&hlpuart1);
  /* USER CODE BEGIN LPUART1_IRQn 1 */
  HW_UART_Modem_IRQHandler(&hlpuart1);
 8003d98:	4802      	ldr	r0, [pc, #8]	; (8003da4 <LPUART1_IRQHandler+0x10>)
 8003d9a:	f000 f97f 	bl	800409c <HW_UART_Modem_IRQHandler>
  /* USER CODE END LPUART1_IRQn 1 */
}
 8003d9e:	bf00      	nop
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	2000c6c4 	.word	0x2000c6c4

08003da8 <SystemApp_Init>:
  * @brief initialises the system (dbg pins, trace, mbmux, systiemr, LPM, ...)
  * @param none
  * @retval  none
  */
void SystemApp_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /*Initialises timer and RTC*/
  UTIL_TIMER_Init();
 8003dac:	f008 f83e 	bl	800be2c <UTIL_TIMER_Init>

// Gpio_PreInit();

  /* Configure the debug mode*/
  DBG_Init();
 8003db0:	f000 f8f6 	bl	8003fa0 <DBG_Init>
  /*Initialize the temperature and Battery measurement services */
  //SYS_InitMeasurement();


  /*Init low power manager*/
  UTIL_LPM_Init();
 8003db4:	f007 f95e 	bl	800b074 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8003db8:	2101      	movs	r1, #1
 8003dba:	2001      	movs	r0, #1
 8003dbc:	f007 f99c 	bl	800b0f8 <UTIL_LPM_SetOffMode>
#error LOW_POWER_DISABLE not defined
#endif /* LOW_POWER_DISABLE */
  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8003dc0:	bf00      	nop
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HW_IoInit>:
  * @brief This function Initializes the hardware Ios
  * @param None
  * @retval None
  */
void HW_IoInit(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
    MX_GPIO_Init();
 8003dc8:	f7ff f890 	bl	8002eec <MX_GPIO_Init>
   // HAL_UART_MspInit(&hlpuart1);
    HAL_TIM_Base_MspInit(&htim1);
 8003dcc:	4803      	ldr	r0, [pc, #12]	; (8003ddc <HW_IoInit+0x18>)
 8003dce:	f7ff ff5f 	bl	8003c90 <HAL_TIM_Base_MspInit>
    //HAL_ADC_MspInit(&hadc1);
    HAL_UART_MspInit(&huart1);
 8003dd2:	4803      	ldr	r0, [pc, #12]	; (8003de0 <HW_IoInit+0x1c>)
 8003dd4:	f7ff fe3e 	bl	8003a54 <HAL_UART_MspInit>
}
 8003dd8:	bf00      	nop
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	200108a0 	.word	0x200108a0
 8003de0:	2000c7b0 	.word	0x2000c7b0

08003de4 <HW_IoDeInit>:
  * @brief This function Deinitializes the hardware Ios
  * @param None
  * @retval None
  */
void HW_IoDeInit(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(VBUS_DETECT_GPIO_Port, VBUS_DETECT_Pin);
 8003de8:	2102      	movs	r1, #2
 8003dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dee:	f002 fdf9 	bl	80069e4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(SENSOR_PWR_CNTRL_GPIO_Port,SENSOR_PWR_CNTRL_Pin);
 8003df2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003df6:	4808      	ldr	r0, [pc, #32]	; (8003e18 <HW_IoDeInit+0x34>)
 8003df8:	f002 fdf4 	bl	80069e4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(LED_CNTRL_GPIO_Port,LED_CNTRL_Pin);
 8003dfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e04:	f002 fdee 	bl	80069e4 <HAL_GPIO_DeInit>
  //Modem_IO_DeInit();
  //HAL_ADC_MspDeInit(&hadc1); //DMA is disabled by this call.
  HAL_TIM_Base_MspDeInit(&htim1);
 8003e08:	4804      	ldr	r0, [pc, #16]	; (8003e1c <HW_IoDeInit+0x38>)
 8003e0a:	f7ff ff61 	bl	8003cd0 <HAL_TIM_Base_MspDeInit>
  HAL_UART_MspDeInit(&huart1);
 8003e0e:	4804      	ldr	r0, [pc, #16]	; (8003e20 <HW_IoDeInit+0x3c>)
 8003e10:	f7ff feca 	bl	8003ba8 <HAL_UART_MspDeInit>
  //Gpio_PreInit();
}
 8003e14:	bf00      	nop
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	48000400 	.word	0x48000400
 8003e1c:	200108a0 	.word	0x200108a0
 8003e20:	2000c7b0 	.word	0x2000c7b0

08003e24 <GetTemperatureLevel>:

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
}

float GetTemperatureLevel(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
  float temperatureLevel = 0;
 8003e2a:	f04f 0300 	mov.w	r3, #0
 8003e2e:	607b      	str	r3, [r7, #4]

  temperatureLevel = SYS_GetTemperatureLevel();
 8003e30:	f7fe fc6e 	bl	8002710 <SYS_GetTemperatureLevel>
 8003e34:	ed87 0a01 	vstr	s0, [r7, #4]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	ee07 3a90 	vmov	s15, r3
}
 8003e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <GetVibrationData>:
  return ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
}

/* USER CODE BEGIN ExF */
void GetVibrationData(vibrationStat_t* vibrationData)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
	SYS_GetVibrationData(vibrationData);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7fe fced 	bl	8002830 <SYS_GetVibrationData>
}
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <Gpio_PreInit>:

/* Private functions ---------------------------------------------------------*/


void Gpio_PreInit(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08a      	sub	sp, #40	; 0x28
 8003e64:	af00      	add	r7, sp, #0


	/* USER CODE BEGIN Gpio_PreInit_1 */

	  /* USER CODE END Gpio_PreInit_1 */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e66:	f107 0314 	add.w	r3, r7, #20
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	605a      	str	r2, [r3, #4]
 8003e70:	609a      	str	r2, [r3, #8]
 8003e72:	60da      	str	r2, [r3, #12]
 8003e74:	611a      	str	r2, [r3, #16]
	  /* Configure all IOs in analog input              */
	  /* Except PA143 and PA14 (SWCLK and SWD) for debug*/
	  /* PA13 and PA14 are configured in debug_init     */
	  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
	  /* Enable GPIOs clock */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e76:	4b37      	ldr	r3, [pc, #220]	; (8003f54 <Gpio_PreInit+0xf4>)
 8003e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7a:	4a36      	ldr	r2, [pc, #216]	; (8003f54 <Gpio_PreInit+0xf4>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e82:	4b34      	ldr	r3, [pc, #208]	; (8003f54 <Gpio_PreInit+0xf4>)
 8003e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	613b      	str	r3, [r7, #16]
 8003e8c:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e8e:	4b31      	ldr	r3, [pc, #196]	; (8003f54 <Gpio_PreInit+0xf4>)
 8003e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e92:	4a30      	ldr	r2, [pc, #192]	; (8003f54 <Gpio_PreInit+0xf4>)
 8003e94:	f043 0302 	orr.w	r3, r3, #2
 8003e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e9a:	4b2e      	ldr	r3, [pc, #184]	; (8003f54 <Gpio_PreInit+0xf4>)
 8003e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ea6:	4b2b      	ldr	r3, [pc, #172]	; (8003f54 <Gpio_PreInit+0xf4>)
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eaa:	4a2a      	ldr	r2, [pc, #168]	; (8003f54 <Gpio_PreInit+0xf4>)
 8003eac:	f043 0304 	orr.w	r3, r3, #4
 8003eb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003eb2:	4b28      	ldr	r3, [pc, #160]	; (8003f54 <Gpio_PreInit+0xf4>)
 8003eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ebe:	4b25      	ldr	r3, [pc, #148]	; (8003f54 <Gpio_PreInit+0xf4>)
 8003ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec2:	4a24      	ldr	r2, [pc, #144]	; (8003f54 <Gpio_PreInit+0xf4>)
 8003ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003eca:	4b22      	ldr	r3, [pc, #136]	; (8003f54 <Gpio_PreInit+0xf4>)
 8003ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed2:	607b      	str	r3, [r7, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]

	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61fb      	str	r3, [r7, #28]
	  /* All GPIOs except debug pins (SWCLK and SWD) */
	  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14 ));//| VBUS_DETECT_Pin | LED_CNTRL_Pin));
 8003ede:	f649 73ff 	movw	r3, #40959	; 0x9fff
 8003ee2:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ee4:	f107 0314 	add.w	r3, r7, #20
 8003ee8:	4619      	mov	r1, r3
 8003eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eee:	f002 fbff 	bl	80066f0 <HAL_GPIO_Init>

	  /* All GPIOs */
	  GPIO_InitStruct.Pin = GPIO_PIN_All ; //& (~(SENSOR_PWR_CNTRL_Pin));
 8003ef2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ef6:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ef8:	f107 0314 	add.w	r3, r7, #20
 8003efc:	4619      	mov	r1, r3
 8003efe:	4816      	ldr	r0, [pc, #88]	; (8003f58 <Gpio_PreInit+0xf8>)
 8003f00:	f002 fbf6 	bl	80066f0 <HAL_GPIO_Init>
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f04:	f107 0314 	add.w	r3, r7, #20
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4814      	ldr	r0, [pc, #80]	; (8003f5c <Gpio_PreInit+0xfc>)
 8003f0c:	f002 fbf0 	bl	80066f0 <HAL_GPIO_Init>
	  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003f10:	f107 0314 	add.w	r3, r7, #20
 8003f14:	4619      	mov	r1, r3
 8003f16:	4812      	ldr	r0, [pc, #72]	; (8003f60 <Gpio_PreInit+0x100>)
 8003f18:	f002 fbea 	bl	80066f0 <HAL_GPIO_Init>

	  /* Disable GPIOs clock */
	  __HAL_RCC_GPIOA_CLK_DISABLE();
 8003f1c:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <Gpio_PreInit+0xf4>)
 8003f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f20:	4a0c      	ldr	r2, [pc, #48]	; (8003f54 <Gpio_PreInit+0xf4>)
 8003f22:	f023 0301 	bic.w	r3, r3, #1
 8003f26:	64d3      	str	r3, [r2, #76]	; 0x4c
	  __HAL_RCC_GPIOB_CLK_DISABLE();
 8003f28:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <Gpio_PreInit+0xf4>)
 8003f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f2c:	4a09      	ldr	r2, [pc, #36]	; (8003f54 <Gpio_PreInit+0xf4>)
 8003f2e:	f023 0302 	bic.w	r3, r3, #2
 8003f32:	64d3      	str	r3, [r2, #76]	; 0x4c
	  __HAL_RCC_GPIOC_CLK_DISABLE();
 8003f34:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <Gpio_PreInit+0xf4>)
 8003f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f38:	4a06      	ldr	r2, [pc, #24]	; (8003f54 <Gpio_PreInit+0xf4>)
 8003f3a:	f023 0304 	bic.w	r3, r3, #4
 8003f3e:	64d3      	str	r3, [r2, #76]	; 0x4c
	  __HAL_RCC_GPIOH_CLK_DISABLE();
 8003f40:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <Gpio_PreInit+0xf4>)
 8003f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f44:	4a03      	ldr	r2, [pc, #12]	; (8003f54 <Gpio_PreInit+0xf4>)
 8003f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f4a:	64d3      	str	r3, [r2, #76]	; 0x4c
	  /* USER CODE BEGIN Gpio_PreInit_2 */

	  /* USER CODE END Gpio_PreInit_2 */

}
 8003f4c:	bf00      	nop
 8003f4e:	3728      	adds	r7, #40	; 0x28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40021000 	.word	0x40021000
 8003f58:	48000400 	.word	0x48000400
 8003f5c:	48000800 	.word	0x48000800
 8003f60:	48001c00 	.word	0x48001c00

08003f64 <HAL_InitTick>:
  * @brief  don't enable systick
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <HAL_GetTick>:
  * @brief Provide a tick value in millisecond measured using RTC
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 8003f7e:	f7ff fa09 	bl	8003394 <RTC_IF_GetTimerValue>
 8003f82:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff fa73 	bl	800347e <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8003f98:	bf00      	nop
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <DBG_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void DBG_Init(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
	 // HAL_DBGMCU_EnableDBGStandbyMode();

	#elif defined (DEBUGGER_ON) && (DEBUGGER_ON == 0) /* DEBUGGER_OFF */
	  /* Put the debugger pin PA13 and P14 in analog for LowPower*/
	  /* The 4 debug lines above are simply not set in this case */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa6:	1d3b      	adds	r3, r7, #4
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	609a      	str	r2, [r3, #8]
 8003fb0:	60da      	str	r2, [r3, #12]
 8003fb2:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8003fbc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003fc0:	607b      	str	r3, [r7, #4]
	  /* make sure clock is enabled before setting the pins with HAL_GPIO_Init() */
	  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8003fc2:	4b11      	ldr	r3, [pc, #68]	; (8004008 <DBG_Init+0x68>)
 8003fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc6:	4a10      	ldr	r2, [pc, #64]	; (8004008 <DBG_Init+0x68>)
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fce:	4b0e      	ldr	r3, [pc, #56]	; (8004008 <DBG_Init+0x68>)
 8003fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	683b      	ldr	r3, [r7, #0]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fda:	1d3b      	adds	r3, r7, #4
 8003fdc:	4619      	mov	r1, r3
 8003fde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fe2:	f002 fb85 	bl	80066f0 <HAL_GPIO_Init>
	  __HAL_RCC_GPIOA_CLK_DISABLE() ;
 8003fe6:	4b08      	ldr	r3, [pc, #32]	; (8004008 <DBG_Init+0x68>)
 8003fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fea:	4a07      	ldr	r2, [pc, #28]	; (8004008 <DBG_Init+0x68>)
 8003fec:	f023 0301 	bic.w	r3, r3, #1
 8003ff0:	64d3      	str	r3, [r2, #76]	; 0x4c

	 // __HAL_RCC_DBGMCU_CLK_ENABLE();
	  HAL_DBGMCU_DisableDBGSleepMode();
 8003ff2:	f000 f9ed 	bl	80043d0 <HAL_DBGMCU_DisableDBGSleepMode>
	  HAL_DBGMCU_DisableDBGStopMode();
 8003ff6:	f000 f9fb 	bl	80043f0 <HAL_DBGMCU_DisableDBGStopMode>
	  HAL_DBGMCU_DisableDBGStandbyMode();
 8003ffa:	f000 fa09 	bl	8004410 <HAL_DBGMCU_DisableDBGStandbyMode>
	#error "DEBUGGER_ON not defined or out of range <0,1>"
	#endif /* DEBUGGER_OFF */
	  /* USER CODE BEGIN DBG_Init_Last */

	  /* USER CODE END DBG_Init_Last */
}
 8003ffe:	bf00      	nop
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40021000 	.word	0x40021000

0800400c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004014:	4a14      	ldr	r2, [pc, #80]	; (8004068 <_sbrk+0x5c>)
 8004016:	4b15      	ldr	r3, [pc, #84]	; (800406c <_sbrk+0x60>)
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004020:	4b13      	ldr	r3, [pc, #76]	; (8004070 <_sbrk+0x64>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d102      	bne.n	800402e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004028:	4b11      	ldr	r3, [pc, #68]	; (8004070 <_sbrk+0x64>)
 800402a:	4a12      	ldr	r2, [pc, #72]	; (8004074 <_sbrk+0x68>)
 800402c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800402e:	4b10      	ldr	r3, [pc, #64]	; (8004070 <_sbrk+0x64>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4413      	add	r3, r2
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	429a      	cmp	r2, r3
 800403a:	d207      	bcs.n	800404c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800403c:	f008 fe08 	bl	800cc50 <__errno>
 8004040:	4603      	mov	r3, r0
 8004042:	220c      	movs	r2, #12
 8004044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004046:	f04f 33ff 	mov.w	r3, #4294967295
 800404a:	e009      	b.n	8004060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800404c:	4b08      	ldr	r3, [pc, #32]	; (8004070 <_sbrk+0x64>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004052:	4b07      	ldr	r3, [pc, #28]	; (8004070 <_sbrk+0x64>)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4413      	add	r3, r2
 800405a:	4a05      	ldr	r2, [pc, #20]	; (8004070 <_sbrk+0x64>)
 800405c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800405e:	68fb      	ldr	r3, [r7, #12]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	20020000 	.word	0x20020000
 800406c:	00000400 	.word	0x00000400
 8004070:	2000044c 	.word	0x2000044c
 8004074:	20012910 	.word	0x20012910

08004078 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800407c:	4b06      	ldr	r3, [pc, #24]	; (8004098 <SystemInit+0x20>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004082:	4a05      	ldr	r2, [pc, #20]	; (8004098 <SystemInit+0x20>)
 8004084:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004088:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800408c:	bf00      	nop
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	e000ed00 	.word	0xe000ed00

0800409c <HW_UART_Modem_IRQHandler>:
  * @brief Handler on Rx IRQ
  * @param handle to the UART
  * @retval void
  ******************************************************************************/
void HW_UART_Modem_IRQHandler(UART_HandleTypeDef *huart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b088      	sub	sp, #32
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	617b      	str	r3, [r7, #20]
  uint32_t cr3its = READ_REG(huart->Instance->CR3);;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	613b      	str	r3, [r7, #16]
  uint32_t errorflags;
  int rx_ready = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	61fb      	str	r3, [r7, #28]



  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d01b      	beq.n	8004102 <HW_UART_Modem_IRQHandler+0x66>
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d016      	beq.n	8004102 <HW_UART_Modem_IRQHandler+0x66>
  {
	//__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040dc:	621a      	str	r2, [r3, #32]

    /* forbid stop mode */
    UTIL_LPM_SetStopMode(LPM_UART_RX_Id, UTIL_LPM_DISABLE);
 80040de:	2101      	movs	r1, #1
 80040e0:	2010      	movs	r0, #16
 80040e2:	f006 ffd9 	bl	800b098 <UTIL_LPM_SetStopMode>


    /* Enable the UART Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0220 	orr.w	r2, r2, #32
 80040f4:	601a      	str	r2, [r3, #0]

    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	679a      	str	r2, [r3, #120]	; 0x78
    huart->RxState = HAL_UART_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	67da      	str	r2, [r3, #124]	; 0x7c

  }


  /* UART in mode Receiver ---------------------------------------------------*/
  if (((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	2b00      	cmp	r3, #0
 800410a:	d044      	beq.n	8004196 <HW_UART_Modem_IRQHandler+0xfa>
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f003 0320 	and.w	r3, r3, #32
 8004112:	2b00      	cmp	r3, #0
 8004114:	d03f      	beq.n	8004196 <HW_UART_Modem_IRQHandler+0xfa>
  {
    /* Check that a Rx process is ongoing */
    if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800411a:	2b22      	cmp	r3, #34	; 0x22
 800411c:	d130      	bne.n	8004180 <HW_UART_Modem_IRQHandler+0xe4>
    {
      /*RXNE flag is auto cleared by reading the data*/
      *huart->pRxBuffPtr++ = (uint8_t)READ_REG(huart->Instance->RDR);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004124:	b298      	uxth	r0, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412a:	1c59      	adds	r1, r3, #1
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6551      	str	r1, [r2, #84]	; 0x54
 8004130:	b2c2      	uxtb	r2, r0
 8004132:	701a      	strb	r2, [r3, #0]

      /* allow stop mode*/
      UTIL_LPM_SetStopMode(LPM_UART_RX_Id, UTIL_LPM_ENABLE);
 8004134:	2100      	movs	r1, #0
 8004136:	2010      	movs	r0, #16
 8004138:	f006 ffae 	bl	800b098 <UTIL_LPM_SetStopMode>

      if (--huart->RxXferCount == 0U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29b      	uxth	r3, r3
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	4619      	mov	r1, r3
 800414c:	f8a2 105a 	strh.w	r1, [r2, #90]	; 0x5a
 8004150:	2b00      	cmp	r3, #0
 8004152:	d120      	bne.n	8004196 <HW_UART_Modem_IRQHandler+0xfa>
      {
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004162:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0201 	bic.w	r2, r2, #1
 8004172:	609a      	str	r2, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	67da      	str	r2, [r3, #124]	; 0x7c
        rx_ready = 1;  /* not used RxTC callback*/
 800417a:	2301      	movs	r3, #1
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	e00a      	b.n	8004196 <HW_UART_Modem_IRQHandler+0xfa>
      }
    }
    else
    {
      /* Clear RXNE interrupt flag */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	8b1b      	ldrh	r3, [r3, #24]
 8004186:	b29a      	uxth	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f042 0208 	orr.w	r2, r2, #8
 8004190:	b292      	uxth	r2, r2
 8004192:	831a      	strh	r2, [r3, #24]
      return;
 8004194:	e022      	b.n	80041dc <HW_UART_Modem_IRQHandler+0x140>
    }
  }

  /* If error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	60fb      	str	r3, [r7, #12]
  if (errorflags != RESET)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d011      	beq.n	80041c8 <HW_UART_Modem_IRQHandler+0x12c>
  {
    /* Error on receiving */
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2201      	movs	r2, #1
 80041aa:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2202      	movs	r2, #2
 80041b2:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2208      	movs	r2, #8
 80041ba:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2204      	movs	r2, #4
 80041c2:	621a      	str	r2, [r3, #32]
    /*   *((huart->pRxBuffPtr)-1) = 0x01;   */        /*we skip the overrun case*/
    rx_ready = 0;                                     // Skipping the data if error flags are set
 80041c4:	2300      	movs	r3, #0
 80041c6:	61fb      	str	r3, [r7, #28]
  }

  if (rx_ready)
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d006      	beq.n	80041dc <HW_UART_Modem_IRQHandler+0x140>
  {
    /*character in the ring buffer*/
    receive(*((huart->pRxBuffPtr) - 1));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d2:	3b01      	subs	r3, #1
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 f85c 	bl	8004294 <receive>
  }
}
 80041dc:	3720      	adds	r7, #32
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <HW_UART_Modem_IsNewCharReceived>:
  * @brief To check if data has been received
  * @param none
  * @retval Reset no data / set data
  ******************************************************************************/
FlagStatus HW_UART_Modem_IsNewCharReceived(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ea:	f3ef 8310 	mrs	r3, PRIMASK
 80041ee:	603b      	str	r3, [r7, #0]
  return(result);
 80041f0:	683b      	ldr	r3, [r7, #0]
  FlagStatus status;


  uint32_t primask_bit = __get_PRIMASK();
 80041f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80041f4:	b672      	cpsid	i
}
 80041f6:	bf00      	nop

  __disable_irq();

  status = ((uart_context.rx_idx_toread == uart_context.rx_idx_free) ? RESET : SET);
 80041f8:	4b0c      	ldr	r3, [pc, #48]	; (800422c <HW_UART_Modem_IsNewCharReceived+0x48>)
 80041fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041fe:	4b0b      	ldr	r3, [pc, #44]	; (800422c <HW_UART_Modem_IsNewCharReceived+0x48>)
 8004200:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004204:	429a      	cmp	r2, r3
 8004206:	bf14      	ite	ne
 8004208:	2301      	movne	r3, #1
 800420a:	2300      	moveq	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	72fb      	strb	r3, [r7, #11]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f383 8810 	msr	PRIMASK, r3
}
 800421a:	bf00      	nop


  __set_PRIMASK(primask_bit);
  return status;
 800421c:	7afb      	ldrb	r3, [r7, #11]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	20000450 	.word	0x20000450

08004230 <HW_UART_Modem_GetNewChar>:
  * @brief Get the received character
  * @param none
  * @retval Return the data received
  ******************************************************************************/
uint8_t HW_UART_Modem_GetNewChar(void)
{
 8004230:	b480      	push	{r7}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
  uint8_t NewChar;
  uint8_t isfound=0;
 8004236:	2300      	movs	r3, #0
 8004238:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800423a:	f3ef 8310 	mrs	r3, PRIMASK
 800423e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004240:	68bb      	ldr	r3, [r7, #8]

  uint32_t primask_bit = __get_PRIMASK();
 8004242:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004244:	b672      	cpsid	i
}
 8004246:	bf00      	nop

  __disable_irq();

  NewChar = uart_context.buffRx[uart_context.rx_idx_toread];
 8004248:	4b11      	ldr	r3, [pc, #68]	; (8004290 <HW_UART_Modem_GetNewChar+0x60>)
 800424a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800424e:	4a10      	ldr	r2, [pc, #64]	; (8004290 <HW_UART_Modem_GetNewChar+0x60>)
 8004250:	4413      	add	r3, r2
 8004252:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8004256:	73fb      	strb	r3, [r7, #15]
  uart_context.rx_idx_toread = (uart_context.rx_idx_toread + 1) % sizeof(uart_context.buffRx);
 8004258:	4b0d      	ldr	r3, [pc, #52]	; (8004290 <HW_UART_Modem_GetNewChar+0x60>)
 800425a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800425e:	3301      	adds	r3, #1
 8004260:	b2db      	uxtb	r3, r3
 8004262:	4a0b      	ldr	r2, [pc, #44]	; (8004290 <HW_UART_Modem_GetNewChar+0x60>)
 8004264:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
  if(NewChar == (uint8_t)'+')
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	2b2b      	cmp	r3, #43	; 0x2b
 800426c:	d102      	bne.n	8004274 <HW_UART_Modem_GetNewChar+0x44>
  {
	  isfound++;
 800426e:	7dfb      	ldrb	r3, [r7, #23]
 8004270:	3301      	adds	r3, #1
 8004272:	75fb      	strb	r3, [r7, #23]
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f383 8810 	msr	PRIMASK, r3
}
 800427e:	bf00      	nop
  }

  __set_PRIMASK(primask_bit);
  return NewChar;
 8004280:	7bfb      	ldrb	r3, [r7, #15]
}
 8004282:	4618      	mov	r0, r3
 8004284:	371c      	adds	r7, #28
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	20000450 	.word	0x20000450

08004294 <receive>:
  * @brief Store in ring buffer the received character
  * @param none
  * @retval none
  ******************************************************************************/
static void receive(char rx)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	71fb      	strb	r3, [r7, #7]
  int next_free;


	/** no need to clear the RXNE flag because it is auto cleared by reading the data*/
    if(rx != '\0')   // Removing Null characters before it finds its way into the data.
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d017      	beq.n	80042d4 <receive+0x40>
    {
		uart_context.buffRx[uart_context.rx_idx_free] = rx;
 80042a4:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <receive+0x4c>)
 80042a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042aa:	4a0d      	ldr	r2, [pc, #52]	; (80042e0 <receive+0x4c>)
 80042ac:	4413      	add	r3, r2
 80042ae:	79fa      	ldrb	r2, [r7, #7]
 80042b0:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
		next_free = (uart_context.rx_idx_free + 1) % sizeof(uart_context.buffRx);
 80042b4:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <receive+0x4c>)
 80042b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042ba:	3301      	adds	r3, #1
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	60fb      	str	r3, [r7, #12]
		if (next_free != uart_context.rx_idx_toread)
 80042c0:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <receive+0x4c>)
 80042c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d003      	beq.n	80042d4 <receive+0x40>
		{
		/* this is ok to read as there is no buffer overflow in input */
			uart_context.rx_idx_free = next_free;
 80042cc:	4a04      	ldr	r2, [pc, #16]	; (80042e0 <receive+0x4c>)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
		}
    }

}
 80042d4:	bf00      	nop
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	20000450 	.word	0x20000450

080042e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80042e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800431c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80042e8:	f7ff fec6 	bl	8004078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042ec:	480c      	ldr	r0, [pc, #48]	; (8004320 <LoopForever+0x6>)
  ldr r1, =_edata
 80042ee:	490d      	ldr	r1, [pc, #52]	; (8004324 <LoopForever+0xa>)
  ldr r2, =_sidata
 80042f0:	4a0d      	ldr	r2, [pc, #52]	; (8004328 <LoopForever+0xe>)
  movs r3, #0
 80042f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042f4:	e002      	b.n	80042fc <LoopCopyDataInit>

080042f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042fa:	3304      	adds	r3, #4

080042fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004300:	d3f9      	bcc.n	80042f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004302:	4a0a      	ldr	r2, [pc, #40]	; (800432c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004304:	4c0a      	ldr	r4, [pc, #40]	; (8004330 <LoopForever+0x16>)
  movs r3, #0
 8004306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004308:	e001      	b.n	800430e <LoopFillZerobss>

0800430a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800430a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800430c:	3204      	adds	r2, #4

0800430e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800430e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004310:	d3fb      	bcc.n	800430a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004312:	f008 fca3 	bl	800cc5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004316:	f7fe fb59 	bl	80029cc <main>

0800431a <LoopForever>:

LoopForever:
    b LoopForever
 800431a:	e7fe      	b.n	800431a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800431c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004324:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8004328:	0801a458 	.word	0x0801a458
  ldr r2, =_sbss
 800432c:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8004330:	2001290c 	.word	0x2001290c

08004334 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004334:	e7fe      	b.n	8004334 <ADC1_IRQHandler>

08004336 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800433c:	2300      	movs	r3, #0
 800433e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004340:	2003      	movs	r0, #3
 8004342:	f001 feca 	bl	80060da <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004346:	200f      	movs	r0, #15
 8004348:	f7ff fe0c 	bl	8003f64 <HAL_InitTick>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d002      	beq.n	8004358 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	71fb      	strb	r3, [r7, #7]
 8004356:	e001      	b.n	800435c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004358:	f7ff fab0 	bl	80038bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800435c:	79fb      	ldrb	r3, [r7, #7]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800436c:	4b06      	ldr	r3, [pc, #24]	; (8004388 <HAL_IncTick+0x20>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	4b06      	ldr	r3, [pc, #24]	; (800438c <HAL_IncTick+0x24>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4413      	add	r3, r2
 8004378:	4a04      	ldr	r2, [pc, #16]	; (800438c <HAL_IncTick+0x24>)
 800437a:	6013      	str	r3, [r2, #0]
}
 800437c:	bf00      	nop
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	20000118 	.word	0x20000118
 800438c:	200128f8 	.word	0x200128f8

08004390 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8004394:	4b05      	ldr	r3, [pc, #20]	; (80043ac <HAL_SuspendTick+0x1c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a04      	ldr	r2, [pc, #16]	; (80043ac <HAL_SuspendTick+0x1c>)
 800439a:	f023 0302 	bic.w	r3, r3, #2
 800439e:	6013      	str	r3, [r2, #0]
}
 80043a0:	bf00      	nop
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	e000e010 	.word	0xe000e010

080043b0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80043b4:	4b05      	ldr	r3, [pc, #20]	; (80043cc <HAL_ResumeTick+0x1c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a04      	ldr	r2, [pc, #16]	; (80043cc <HAL_ResumeTick+0x1c>)
 80043ba:	f043 0302 	orr.w	r3, r3, #2
 80043be:	6013      	str	r3, [r2, #0]
}
 80043c0:	bf00      	nop
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	e000e010 	.word	0xe000e010

080043d0 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80043d4:	4b05      	ldr	r3, [pc, #20]	; (80043ec <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	4a04      	ldr	r2, [pc, #16]	; (80043ec <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80043da:	f023 0301 	bic.w	r3, r3, #1
 80043de:	6053      	str	r3, [r2, #4]
}
 80043e0:	bf00      	nop
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	e0042000 	.word	0xe0042000

080043f0 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80043f4:	4b05      	ldr	r3, [pc, #20]	; (800440c <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	4a04      	ldr	r2, [pc, #16]	; (800440c <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 80043fa:	f023 0302 	bic.w	r3, r3, #2
 80043fe:	6053      	str	r3, [r2, #4]
}
 8004400:	bf00      	nop
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	e0042000 	.word	0xe0042000

08004410 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8004414:	4b05      	ldr	r3, [pc, #20]	; (800442c <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	4a04      	ldr	r2, [pc, #16]	; (800442c <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 800441a:	f023 0304 	bic.w	r3, r3, #4
 800441e:	6053      	str	r3, [r2, #4]
}
 8004420:	bf00      	nop
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	e0042000 	.word	0xe0042000

08004430 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	609a      	str	r2, [r3, #8]
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	609a      	str	r2, [r3, #8]
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800448c:	4618      	mov	r0, r3
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3360      	adds	r3, #96	; 0x60
 80044aa:	461a      	mov	r2, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	4b08      	ldr	r3, [pc, #32]	; (80044dc <LL_ADC_SetOffset+0x44>)
 80044ba:	4013      	ands	r3, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80044d0:	bf00      	nop
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	03fff000 	.word	0x03fff000

080044e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3360      	adds	r3, #96	; 0x60
 80044ee:	461a      	mov	r2, r3
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004500:	4618      	mov	r0, r3
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	3360      	adds	r3, #96	; 0x60
 800451c:	461a      	mov	r2, r3
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	431a      	orrs	r2, r3
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004536:	bf00      	nop
 8004538:	371c      	adds	r7, #28
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	615a      	str	r2, [r3, #20]
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800458e:	b480      	push	{r7}
 8004590:	b087      	sub	sp, #28
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	3330      	adds	r3, #48	; 0x30
 800459e:	461a      	mov	r2, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	0a1b      	lsrs	r3, r3, #8
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	f003 030c 	and.w	r3, r3, #12
 80045aa:	4413      	add	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f003 031f 	and.w	r3, r3, #31
 80045b8:	211f      	movs	r1, #31
 80045ba:	fa01 f303 	lsl.w	r3, r1, r3
 80045be:	43db      	mvns	r3, r3
 80045c0:	401a      	ands	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	0e9b      	lsrs	r3, r3, #26
 80045c6:	f003 011f 	and.w	r1, r3, #31
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f003 031f 	and.w	r3, r3, #31
 80045d0:	fa01 f303 	lsl.w	r3, r1, r3
 80045d4:	431a      	orrs	r2, r3
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b087      	sub	sp, #28
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	3314      	adds	r3, #20
 80045f6:	461a      	mov	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	0e5b      	lsrs	r3, r3, #25
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	4413      	add	r3, r2
 8004604:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	0d1b      	lsrs	r3, r3, #20
 800460e:	f003 031f 	and.w	r3, r3, #31
 8004612:	2107      	movs	r1, #7
 8004614:	fa01 f303 	lsl.w	r3, r1, r3
 8004618:	43db      	mvns	r3, r3
 800461a:	401a      	ands	r2, r3
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	0d1b      	lsrs	r3, r3, #20
 8004620:	f003 031f 	and.w	r3, r3, #31
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	fa01 f303 	lsl.w	r3, r1, r3
 800462a:	431a      	orrs	r2, r3
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004630:	bf00      	nop
 8004632:	371c      	adds	r7, #28
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004654:	43db      	mvns	r3, r3
 8004656:	401a      	ands	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f003 0318 	and.w	r3, r3, #24
 800465e:	4908      	ldr	r1, [pc, #32]	; (8004680 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004660:	40d9      	lsrs	r1, r3
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	400b      	ands	r3, r1
 8004666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800466a:	431a      	orrs	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004672:	bf00      	nop
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	0007ffff 	.word	0x0007ffff

08004684 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004694:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6093      	str	r3, [r2, #8]
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046bc:	d101      	bne.n	80046c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80046e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80046e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004708:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800470c:	d101      	bne.n	8004712 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800470e:	2301      	movs	r3, #1
 8004710:	e000      	b.n	8004714 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004730:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004734:	f043 0201 	orr.w	r2, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004758:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800475c:	f043 0202 	orr.w	r2, r3, #2
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <LL_ADC_IsEnabled+0x18>
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <LL_ADC_IsEnabled+0x1a>
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d101      	bne.n	80047ae <LL_ADC_IsDisableOngoing+0x18>
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <LL_ADC_IsDisableOngoing+0x1a>
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80047d0:	f043 0204 	orr.w	r2, r3, #4
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80047f8:	f043 0210 	orr.w	r2, r3, #16
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b04      	cmp	r3, #4
 800481e:	d101      	bne.n	8004824 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004842:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004846:	f043 0220 	orr.w	r2, r3, #32
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	2b08      	cmp	r3, #8
 800486c:	d101      	bne.n	8004872 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800486e:	2301      	movs	r3, #1
 8004870:	e000      	b.n	8004874 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b088      	sub	sp, #32
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800488c:	2300      	movs	r3, #0
 800488e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e12f      	b.n	8004afa <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d109      	bne.n	80048bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff f82b 	bl	8003904 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff fef1 	bl	80046a8 <LL_ADC_IsDeepPowerDownEnabled>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d004      	beq.n	80048d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff fed7 	bl	8004684 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff ff0c 	bl	80046f8 <LL_ADC_IsInternalRegulatorEnabled>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d115      	bne.n	8004912 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff fef0 	bl	80046d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048f0:	4b84      	ldr	r3, [pc, #528]	; (8004b04 <HAL_ADC_Init+0x284>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	099b      	lsrs	r3, r3, #6
 80048f6:	4a84      	ldr	r2, [pc, #528]	; (8004b08 <HAL_ADC_Init+0x288>)
 80048f8:	fba2 2303 	umull	r2, r3, r2, r3
 80048fc:	099b      	lsrs	r3, r3, #6
 80048fe:	3301      	adds	r3, #1
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004904:	e002      	b.n	800490c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	3b01      	subs	r3, #1
 800490a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f9      	bne.n	8004906 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff feee 	bl	80046f8 <LL_ADC_IsInternalRegulatorEnabled>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10d      	bne.n	800493e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004926:	f043 0210 	orr.w	r2, r3, #16
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004932:	f043 0201 	orr.w	r2, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff ff62 	bl	800480c <LL_ADC_REG_IsConversionOngoing>
 8004948:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494e:	f003 0310 	and.w	r3, r3, #16
 8004952:	2b00      	cmp	r3, #0
 8004954:	f040 80c8 	bne.w	8004ae8 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2b00      	cmp	r3, #0
 800495c:	f040 80c4 	bne.w	8004ae8 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004964:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004968:	f043 0202 	orr.w	r2, r3, #2
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff fefb 	bl	8004770 <LL_ADC_IsEnabled>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10b      	bne.n	8004998 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004980:	4862      	ldr	r0, [pc, #392]	; (8004b0c <HAL_ADC_Init+0x28c>)
 8004982:	f7ff fef5 	bl	8004770 <LL_ADC_IsEnabled>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d105      	bne.n	8004998 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	4619      	mov	r1, r3
 8004992:	485f      	ldr	r0, [pc, #380]	; (8004b10 <HAL_ADC_Init+0x290>)
 8004994:	f7ff fd4c 	bl	8004430 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	7e5b      	ldrb	r3, [r3, #25]
 800499c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80049a2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80049a8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80049ae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049b6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80049b8:	4313      	orrs	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d106      	bne.n	80049d4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	3b01      	subs	r3, #1
 80049cc:	045b      	lsls	r3, r3, #17
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d009      	beq.n	80049f0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	4b47      	ldr	r3, [pc, #284]	; (8004b14 <HAL_ADC_Init+0x294>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	6812      	ldr	r2, [r2, #0]
 80049fe:	69b9      	ldr	r1, [r7, #24]
 8004a00:	430b      	orrs	r3, r1
 8004a02:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff feff 	bl	800480c <LL_ADC_REG_IsConversionOngoing>
 8004a0e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7ff ff20 	bl	800485a <LL_ADC_INJ_IsConversionOngoing>
 8004a1a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d140      	bne.n	8004aa4 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d13d      	bne.n	8004aa4 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	7e1b      	ldrb	r3, [r3, #24]
 8004a30:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004a32:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a3a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a4a:	f023 0306 	bic.w	r3, r3, #6
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6812      	ldr	r2, [r2, #0]
 8004a52:	69b9      	ldr	r1, [r7, #24]
 8004a54:	430b      	orrs	r3, r1
 8004a56:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d118      	bne.n	8004a94 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004a6c:	f023 0304 	bic.w	r3, r3, #4
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a78:	4311      	orrs	r1, r2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a7e:	4311      	orrs	r1, r2
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a84:	430a      	orrs	r2, r1
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f042 0201 	orr.w	r2, r2, #1
 8004a90:	611a      	str	r2, [r3, #16]
 8004a92:	e007      	b.n	8004aa4 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0201 	bic.w	r2, r2, #1
 8004aa2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d10c      	bne.n	8004ac6 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab2:	f023 010f 	bic.w	r1, r3, #15
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	1e5a      	subs	r2, r3, #1
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30
 8004ac4:	e007      	b.n	8004ad6 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 020f 	bic.w	r2, r2, #15
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ada:	f023 0303 	bic.w	r3, r3, #3
 8004ade:	f043 0201 	orr.w	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	659a      	str	r2, [r3, #88]	; 0x58
 8004ae6:	e007      	b.n	8004af8 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aec:	f043 0210 	orr.w	r2, r3, #16
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004af8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3720      	adds	r7, #32
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20000110 	.word	0x20000110
 8004b08:	053e2d63 	.word	0x053e2d63
 8004b0c:	50040000 	.word	0x50040000
 8004b10:	50040300 	.word	0x50040300
 8004b14:	fff0c007 	.word	0xfff0c007

08004b18 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e10e      	b.n	8004d48 <HAL_ADC_DeInit+0x230>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2e:	f043 0202 	orr.w	r2, r3, #2
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004b36:	2103      	movs	r1, #3
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 ff3b 	bl	80059b4 <ADC_ConversionStop>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004b50:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10a      	bne.n	8004b6e <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f001 f86d 	bl	8005c38 <ADC_Disable>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004b62:	7bfb      	ldrb	r3, [r7, #15]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d102      	bne.n	8004b6e <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	659a      	str	r2, [r3, #88]	; 0x58
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6812      	ldr	r2, [r2, #0]
 8004b78:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004b7c:	f023 0307 	bic.w	r3, r3, #7
 8004b80:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004b8a:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 42a0 	bic.w	r2, r2, #1342177280	; 0x50000000
 8004b9a:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004baa:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_FIELDS);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f002 2280 	and.w	r2, r2, #2147516416	; 0x80008000
 8004bba:	60da      	str	r2, [r3, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004bca:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6812      	ldr	r2, [r2, #0]
 8004bd6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004bda:	f023 0307 	bic.w	r3, r3, #7
 8004bde:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695a      	ldr	r2, [r3, #20]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004bee:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699a      	ldr	r2, [r3, #24]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 8004bfe:	619a      	str	r2, [r3, #24]
            ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 |
            ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10);

  /* Reset register TR1 */
  CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6a1a      	ldr	r2, [r3, #32]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8004c0e:	621a      	str	r2, [r3, #32]

  /* Reset register TR2 */
  CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8004c1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset register TR3 */
  CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8004c2e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4b45      	ldr	r3, [pc, #276]	; (8004d50 <HAL_ADC_DeInit+0x238>)
 8004c3c:	400b      	ands	r3, r1
 8004c3e:	6313      	str	r3, [r2, #48]	; 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	4b42      	ldr	r3, [pc, #264]	; (8004d54 <HAL_ADC_DeInit+0x23c>)
 8004c4c:	400b      	ands	r3, r1
 8004c4e:	6353      	str	r3, [r2, #52]	; 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	4b3e      	ldr	r3, [pc, #248]	; (8004d54 <HAL_ADC_DeInit+0x23c>)
 8004c5c:	400b      	ands	r3, r1
 8004c5e:	6393      	str	r3, [r2, #56]	; 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6812      	ldr	r2, [r2, #0]
 8004c6a:	f423 63fb 	bic.w	r3, r3, #2008	; 0x7d8
 8004c6e:	f023 0307 	bic.w	r3, r3, #7
 8004c72:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4b36      	ldr	r3, [pc, #216]	; (8004d58 <HAL_ADC_DeInit+0x240>)
 8004c80:	400b      	ands	r3, r1
 8004c82:	6613      	str	r3, [r2, #96]	; 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	4b32      	ldr	r3, [pc, #200]	; (8004d58 <HAL_ADC_DeInit+0x240>)
 8004c90:	400b      	ands	r3, r1
 8004c92:	6653      	str	r3, [r2, #100]	; 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	4b2e      	ldr	r3, [pc, #184]	; (8004d58 <HAL_ADC_DeInit+0x240>)
 8004ca0:	400b      	ands	r3, r1
 8004ca2:	6693      	str	r3, [r2, #104]	; 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	4b2a      	ldr	r3, [pc, #168]	; (8004d58 <HAL_ADC_DeInit+0x240>)
 8004cb0:	400b      	ands	r3, r1
 8004cb2:	66d3      	str	r3, [r2, #108]	; 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6812      	ldr	r2, [r2, #0]
 8004cc0:	0cdb      	lsrs	r3, r3, #19
 8004cc2:	04db      	lsls	r3, r3, #19
 8004cc4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6812      	ldr	r2, [r2, #0]
 8004cd4:	0cdb      	lsrs	r3, r3, #19
 8004cd6:	04db      	lsls	r3, r3, #19
 8004cd8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6812      	ldr	r2, [r2, #0]
 8004ce8:	0cdb      	lsrs	r3, r3, #19
 8004cea:	04db      	lsls	r3, r3, #19
 8004cec:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 8004d00:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d04:	4815      	ldr	r0, [pc, #84]	; (8004d5c <HAL_ADC_DeInit+0x244>)
 8004d06:	f7ff fd33 	bl	8004770 <LL_ADC_IsEnabled>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <HAL_ADC_DeInit+0x20e>
      - multimode related parameters (when this feature is available): MDMA,
        DMACFG, DELAY, DUAL (set by HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8004d10:	4b13      	ldr	r3, [pc, #76]	; (8004d60 <HAL_ADC_DeInit+0x248>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	4a12      	ldr	r2, [pc, #72]	; (8004d60 <HAL_ADC_DeInit+0x248>)
 8004d16:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d1e:	6093      	str	r3, [r2, #8]

    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7fe fe75 	bl	8003a10 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	661a      	str	r2, [r3, #96]	; 0x60
  hadc->InjectionConfig.ChannelCount = 0;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	e0820830 	.word	0xe0820830
 8004d54:	e0820820 	.word	0xe0820820
 8004d58:	03fff000 	.word	0x03fff000
 8004d5c:	50040000 	.word	0x50040000
 8004d60:	50040300 	.word	0x50040300

08004d64 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff fd4b 	bl	800480c <LL_ADC_REG_IsConversionOngoing>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d14f      	bne.n	8004e1c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_ADC_Start+0x26>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e04b      	b.n	8004e22 <HAL_ADC_Start+0xbe>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 feca 	bl	8005b2c <ADC_Enable>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d137      	bne.n	8004e12 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004daa:	f023 0301 	bic.w	r3, r3, #1
 8004dae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc2:	d106      	bne.n	8004dd2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc8:	f023 0206 	bic.w	r2, r3, #6
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	65da      	str	r2, [r3, #92]	; 0x5c
 8004dd0:	e002      	b.n	8004dd8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	221c      	movs	r2, #28
 8004dde:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d007      	beq.n	8004e06 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004dfe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff fcd6 	bl	80047bc <LL_ADC_REG_StartConversion>
 8004e10:	e006      	b.n	8004e20 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004e1a:	e001      	b.n	8004e20 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d101      	bne.n	8004e40 <HAL_ADC_Stop+0x16>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e023      	b.n	8004e88 <HAL_ADC_Stop+0x5e>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004e48:	2103      	movs	r1, #3
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fdb2 	bl	80059b4 <ADC_ConversionStop>
 8004e50:	4603      	mov	r3, r0
 8004e52:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d111      	bne.n	8004e7e <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 feec 	bl	8005c38 <ADC_Disable>
 8004e60:	4603      	mov	r3, r0
 8004e62:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004e72:	f023 0301 	bic.w	r3, r3, #1
 8004e76:	f043 0201 	orr.w	r2, r3, #1
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	2b08      	cmp	r3, #8
 8004ea0:	d102      	bne.n	8004ea8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	e010      	b.n	8004eca <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d007      	beq.n	8004ec6 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eba:	f043 0220 	orr.w	r2, r3, #32
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e06f      	b.n	8004fa6 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8004ec6:	2304      	movs	r3, #4
 8004ec8:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004eca:	f7ff f856 	bl	8003f7a <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004ed0:	e021      	b.n	8004f16 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed8:	d01d      	beq.n	8004f16 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004eda:	f7ff f84e 	bl	8003f7a <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d302      	bcc.n	8004ef0 <HAL_ADC_PollForConversion+0x60>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d112      	bne.n	8004f16 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10b      	bne.n	8004f16 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f02:	f043 0204 	orr.w	r2, r3, #4
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e047      	b.n	8004fa6 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0d6      	beq.n	8004ed2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff fb17 	bl	8004568 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d01c      	beq.n	8004f7a <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	7e5b      	ldrb	r3, [r3, #25]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d118      	bne.n	8004f7a <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0308 	and.w	r3, r3, #8
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	d111      	bne.n	8004f7a <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d105      	bne.n	8004f7a <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f72:	f043 0201 	orr.w	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d104      	bne.n	8004f92 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2208      	movs	r2, #8
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	e008      	b.n	8004fa4 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d103      	bne.n	8004fa4 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	220c      	movs	r2, #12
 8004fa2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
	...

08004fb0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7ff fc23 	bl	800480c <LL_ADC_REG_IsConversionOngoing>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d167      	bne.n	800509c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_ADC_Start_DMA+0x2a>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e063      	b.n	80050a2 <HAL_ADC_Start_DMA+0xf2>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 fda2 	bl	8005b2c <ADC_Enable>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004fec:	7dfb      	ldrb	r3, [r7, #23]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d14f      	bne.n	8005092 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ffa:	f023 0301 	bic.w	r3, r3, #1
 8004ffe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d006      	beq.n	8005020 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005016:	f023 0206 	bic.w	r2, r3, #6
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	65da      	str	r2, [r3, #92]	; 0x5c
 800501e:	e002      	b.n	8005026 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800502a:	4a20      	ldr	r2, [pc, #128]	; (80050ac <HAL_ADC_Start_DMA+0xfc>)
 800502c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005032:	4a1f      	ldr	r2, [pc, #124]	; (80050b0 <HAL_ADC_Start_DMA+0x100>)
 8005034:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503a:	4a1e      	ldr	r2, [pc, #120]	; (80050b4 <HAL_ADC_Start_DMA+0x104>)
 800503c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	221c      	movs	r2, #28
 8005044:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f042 0210 	orr.w	r2, r2, #16
 800505c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 0201 	orr.w	r2, r2, #1
 800506c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3340      	adds	r3, #64	; 0x40
 8005078:	4619      	mov	r1, r3
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f001 f9b9 	bl	80063f4 <HAL_DMA_Start_IT>
 8005082:	4603      	mov	r3, r0
 8005084:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fb96 	bl	80047bc <LL_ADC_REG_StartConversion>
 8005090:	e006      	b.n	80050a0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800509a:	e001      	b.n	80050a0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800509c:	2302      	movs	r3, #2
 800509e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80050a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	08005cf7 	.word	0x08005cf7
 80050b0:	08005dcf 	.word	0x08005dcf
 80050b4:	08005deb 	.word	0x08005deb

080050b8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d101      	bne.n	80050ce <HAL_ADC_Stop_DMA+0x16>
 80050ca:	2302      	movs	r3, #2
 80050cc:	e051      	b.n	8005172 <HAL_ADC_Stop_DMA+0xba>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80050d6:	2103      	movs	r1, #3
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 fc6b 	bl	80059b4 <ADC_ConversionStop>
 80050de:	4603      	mov	r3, r0
 80050e0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80050e2:	7bfb      	ldrb	r3, [r7, #15]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d13f      	bne.n	8005168 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0201 	bic.w	r2, r2, #1
 80050f6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d10f      	bne.n	8005126 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800510a:	4618      	mov	r0, r3
 800510c:	f001 f9d2 	bl	80064b4 <HAL_DMA_Abort>
 8005110:	4603      	mov	r3, r0
 8005112:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005114:	7bfb      	ldrb	r3, [r7, #15]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d005      	beq.n	8005126 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0210 	bic.w	r2, r2, #16
 8005134:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8005136:	7bfb      	ldrb	r3, [r7, #15]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d105      	bne.n	8005148 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fd7b 	bl	8005c38 <ADC_Disable>
 8005142:	4603      	mov	r3, r0
 8005144:	73fb      	strb	r3, [r7, #15]
 8005146:	e002      	b.n	800514e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fd75 	bl	8005c38 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800514e:	7bfb      	ldrb	r3, [r7, #15]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d109      	bne.n	8005168 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005158:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800515c:	f023 0301 	bic.w	r3, r3, #1
 8005160:	f043 0201 	orr.w	r2, r3, #1
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005170:	7bfb      	ldrb	r3, [r7, #15]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005188:	4618      	mov	r0, r3
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b0b6      	sub	sp, #216	; 0xd8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80051cc:	2300      	movs	r3, #0
 80051ce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d101      	bne.n	80051de <HAL_ADC_ConfigChannel+0x22>
 80051da:	2302      	movs	r3, #2
 80051dc:	e3d5      	b.n	800598a <HAL_ADC_ConfigChannel+0x7ce>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff fb0e 	bl	800480c <LL_ADC_REG_IsConversionOngoing>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f040 83ba 	bne.w	800596c <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b05      	cmp	r3, #5
 80051fe:	d824      	bhi.n	800524a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	3b02      	subs	r3, #2
 8005206:	2b03      	cmp	r3, #3
 8005208:	d81b      	bhi.n	8005242 <HAL_ADC_ConfigChannel+0x86>
 800520a:	a201      	add	r2, pc, #4	; (adr r2, 8005210 <HAL_ADC_ConfigChannel+0x54>)
 800520c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005210:	08005221 	.word	0x08005221
 8005214:	08005229 	.word	0x08005229
 8005218:	08005231 	.word	0x08005231
 800521c:	08005239 	.word	0x08005239
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	220c      	movs	r2, #12
 8005224:	605a      	str	r2, [r3, #4]
          break;
 8005226:	e011      	b.n	800524c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2212      	movs	r2, #18
 800522c:	605a      	str	r2, [r3, #4]
          break;
 800522e:	e00d      	b.n	800524c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2218      	movs	r2, #24
 8005234:	605a      	str	r2, [r3, #4]
          break;
 8005236:	e009      	b.n	800524c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800523e:	605a      	str	r2, [r3, #4]
          break;
 8005240:	e004      	b.n	800524c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2206      	movs	r2, #6
 8005246:	605a      	str	r2, [r3, #4]
          break;
 8005248:	e000      	b.n	800524c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800524a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	6859      	ldr	r1, [r3, #4]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	461a      	mov	r2, r3
 800525a:	f7ff f998 	bl	800458e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff fad2 	bl	800480c <LL_ADC_REG_IsConversionOngoing>
 8005268:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff faf2 	bl	800485a <LL_ADC_INJ_IsConversionOngoing>
 8005276:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800527a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800527e:	2b00      	cmp	r3, #0
 8005280:	f040 81c1 	bne.w	8005606 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005284:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005288:	2b00      	cmp	r3, #0
 800528a:	f040 81bc 	bne.w	8005606 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005296:	d10f      	bne.n	80052b8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6818      	ldr	r0, [r3, #0]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2200      	movs	r2, #0
 80052a2:	4619      	mov	r1, r3
 80052a4:	f7ff f99f 	bl	80045e6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff f946 	bl	8004542 <LL_ADC_SetSamplingTimeCommonConfig>
 80052b6:	e00e      	b.n	80052d6 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	6819      	ldr	r1, [r3, #0]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	461a      	mov	r2, r3
 80052c6:	f7ff f98e 	bl	80045e6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2100      	movs	r1, #0
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7ff f936 	bl	8004542 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	695a      	ldr	r2, [r3, #20]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	08db      	lsrs	r3, r3, #3
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d00a      	beq.n	800530e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6818      	ldr	r0, [r3, #0]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	6919      	ldr	r1, [r3, #16]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005308:	f7ff f8c6 	bl	8004498 <LL_ADC_SetOffset>
 800530c:	e17b      	b.n	8005606 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2100      	movs	r1, #0
 8005314:	4618      	mov	r0, r3
 8005316:	f7ff f8e3 	bl	80044e0 <LL_ADC_GetOffsetChannel>
 800531a:	4603      	mov	r3, r0
 800531c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10a      	bne.n	800533a <HAL_ADC_ConfigChannel+0x17e>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2100      	movs	r1, #0
 800532a:	4618      	mov	r0, r3
 800532c:	f7ff f8d8 	bl	80044e0 <LL_ADC_GetOffsetChannel>
 8005330:	4603      	mov	r3, r0
 8005332:	0e9b      	lsrs	r3, r3, #26
 8005334:	f003 021f 	and.w	r2, r3, #31
 8005338:	e01e      	b.n	8005378 <HAL_ADC_ConfigChannel+0x1bc>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2100      	movs	r1, #0
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff f8cd 	bl	80044e0 <LL_ADC_GetOffsetChannel>
 8005346:	4603      	mov	r3, r0
 8005348:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800534c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005350:	fa93 f3a3 	rbit	r3, r3
 8005354:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005358:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800535c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005360:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8005368:	2320      	movs	r3, #32
 800536a:	e004      	b.n	8005376 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800536c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005370:	fab3 f383 	clz	r3, r3
 8005374:	b2db      	uxtb	r3, r3
 8005376:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005380:	2b00      	cmp	r3, #0
 8005382:	d105      	bne.n	8005390 <HAL_ADC_ConfigChannel+0x1d4>
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	0e9b      	lsrs	r3, r3, #26
 800538a:	f003 031f 	and.w	r3, r3, #31
 800538e:	e018      	b.n	80053c2 <HAL_ADC_ConfigChannel+0x206>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005398:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800539c:	fa93 f3a3 	rbit	r3, r3
 80053a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80053a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80053ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80053b4:	2320      	movs	r3, #32
 80053b6:	e004      	b.n	80053c2 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80053b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80053bc:	fab3 f383 	clz	r3, r3
 80053c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d106      	bne.n	80053d4 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2200      	movs	r2, #0
 80053cc:	2100      	movs	r1, #0
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff f89c 	bl	800450c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2101      	movs	r1, #1
 80053da:	4618      	mov	r0, r3
 80053dc:	f7ff f880 	bl	80044e0 <LL_ADC_GetOffsetChannel>
 80053e0:	4603      	mov	r3, r0
 80053e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10a      	bne.n	8005400 <HAL_ADC_ConfigChannel+0x244>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2101      	movs	r1, #1
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7ff f875 	bl	80044e0 <LL_ADC_GetOffsetChannel>
 80053f6:	4603      	mov	r3, r0
 80053f8:	0e9b      	lsrs	r3, r3, #26
 80053fa:	f003 021f 	and.w	r2, r3, #31
 80053fe:	e01e      	b.n	800543e <HAL_ADC_ConfigChannel+0x282>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2101      	movs	r1, #1
 8005406:	4618      	mov	r0, r3
 8005408:	f7ff f86a 	bl	80044e0 <LL_ADC_GetOffsetChannel>
 800540c:	4603      	mov	r3, r0
 800540e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005412:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005416:	fa93 f3a3 	rbit	r3, r3
 800541a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800541e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005422:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005426:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800542e:	2320      	movs	r3, #32
 8005430:	e004      	b.n	800543c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8005432:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005436:	fab3 f383 	clz	r3, r3
 800543a:	b2db      	uxtb	r3, r3
 800543c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005446:	2b00      	cmp	r3, #0
 8005448:	d105      	bne.n	8005456 <HAL_ADC_ConfigChannel+0x29a>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	0e9b      	lsrs	r3, r3, #26
 8005450:	f003 031f 	and.w	r3, r3, #31
 8005454:	e018      	b.n	8005488 <HAL_ADC_ConfigChannel+0x2cc>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005462:	fa93 f3a3 	rbit	r3, r3
 8005466:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800546a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800546e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005472:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800547a:	2320      	movs	r3, #32
 800547c:	e004      	b.n	8005488 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800547e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005482:	fab3 f383 	clz	r3, r3
 8005486:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005488:	429a      	cmp	r2, r3
 800548a:	d106      	bne.n	800549a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2200      	movs	r2, #0
 8005492:	2101      	movs	r1, #1
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff f839 	bl	800450c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2102      	movs	r1, #2
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7ff f81d 	bl	80044e0 <LL_ADC_GetOffsetChannel>
 80054a6:	4603      	mov	r3, r0
 80054a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10a      	bne.n	80054c6 <HAL_ADC_ConfigChannel+0x30a>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2102      	movs	r1, #2
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7ff f812 	bl	80044e0 <LL_ADC_GetOffsetChannel>
 80054bc:	4603      	mov	r3, r0
 80054be:	0e9b      	lsrs	r3, r3, #26
 80054c0:	f003 021f 	and.w	r2, r3, #31
 80054c4:	e01e      	b.n	8005504 <HAL_ADC_ConfigChannel+0x348>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2102      	movs	r1, #2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff f807 	bl	80044e0 <LL_ADC_GetOffsetChannel>
 80054d2:	4603      	mov	r3, r0
 80054d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054dc:	fa93 f3a3 	rbit	r3, r3
 80054e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80054e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80054ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80054f4:	2320      	movs	r3, #32
 80054f6:	e004      	b.n	8005502 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80054f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054fc:	fab3 f383 	clz	r3, r3
 8005500:	b2db      	uxtb	r3, r3
 8005502:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800550c:	2b00      	cmp	r3, #0
 800550e:	d105      	bne.n	800551c <HAL_ADC_ConfigChannel+0x360>
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	0e9b      	lsrs	r3, r3, #26
 8005516:	f003 031f 	and.w	r3, r3, #31
 800551a:	e016      	b.n	800554a <HAL_ADC_ConfigChannel+0x38e>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005524:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005528:	fa93 f3a3 	rbit	r3, r3
 800552c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800552e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005530:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800553c:	2320      	movs	r3, #32
 800553e:	e004      	b.n	800554a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8005540:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005544:	fab3 f383 	clz	r3, r3
 8005548:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800554a:	429a      	cmp	r2, r3
 800554c:	d106      	bne.n	800555c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2200      	movs	r2, #0
 8005554:	2102      	movs	r1, #2
 8005556:	4618      	mov	r0, r3
 8005558:	f7fe ffd8 	bl	800450c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2103      	movs	r1, #3
 8005562:	4618      	mov	r0, r3
 8005564:	f7fe ffbc 	bl	80044e0 <LL_ADC_GetOffsetChannel>
 8005568:	4603      	mov	r3, r0
 800556a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10a      	bne.n	8005588 <HAL_ADC_ConfigChannel+0x3cc>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2103      	movs	r1, #3
 8005578:	4618      	mov	r0, r3
 800557a:	f7fe ffb1 	bl	80044e0 <LL_ADC_GetOffsetChannel>
 800557e:	4603      	mov	r3, r0
 8005580:	0e9b      	lsrs	r3, r3, #26
 8005582:	f003 021f 	and.w	r2, r3, #31
 8005586:	e017      	b.n	80055b8 <HAL_ADC_ConfigChannel+0x3fc>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2103      	movs	r1, #3
 800558e:	4618      	mov	r0, r3
 8005590:	f7fe ffa6 	bl	80044e0 <LL_ADC_GetOffsetChannel>
 8005594:	4603      	mov	r3, r0
 8005596:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800559a:	fa93 f3a3 	rbit	r3, r3
 800559e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80055a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055a2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80055a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80055aa:	2320      	movs	r3, #32
 80055ac:	e003      	b.n	80055b6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80055ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055b0:	fab3 f383 	clz	r3, r3
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d105      	bne.n	80055d0 <HAL_ADC_ConfigChannel+0x414>
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	0e9b      	lsrs	r3, r3, #26
 80055ca:	f003 031f 	and.w	r3, r3, #31
 80055ce:	e011      	b.n	80055f4 <HAL_ADC_ConfigChannel+0x438>
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055d8:	fa93 f3a3 	rbit	r3, r3
 80055dc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80055de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80055e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80055e8:	2320      	movs	r3, #32
 80055ea:	e003      	b.n	80055f4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80055ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ee:	fab3 f383 	clz	r3, r3
 80055f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d106      	bne.n	8005606 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2200      	movs	r2, #0
 80055fe:	2103      	movs	r1, #3
 8005600:	4618      	mov	r0, r3
 8005602:	f7fe ff83 	bl	800450c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff f8b0 	bl	8004770 <LL_ADC_IsEnabled>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	f040 8140 	bne.w	8005898 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6818      	ldr	r0, [r3, #0]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	6819      	ldr	r1, [r3, #0]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	461a      	mov	r2, r3
 8005626:	f7ff f809 	bl	800463c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	4a8f      	ldr	r2, [pc, #572]	; (800586c <HAL_ADC_ConfigChannel+0x6b0>)
 8005630:	4293      	cmp	r3, r2
 8005632:	f040 8131 	bne.w	8005898 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10b      	bne.n	800565e <HAL_ADC_ConfigChannel+0x4a2>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	0e9b      	lsrs	r3, r3, #26
 800564c:	3301      	adds	r3, #1
 800564e:	f003 031f 	and.w	r3, r3, #31
 8005652:	2b09      	cmp	r3, #9
 8005654:	bf94      	ite	ls
 8005656:	2301      	movls	r3, #1
 8005658:	2300      	movhi	r3, #0
 800565a:	b2db      	uxtb	r3, r3
 800565c:	e019      	b.n	8005692 <HAL_ADC_ConfigChannel+0x4d6>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005666:	fa93 f3a3 	rbit	r3, r3
 800566a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800566c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800566e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005670:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8005676:	2320      	movs	r3, #32
 8005678:	e003      	b.n	8005682 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800567a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800567c:	fab3 f383 	clz	r3, r3
 8005680:	b2db      	uxtb	r3, r3
 8005682:	3301      	adds	r3, #1
 8005684:	f003 031f 	and.w	r3, r3, #31
 8005688:	2b09      	cmp	r3, #9
 800568a:	bf94      	ite	ls
 800568c:	2301      	movls	r3, #1
 800568e:	2300      	movhi	r3, #0
 8005690:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005692:	2b00      	cmp	r3, #0
 8005694:	d079      	beq.n	800578a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d107      	bne.n	80056b2 <HAL_ADC_ConfigChannel+0x4f6>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	0e9b      	lsrs	r3, r3, #26
 80056a8:	3301      	adds	r3, #1
 80056aa:	069b      	lsls	r3, r3, #26
 80056ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056b0:	e015      	b.n	80056de <HAL_ADC_ConfigChannel+0x522>
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056ba:	fa93 f3a3 	rbit	r3, r3
 80056be:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80056c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80056c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80056ca:	2320      	movs	r3, #32
 80056cc:	e003      	b.n	80056d6 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80056ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056d0:	fab3 f383 	clz	r3, r3
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	3301      	adds	r3, #1
 80056d8:	069b      	lsls	r3, r3, #26
 80056da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d109      	bne.n	80056fe <HAL_ADC_ConfigChannel+0x542>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	0e9b      	lsrs	r3, r3, #26
 80056f0:	3301      	adds	r3, #1
 80056f2:	f003 031f 	and.w	r3, r3, #31
 80056f6:	2101      	movs	r1, #1
 80056f8:	fa01 f303 	lsl.w	r3, r1, r3
 80056fc:	e017      	b.n	800572e <HAL_ADC_ConfigChannel+0x572>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005706:	fa93 f3a3 	rbit	r3, r3
 800570a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800570c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800570e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8005716:	2320      	movs	r3, #32
 8005718:	e003      	b.n	8005722 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800571a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800571c:	fab3 f383 	clz	r3, r3
 8005720:	b2db      	uxtb	r3, r3
 8005722:	3301      	adds	r3, #1
 8005724:	f003 031f 	and.w	r3, r3, #31
 8005728:	2101      	movs	r1, #1
 800572a:	fa01 f303 	lsl.w	r3, r1, r3
 800572e:	ea42 0103 	orr.w	r1, r2, r3
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10a      	bne.n	8005754 <HAL_ADC_ConfigChannel+0x598>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	0e9b      	lsrs	r3, r3, #26
 8005744:	3301      	adds	r3, #1
 8005746:	f003 021f 	and.w	r2, r3, #31
 800574a:	4613      	mov	r3, r2
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	4413      	add	r3, r2
 8005750:	051b      	lsls	r3, r3, #20
 8005752:	e018      	b.n	8005786 <HAL_ADC_ConfigChannel+0x5ca>
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800575a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575c:	fa93 f3a3 	rbit	r3, r3
 8005760:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005764:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800576c:	2320      	movs	r3, #32
 800576e:	e003      	b.n	8005778 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8005770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005772:	fab3 f383 	clz	r3, r3
 8005776:	b2db      	uxtb	r3, r3
 8005778:	3301      	adds	r3, #1
 800577a:	f003 021f 	and.w	r2, r3, #31
 800577e:	4613      	mov	r3, r2
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	4413      	add	r3, r2
 8005784:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005786:	430b      	orrs	r3, r1
 8005788:	e081      	b.n	800588e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005792:	2b00      	cmp	r3, #0
 8005794:	d107      	bne.n	80057a6 <HAL_ADC_ConfigChannel+0x5ea>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	0e9b      	lsrs	r3, r3, #26
 800579c:	3301      	adds	r3, #1
 800579e:	069b      	lsls	r3, r3, #26
 80057a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80057a4:	e015      	b.n	80057d2 <HAL_ADC_ConfigChannel+0x616>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ae:	fa93 f3a3 	rbit	r3, r3
 80057b2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80057b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80057be:	2320      	movs	r3, #32
 80057c0:	e003      	b.n	80057ca <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	fab3 f383 	clz	r3, r3
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	3301      	adds	r3, #1
 80057cc:	069b      	lsls	r3, r3, #26
 80057ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d109      	bne.n	80057f2 <HAL_ADC_ConfigChannel+0x636>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	0e9b      	lsrs	r3, r3, #26
 80057e4:	3301      	adds	r3, #1
 80057e6:	f003 031f 	and.w	r3, r3, #31
 80057ea:	2101      	movs	r1, #1
 80057ec:	fa01 f303 	lsl.w	r3, r1, r3
 80057f0:	e017      	b.n	8005822 <HAL_ADC_ConfigChannel+0x666>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	fa93 f3a3 	rbit	r3, r3
 80057fe:	61fb      	str	r3, [r7, #28]
  return result;
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800580a:	2320      	movs	r3, #32
 800580c:	e003      	b.n	8005816 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	fab3 f383 	clz	r3, r3
 8005814:	b2db      	uxtb	r3, r3
 8005816:	3301      	adds	r3, #1
 8005818:	f003 031f 	and.w	r3, r3, #31
 800581c:	2101      	movs	r1, #1
 800581e:	fa01 f303 	lsl.w	r3, r1, r3
 8005822:	ea42 0103 	orr.w	r1, r2, r3
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10d      	bne.n	800584e <HAL_ADC_ConfigChannel+0x692>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	0e9b      	lsrs	r3, r3, #26
 8005838:	3301      	adds	r3, #1
 800583a:	f003 021f 	and.w	r2, r3, #31
 800583e:	4613      	mov	r3, r2
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	4413      	add	r3, r2
 8005844:	3b1e      	subs	r3, #30
 8005846:	051b      	lsls	r3, r3, #20
 8005848:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800584c:	e01e      	b.n	800588c <HAL_ADC_ConfigChannel+0x6d0>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	fa93 f3a3 	rbit	r3, r3
 800585a:	613b      	str	r3, [r7, #16]
  return result;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d104      	bne.n	8005870 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8005866:	2320      	movs	r3, #32
 8005868:	e006      	b.n	8005878 <HAL_ADC_ConfigChannel+0x6bc>
 800586a:	bf00      	nop
 800586c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	fab3 f383 	clz	r3, r3
 8005876:	b2db      	uxtb	r3, r3
 8005878:	3301      	adds	r3, #1
 800587a:	f003 021f 	and.w	r2, r3, #31
 800587e:	4613      	mov	r3, r2
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	4413      	add	r3, r2
 8005884:	3b1e      	subs	r3, #30
 8005886:	051b      	lsls	r3, r3, #20
 8005888:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800588c:	430b      	orrs	r3, r1
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	6892      	ldr	r2, [r2, #8]
 8005892:	4619      	mov	r1, r3
 8005894:	f7fe fea7 	bl	80045e6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	4b3d      	ldr	r3, [pc, #244]	; (8005994 <HAL_ADC_ConfigChannel+0x7d8>)
 800589e:	4013      	ands	r3, r2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d06c      	beq.n	800597e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058a4:	483c      	ldr	r0, [pc, #240]	; (8005998 <HAL_ADC_ConfigChannel+0x7dc>)
 80058a6:	f7fe fde9 	bl	800447c <LL_ADC_GetCommonPathInternalCh>
 80058aa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a3a      	ldr	r2, [pc, #232]	; (800599c <HAL_ADC_ConfigChannel+0x7e0>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d127      	bne.n	8005908 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80058b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d121      	bne.n	8005908 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a35      	ldr	r2, [pc, #212]	; (80059a0 <HAL_ADC_ConfigChannel+0x7e4>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d157      	bne.n	800597e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80058d6:	4619      	mov	r1, r3
 80058d8:	482f      	ldr	r0, [pc, #188]	; (8005998 <HAL_ADC_ConfigChannel+0x7dc>)
 80058da:	f7fe fdbc 	bl	8004456 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80058de:	4b31      	ldr	r3, [pc, #196]	; (80059a4 <HAL_ADC_ConfigChannel+0x7e8>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	099b      	lsrs	r3, r3, #6
 80058e4:	4a30      	ldr	r2, [pc, #192]	; (80059a8 <HAL_ADC_ConfigChannel+0x7ec>)
 80058e6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ea:	099b      	lsrs	r3, r3, #6
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	4613      	mov	r3, r2
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	4413      	add	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80058f8:	e002      	b.n	8005900 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	3b01      	subs	r3, #1
 80058fe:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1f9      	bne.n	80058fa <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005906:	e03a      	b.n	800597e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a27      	ldr	r2, [pc, #156]	; (80059ac <HAL_ADC_ConfigChannel+0x7f0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d113      	bne.n	800593a <HAL_ADC_ConfigChannel+0x77e>
 8005912:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10d      	bne.n	800593a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a1f      	ldr	r2, [pc, #124]	; (80059a0 <HAL_ADC_ConfigChannel+0x7e4>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d12a      	bne.n	800597e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005928:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800592c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005930:	4619      	mov	r1, r3
 8005932:	4819      	ldr	r0, [pc, #100]	; (8005998 <HAL_ADC_ConfigChannel+0x7dc>)
 8005934:	f7fe fd8f 	bl	8004456 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005938:	e021      	b.n	800597e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1c      	ldr	r2, [pc, #112]	; (80059b0 <HAL_ADC_ConfigChannel+0x7f4>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d11c      	bne.n	800597e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005944:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d116      	bne.n	800597e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a12      	ldr	r2, [pc, #72]	; (80059a0 <HAL_ADC_ConfigChannel+0x7e4>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d111      	bne.n	800597e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800595a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800595e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005962:	4619      	mov	r1, r3
 8005964:	480c      	ldr	r0, [pc, #48]	; (8005998 <HAL_ADC_ConfigChannel+0x7dc>)
 8005966:	f7fe fd76 	bl	8004456 <LL_ADC_SetCommonPathInternalCh>
 800596a:	e008      	b.n	800597e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005970:	f043 0220 	orr.w	r2, r3, #32
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005986:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800598a:	4618      	mov	r0, r3
 800598c:	37d8      	adds	r7, #216	; 0xd8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	80080000 	.word	0x80080000
 8005998:	50040300 	.word	0x50040300
 800599c:	c7520000 	.word	0xc7520000
 80059a0:	50040000 	.word	0x50040000
 80059a4:	20000110 	.word	0x20000110
 80059a8:	053e2d63 	.word	0x053e2d63
 80059ac:	cb840000 	.word	0xcb840000
 80059b0:	80000001 	.word	0x80000001

080059b4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80059be:	2300      	movs	r3, #0
 80059c0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fe ff1e 	bl	800480c <LL_ADC_REG_IsConversionOngoing>
 80059d0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fe ff3f 	bl	800485a <LL_ADC_INJ_IsConversionOngoing>
 80059dc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d103      	bne.n	80059ec <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 8098 	beq.w	8005b1c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d02a      	beq.n	8005a50 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	7e5b      	ldrb	r3, [r3, #25]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d126      	bne.n	8005a50 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	7e1b      	ldrb	r3, [r3, #24]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d122      	bne.n	8005a50 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005a0e:	e014      	b.n	8005a3a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4a45      	ldr	r2, [pc, #276]	; (8005b28 <ADC_ConversionStop+0x174>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d90d      	bls.n	8005a34 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1c:	f043 0210 	orr.w	r2, r3, #16
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a28:	f043 0201 	orr.w	r2, r3, #1
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e074      	b.n	8005b1e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	3301      	adds	r3, #1
 8005a38:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a44:	2b40      	cmp	r3, #64	; 0x40
 8005a46:	d1e3      	bne.n	8005a10 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2240      	movs	r2, #64	; 0x40
 8005a4e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d014      	beq.n	8005a80 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe fed6 	bl	800480c <LL_ADC_REG_IsConversionOngoing>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00c      	beq.n	8005a80 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fe fe93 	bl	8004796 <LL_ADC_IsDisableOngoing>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d104      	bne.n	8005a80 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7fe feb2 	bl	80047e4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d014      	beq.n	8005ab0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fe fee5 	bl	800485a <LL_ADC_INJ_IsConversionOngoing>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00c      	beq.n	8005ab0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fe fe7b 	bl	8004796 <LL_ADC_IsDisableOngoing>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d104      	bne.n	8005ab0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7fe fec1 	bl	8004832 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d005      	beq.n	8005ac2 <ADC_ConversionStop+0x10e>
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	2b03      	cmp	r3, #3
 8005aba:	d105      	bne.n	8005ac8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005abc:	230c      	movs	r3, #12
 8005abe:	617b      	str	r3, [r7, #20]
        break;
 8005ac0:	e005      	b.n	8005ace <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005ac2:	2308      	movs	r3, #8
 8005ac4:	617b      	str	r3, [r7, #20]
        break;
 8005ac6:	e002      	b.n	8005ace <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005ac8:	2304      	movs	r3, #4
 8005aca:	617b      	str	r3, [r7, #20]
        break;
 8005acc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005ace:	f7fe fa54 	bl	8003f7a <HAL_GetTick>
 8005ad2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005ad4:	e01b      	b.n	8005b0e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005ad6:	f7fe fa50 	bl	8003f7a <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b05      	cmp	r3, #5
 8005ae2:	d914      	bls.n	8005b0e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689a      	ldr	r2, [r3, #8]
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	4013      	ands	r3, r2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00d      	beq.n	8005b0e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af6:	f043 0210 	orr.w	r2, r3, #16
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b02:	f043 0201 	orr.w	r2, r3, #1
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e007      	b.n	8005b1e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	4013      	ands	r3, r2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1dc      	bne.n	8005ad6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3720      	adds	r7, #32
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	a33fffff 	.word	0xa33fffff

08005b2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005b34:	2300      	movs	r3, #0
 8005b36:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fe fe17 	bl	8004770 <LL_ADC_IsEnabled>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d169      	bne.n	8005c1c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	4b36      	ldr	r3, [pc, #216]	; (8005c28 <ADC_Enable+0xfc>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00d      	beq.n	8005b72 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5a:	f043 0210 	orr.w	r2, r3, #16
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b66:	f043 0201 	orr.w	r2, r3, #1
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e055      	b.n	8005c1e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7fe fdd2 	bl	8004720 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005b7c:	482b      	ldr	r0, [pc, #172]	; (8005c2c <ADC_Enable+0x100>)
 8005b7e:	f7fe fc7d 	bl	800447c <LL_ADC_GetCommonPathInternalCh>
 8005b82:	4603      	mov	r3, r0
 8005b84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d013      	beq.n	8005bb4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b8c:	4b28      	ldr	r3, [pc, #160]	; (8005c30 <ADC_Enable+0x104>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	099b      	lsrs	r3, r3, #6
 8005b92:	4a28      	ldr	r2, [pc, #160]	; (8005c34 <ADC_Enable+0x108>)
 8005b94:	fba2 2303 	umull	r2, r3, r2, r3
 8005b98:	099b      	lsrs	r3, r3, #6
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	4413      	add	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005ba6:	e002      	b.n	8005bae <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	3b01      	subs	r3, #1
 8005bac:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1f9      	bne.n	8005ba8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005bb4:	f7fe f9e1 	bl	8003f7a <HAL_GetTick>
 8005bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005bba:	e028      	b.n	8005c0e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fe fdd5 	bl	8004770 <LL_ADC_IsEnabled>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d104      	bne.n	8005bd6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fe fda5 	bl	8004720 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005bd6:	f7fe f9d0 	bl	8003f7a <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d914      	bls.n	8005c0e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d00d      	beq.n	8005c0e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf6:	f043 0210 	orr.w	r2, r3, #16
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c02:	f043 0201 	orr.w	r2, r3, #1
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e007      	b.n	8005c1e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d1cf      	bne.n	8005bbc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	8000003f 	.word	0x8000003f
 8005c2c:	50040300 	.word	0x50040300
 8005c30:	20000110 	.word	0x20000110
 8005c34:	053e2d63 	.word	0x053e2d63

08005c38 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7fe fda6 	bl	8004796 <LL_ADC_IsDisableOngoing>
 8005c4a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7fe fd8d 	bl	8004770 <LL_ADC_IsEnabled>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d047      	beq.n	8005cec <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d144      	bne.n	8005cec <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f003 030d 	and.w	r3, r3, #13
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d10c      	bne.n	8005c8a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fe fd67 	bl	8004748 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2203      	movs	r2, #3
 8005c80:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005c82:	f7fe f97a 	bl	8003f7a <HAL_GetTick>
 8005c86:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c88:	e029      	b.n	8005cde <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c8e:	f043 0210 	orr.w	r2, r3, #16
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c9a:	f043 0201 	orr.w	r2, r3, #1
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e023      	b.n	8005cee <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005ca6:	f7fe f968 	bl	8003f7a <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d914      	bls.n	8005cde <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00d      	beq.n	8005cde <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc6:	f043 0210 	orr.w	r2, r3, #16
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd2:	f043 0201 	orr.w	r2, r3, #1
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e007      	b.n	8005cee <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1dc      	bne.n	8005ca6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d08:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d14b      	bne.n	8005da8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d14:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d021      	beq.n	8005d6e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fe fc1a 	bl	8004568 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d032      	beq.n	8005da0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d12b      	bne.n	8005da0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d11f      	bne.n	8005da0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d64:	f043 0201 	orr.w	r2, r3, #1
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	659a      	str	r2, [r3, #88]	; 0x58
 8005d6c:	e018      	b.n	8005da0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d111      	bne.n	8005da0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d105      	bne.n	8005da0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d98:	f043 0201 	orr.w	r2, r3, #1
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f7fc fdfb 	bl	800299c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005da6:	e00e      	b.n	8005dc6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f7ff f9f7 	bl	80051a8 <HAL_ADC_ErrorCallback>
}
 8005dba:	e004      	b.n	8005dc6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	4798      	blx	r3
}
 8005dc6:	bf00      	nop
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f7ff f9d9 	bl	8005194 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005de2:	bf00      	nop
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dfc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e08:	f043 0204 	orr.w	r2, r3, #4
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f7ff f9c9 	bl	80051a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e16:	bf00      	nop
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <LL_ADC_StartCalibration>:
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b083      	sub	sp, #12
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005e30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	609a      	str	r2, [r3, #8]
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <LL_ADC_IsCalibrationOnGoing>:
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e64:	d101      	bne.n	8005e6a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005e66:	2301      	movs	r3, #1
 8005e68:	e000      	b.n	8005e6c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005e82:	2300      	movs	r3, #0
 8005e84:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d101      	bne.n	8005e94 <HAL_ADCEx_Calibration_Start+0x1c>
 8005e90:	2302      	movs	r3, #2
 8005e92:	e04d      	b.n	8005f30 <HAL_ADCEx_Calibration_Start+0xb8>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7ff fecb 	bl	8005c38 <ADC_Disable>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d136      	bne.n	8005f1a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005eb4:	f023 0302 	bic.w	r3, r3, #2
 8005eb8:	f043 0202 	orr.w	r2, r3, #2
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6839      	ldr	r1, [r7, #0]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff ffa9 	bl	8005e1e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005ecc:	e014      	b.n	8005ef8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8005eda:	d30d      	bcc.n	8005ef8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee0:	f023 0312 	bic.w	r3, r3, #18
 8005ee4:	f043 0210 	orr.w	r2, r3, #16
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e01b      	b.n	8005f30 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff ffa7 	bl	8005e50 <LL_ADC_IsCalibrationOnGoing>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1e2      	bne.n	8005ece <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0c:	f023 0303 	bic.w	r3, r3, #3
 8005f10:	f043 0201 	orr.w	r2, r3, #1
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	659a      	str	r2, [r3, #88]	; 0x58
 8005f18:	e005      	b.n	8005f26 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1e:	f043 0210 	orr.w	r2, r3, #16
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f003 0307 	and.w	r3, r3, #7
 8005f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f48:	4b0c      	ldr	r3, [pc, #48]	; (8005f7c <__NVIC_SetPriorityGrouping+0x44>)
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f54:	4013      	ands	r3, r2
 8005f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f6a:	4a04      	ldr	r2, [pc, #16]	; (8005f7c <__NVIC_SetPriorityGrouping+0x44>)
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	60d3      	str	r3, [r2, #12]
}
 8005f70:	bf00      	nop
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	e000ed00 	.word	0xe000ed00

08005f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f84:	4b04      	ldr	r3, [pc, #16]	; (8005f98 <__NVIC_GetPriorityGrouping+0x18>)
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	0a1b      	lsrs	r3, r3, #8
 8005f8a:	f003 0307 	and.w	r3, r3, #7
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	e000ed00 	.word	0xe000ed00

08005f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	db0b      	blt.n	8005fc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fae:	79fb      	ldrb	r3, [r7, #7]
 8005fb0:	f003 021f 	and.w	r2, r3, #31
 8005fb4:	4907      	ldr	r1, [pc, #28]	; (8005fd4 <__NVIC_EnableIRQ+0x38>)
 8005fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fba:	095b      	lsrs	r3, r3, #5
 8005fbc:	2001      	movs	r0, #1
 8005fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8005fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	e000e100 	.word	0xe000e100

08005fd8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	db12      	blt.n	8006010 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fea:	79fb      	ldrb	r3, [r7, #7]
 8005fec:	f003 021f 	and.w	r2, r3, #31
 8005ff0:	490a      	ldr	r1, [pc, #40]	; (800601c <__NVIC_DisableIRQ+0x44>)
 8005ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8005ffe:	3320      	adds	r3, #32
 8006000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006004:	f3bf 8f4f 	dsb	sy
}
 8006008:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800600a:	f3bf 8f6f 	isb	sy
}
 800600e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	e000e100 	.word	0xe000e100

08006020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	4603      	mov	r3, r0
 8006028:	6039      	str	r1, [r7, #0]
 800602a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800602c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006030:	2b00      	cmp	r3, #0
 8006032:	db0a      	blt.n	800604a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	b2da      	uxtb	r2, r3
 8006038:	490c      	ldr	r1, [pc, #48]	; (800606c <__NVIC_SetPriority+0x4c>)
 800603a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800603e:	0112      	lsls	r2, r2, #4
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	440b      	add	r3, r1
 8006044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006048:	e00a      	b.n	8006060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	b2da      	uxtb	r2, r3
 800604e:	4908      	ldr	r1, [pc, #32]	; (8006070 <__NVIC_SetPriority+0x50>)
 8006050:	79fb      	ldrb	r3, [r7, #7]
 8006052:	f003 030f 	and.w	r3, r3, #15
 8006056:	3b04      	subs	r3, #4
 8006058:	0112      	lsls	r2, r2, #4
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	440b      	add	r3, r1
 800605e:	761a      	strb	r2, [r3, #24]
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	e000e100 	.word	0xe000e100
 8006070:	e000ed00 	.word	0xe000ed00

08006074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006074:	b480      	push	{r7}
 8006076:	b089      	sub	sp, #36	; 0x24
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	f1c3 0307 	rsb	r3, r3, #7
 800608e:	2b04      	cmp	r3, #4
 8006090:	bf28      	it	cs
 8006092:	2304      	movcs	r3, #4
 8006094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	3304      	adds	r3, #4
 800609a:	2b06      	cmp	r3, #6
 800609c:	d902      	bls.n	80060a4 <NVIC_EncodePriority+0x30>
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	3b03      	subs	r3, #3
 80060a2:	e000      	b.n	80060a6 <NVIC_EncodePriority+0x32>
 80060a4:	2300      	movs	r3, #0
 80060a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060a8:	f04f 32ff 	mov.w	r2, #4294967295
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	fa02 f303 	lsl.w	r3, r2, r3
 80060b2:	43da      	mvns	r2, r3
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	401a      	ands	r2, r3
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060bc:	f04f 31ff 	mov.w	r1, #4294967295
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	fa01 f303 	lsl.w	r3, r1, r3
 80060c6:	43d9      	mvns	r1, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060cc:	4313      	orrs	r3, r2
         );
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3724      	adds	r7, #36	; 0x24
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b082      	sub	sp, #8
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7ff ff28 	bl	8005f38 <__NVIC_SetPriorityGrouping>
}
 80060e8:	bf00      	nop
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	4603      	mov	r3, r0
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80060fe:	2300      	movs	r3, #0
 8006100:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006102:	f7ff ff3d 	bl	8005f80 <__NVIC_GetPriorityGrouping>
 8006106:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	68b9      	ldr	r1, [r7, #8]
 800610c:	6978      	ldr	r0, [r7, #20]
 800610e:	f7ff ffb1 	bl	8006074 <NVIC_EncodePriority>
 8006112:	4602      	mov	r2, r0
 8006114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006118:	4611      	mov	r1, r2
 800611a:	4618      	mov	r0, r3
 800611c:	f7ff ff80 	bl	8006020 <__NVIC_SetPriority>
}
 8006120:	bf00      	nop
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006136:	4618      	mov	r0, r3
 8006138:	f7ff ff30 	bl	8005f9c <__NVIC_EnableIRQ>
}
 800613c:	bf00      	nop
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	4603      	mov	r3, r0
 800614c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800614e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006152:	4618      	mov	r0, r3
 8006154:	f7ff ff40 	bl	8005fd8 <__NVIC_DisableIRQ>
}
 8006158:	bf00      	nop
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e098      	b.n	80062a4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	461a      	mov	r2, r3
 8006178:	4b4d      	ldr	r3, [pc, #308]	; (80062b0 <HAL_DMA_Init+0x150>)
 800617a:	429a      	cmp	r2, r3
 800617c:	d80f      	bhi.n	800619e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	4b4b      	ldr	r3, [pc, #300]	; (80062b4 <HAL_DMA_Init+0x154>)
 8006186:	4413      	add	r3, r2
 8006188:	4a4b      	ldr	r2, [pc, #300]	; (80062b8 <HAL_DMA_Init+0x158>)
 800618a:	fba2 2303 	umull	r2, r3, r2, r3
 800618e:	091b      	lsrs	r3, r3, #4
 8006190:	009a      	lsls	r2, r3, #2
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a48      	ldr	r2, [pc, #288]	; (80062bc <HAL_DMA_Init+0x15c>)
 800619a:	641a      	str	r2, [r3, #64]	; 0x40
 800619c:	e00e      	b.n	80061bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	461a      	mov	r2, r3
 80061a4:	4b46      	ldr	r3, [pc, #280]	; (80062c0 <HAL_DMA_Init+0x160>)
 80061a6:	4413      	add	r3, r2
 80061a8:	4a43      	ldr	r2, [pc, #268]	; (80062b8 <HAL_DMA_Init+0x158>)
 80061aa:	fba2 2303 	umull	r2, r3, r2, r3
 80061ae:	091b      	lsrs	r3, r3, #4
 80061b0:	009a      	lsls	r2, r3, #2
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a42      	ldr	r2, [pc, #264]	; (80062c4 <HAL_DMA_Init+0x164>)
 80061ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80061d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80061e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006216:	d039      	beq.n	800628c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621c:	4a27      	ldr	r2, [pc, #156]	; (80062bc <HAL_DMA_Init+0x15c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d11a      	bne.n	8006258 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006222:	4b29      	ldr	r3, [pc, #164]	; (80062c8 <HAL_DMA_Init+0x168>)
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800622a:	f003 031c 	and.w	r3, r3, #28
 800622e:	210f      	movs	r1, #15
 8006230:	fa01 f303 	lsl.w	r3, r1, r3
 8006234:	43db      	mvns	r3, r3
 8006236:	4924      	ldr	r1, [pc, #144]	; (80062c8 <HAL_DMA_Init+0x168>)
 8006238:	4013      	ands	r3, r2
 800623a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800623c:	4b22      	ldr	r3, [pc, #136]	; (80062c8 <HAL_DMA_Init+0x168>)
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6859      	ldr	r1, [r3, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006248:	f003 031c 	and.w	r3, r3, #28
 800624c:	fa01 f303 	lsl.w	r3, r1, r3
 8006250:	491d      	ldr	r1, [pc, #116]	; (80062c8 <HAL_DMA_Init+0x168>)
 8006252:	4313      	orrs	r3, r2
 8006254:	600b      	str	r3, [r1, #0]
 8006256:	e019      	b.n	800628c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006258:	4b1c      	ldr	r3, [pc, #112]	; (80062cc <HAL_DMA_Init+0x16c>)
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006260:	f003 031c 	and.w	r3, r3, #28
 8006264:	210f      	movs	r1, #15
 8006266:	fa01 f303 	lsl.w	r3, r1, r3
 800626a:	43db      	mvns	r3, r3
 800626c:	4917      	ldr	r1, [pc, #92]	; (80062cc <HAL_DMA_Init+0x16c>)
 800626e:	4013      	ands	r3, r2
 8006270:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006272:	4b16      	ldr	r3, [pc, #88]	; (80062cc <HAL_DMA_Init+0x16c>)
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6859      	ldr	r1, [r3, #4]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627e:	f003 031c 	and.w	r3, r3, #28
 8006282:	fa01 f303 	lsl.w	r3, r1, r3
 8006286:	4911      	ldr	r1, [pc, #68]	; (80062cc <HAL_DMA_Init+0x16c>)
 8006288:	4313      	orrs	r3, r2
 800628a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	40020407 	.word	0x40020407
 80062b4:	bffdfff8 	.word	0xbffdfff8
 80062b8:	cccccccd 	.word	0xcccccccd
 80062bc:	40020000 	.word	0x40020000
 80062c0:	bffdfbf8 	.word	0xbffdfbf8
 80062c4:	40020400 	.word	0x40020400
 80062c8:	400200a8 	.word	0x400200a8
 80062cc:	400204a8 	.word	0x400204a8

080062d0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d101      	bne.n	80062e2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e072      	b.n	80063c8 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 0201 	bic.w	r2, r2, #1
 80062f0:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	461a      	mov	r2, r3
 80062f8:	4b36      	ldr	r3, [pc, #216]	; (80063d4 <HAL_DMA_DeInit+0x104>)
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d80f      	bhi.n	800631e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	4b34      	ldr	r3, [pc, #208]	; (80063d8 <HAL_DMA_DeInit+0x108>)
 8006306:	4413      	add	r3, r2
 8006308:	4a34      	ldr	r2, [pc, #208]	; (80063dc <HAL_DMA_DeInit+0x10c>)
 800630a:	fba2 2303 	umull	r2, r3, r2, r3
 800630e:	091b      	lsrs	r3, r3, #4
 8006310:	009a      	lsls	r2, r3, #2
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a31      	ldr	r2, [pc, #196]	; (80063e0 <HAL_DMA_DeInit+0x110>)
 800631a:	641a      	str	r2, [r3, #64]	; 0x40
 800631c:	e00e      	b.n	800633c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	4b2f      	ldr	r3, [pc, #188]	; (80063e4 <HAL_DMA_DeInit+0x114>)
 8006326:	4413      	add	r3, r2
 8006328:	4a2c      	ldr	r2, [pc, #176]	; (80063dc <HAL_DMA_DeInit+0x10c>)
 800632a:	fba2 2303 	umull	r2, r3, r2, r3
 800632e:	091b      	lsrs	r3, r3, #4
 8006330:	009a      	lsls	r2, r3, #2
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a2b      	ldr	r2, [pc, #172]	; (80063e8 <HAL_DMA_DeInit+0x118>)
 800633a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2200      	movs	r2, #0
 8006342:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006348:	f003 021c 	and.w	r2, r3, #28
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006350:	2101      	movs	r1, #1
 8006352:	fa01 f202 	lsl.w	r2, r1, r2
 8006356:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635c:	4a20      	ldr	r2, [pc, #128]	; (80063e0 <HAL_DMA_DeInit+0x110>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d10d      	bne.n	800637e <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006362:	4b22      	ldr	r3, [pc, #136]	; (80063ec <HAL_DMA_DeInit+0x11c>)
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636a:	f003 031c 	and.w	r3, r3, #28
 800636e:	210f      	movs	r1, #15
 8006370:	fa01 f303 	lsl.w	r3, r1, r3
 8006374:	43db      	mvns	r3, r3
 8006376:	491d      	ldr	r1, [pc, #116]	; (80063ec <HAL_DMA_DeInit+0x11c>)
 8006378:	4013      	ands	r3, r2
 800637a:	600b      	str	r3, [r1, #0]
 800637c:	e00c      	b.n	8006398 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800637e:	4b1c      	ldr	r3, [pc, #112]	; (80063f0 <HAL_DMA_DeInit+0x120>)
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006386:	f003 031c 	and.w	r3, r3, #28
 800638a:	210f      	movs	r1, #15
 800638c:	fa01 f303 	lsl.w	r3, r1, r3
 8006390:	43db      	mvns	r3, r3
 8006392:	4917      	ldr	r1, [pc, #92]	; (80063f0 <HAL_DMA_DeInit+0x120>)
 8006394:	4013      	ands	r3, r2
 8006396:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	40020407 	.word	0x40020407
 80063d8:	bffdfff8 	.word	0xbffdfff8
 80063dc:	cccccccd 	.word	0xcccccccd
 80063e0:	40020000 	.word	0x40020000
 80063e4:	bffdfbf8 	.word	0xbffdfbf8
 80063e8:	40020400 	.word	0x40020400
 80063ec:	400200a8 	.word	0x400200a8
 80063f0:	400204a8 	.word	0x400204a8

080063f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
 8006400:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006402:	2300      	movs	r3, #0
 8006404:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800640c:	2b01      	cmp	r3, #1
 800640e:	d101      	bne.n	8006414 <HAL_DMA_Start_IT+0x20>
 8006410:	2302      	movs	r3, #2
 8006412:	e04b      	b.n	80064ac <HAL_DMA_Start_IT+0xb8>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b01      	cmp	r3, #1
 8006426:	d13a      	bne.n	800649e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 0201 	bic.w	r2, r2, #1
 8006444:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	68b9      	ldr	r1, [r7, #8]
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 f91e 	bl	800668e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006456:	2b00      	cmp	r3, #0
 8006458:	d008      	beq.n	800646c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f042 020e 	orr.w	r2, r2, #14
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	e00f      	b.n	800648c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 0204 	bic.w	r2, r2, #4
 800647a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f042 020a 	orr.w	r2, r2, #10
 800648a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0201 	orr.w	r2, r2, #1
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	e005      	b.n	80064aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80064a6:	2302      	movs	r3, #2
 80064a8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80064aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d008      	beq.n	80064de <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2204      	movs	r2, #4
 80064d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e022      	b.n	8006524 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 020e 	bic.w	r2, r2, #14
 80064ec:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 0201 	bic.w	r2, r2, #1
 80064fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006502:	f003 021c 	and.w	r2, r3, #28
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	2101      	movs	r1, #1
 800650c:	fa01 f202 	lsl.w	r2, r1, r2
 8006510:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006522:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654c:	f003 031c 	and.w	r3, r3, #28
 8006550:	2204      	movs	r2, #4
 8006552:	409a      	lsls	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4013      	ands	r3, r2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d026      	beq.n	80065aa <HAL_DMA_IRQHandler+0x7a>
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	f003 0304 	and.w	r3, r3, #4
 8006562:	2b00      	cmp	r3, #0
 8006564:	d021      	beq.n	80065aa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	2b00      	cmp	r3, #0
 8006572:	d107      	bne.n	8006584 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 0204 	bic.w	r2, r2, #4
 8006582:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006588:	f003 021c 	and.w	r2, r3, #28
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006590:	2104      	movs	r1, #4
 8006592:	fa01 f202 	lsl.w	r2, r1, r2
 8006596:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659c:	2b00      	cmp	r3, #0
 800659e:	d071      	beq.n	8006684 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80065a8:	e06c      	b.n	8006684 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ae:	f003 031c 	and.w	r3, r3, #28
 80065b2:	2202      	movs	r2, #2
 80065b4:	409a      	lsls	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4013      	ands	r3, r2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d02e      	beq.n	800661c <HAL_DMA_IRQHandler+0xec>
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d029      	beq.n	800661c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0320 	and.w	r3, r3, #32
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10b      	bne.n	80065ee <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 020a 	bic.w	r2, r2, #10
 80065e4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f2:	f003 021c 	and.w	r2, r3, #28
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	2102      	movs	r1, #2
 80065fc:	fa01 f202 	lsl.w	r2, r1, r2
 8006600:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d038      	beq.n	8006684 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800661a:	e033      	b.n	8006684 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006620:	f003 031c 	and.w	r3, r3, #28
 8006624:	2208      	movs	r2, #8
 8006626:	409a      	lsls	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4013      	ands	r3, r2
 800662c:	2b00      	cmp	r3, #0
 800662e:	d02a      	beq.n	8006686 <HAL_DMA_IRQHandler+0x156>
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f003 0308 	and.w	r3, r3, #8
 8006636:	2b00      	cmp	r3, #0
 8006638:	d025      	beq.n	8006686 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f022 020e 	bic.w	r2, r2, #14
 8006648:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664e:	f003 021c 	and.w	r2, r3, #28
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	2101      	movs	r1, #1
 8006658:	fa01 f202 	lsl.w	r2, r1, r2
 800665c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006678:	2b00      	cmp	r3, #0
 800667a:	d004      	beq.n	8006686 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006684:	bf00      	nop
 8006686:	bf00      	nop
}
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800668e:	b480      	push	{r7}
 8006690:	b085      	sub	sp, #20
 8006692:	af00      	add	r7, sp, #0
 8006694:	60f8      	str	r0, [r7, #12]
 8006696:	60b9      	str	r1, [r7, #8]
 8006698:	607a      	str	r2, [r7, #4]
 800669a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a0:	f003 021c 	and.w	r2, r3, #28
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a8:	2101      	movs	r1, #1
 80066aa:	fa01 f202 	lsl.w	r2, r1, r2
 80066ae:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	2b10      	cmp	r3, #16
 80066be:	d108      	bne.n	80066d2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80066d0:	e007      	b.n	80066e2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	60da      	str	r2, [r3, #12]
}
 80066e2:	bf00      	nop
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
	...

080066f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80066fa:	2300      	movs	r3, #0
 80066fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80066fe:	e154      	b.n	80069aa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	2101      	movs	r1, #1
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	fa01 f303 	lsl.w	r3, r1, r3
 800670c:	4013      	ands	r3, r2
 800670e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 8146 	beq.w	80069a4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f003 0303 	and.w	r3, r3, #3
 8006720:	2b01      	cmp	r3, #1
 8006722:	d005      	beq.n	8006730 <HAL_GPIO_Init+0x40>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f003 0303 	and.w	r3, r3, #3
 800672c:	2b02      	cmp	r3, #2
 800672e:	d130      	bne.n	8006792 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	2203      	movs	r2, #3
 800673c:	fa02 f303 	lsl.w	r3, r2, r3
 8006740:	43db      	mvns	r3, r3
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4013      	ands	r3, r2
 8006746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	68da      	ldr	r2, [r3, #12]
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	005b      	lsls	r3, r3, #1
 8006750:	fa02 f303 	lsl.w	r3, r2, r3
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	4313      	orrs	r3, r2
 8006758:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006766:	2201      	movs	r2, #1
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	fa02 f303 	lsl.w	r3, r2, r3
 800676e:	43db      	mvns	r3, r3
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4013      	ands	r3, r2
 8006774:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	091b      	lsrs	r3, r3, #4
 800677c:	f003 0201 	and.w	r2, r3, #1
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	fa02 f303 	lsl.w	r3, r2, r3
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	4313      	orrs	r3, r2
 800678a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f003 0303 	and.w	r3, r3, #3
 800679a:	2b03      	cmp	r3, #3
 800679c:	d017      	beq.n	80067ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	005b      	lsls	r3, r3, #1
 80067a8:	2203      	movs	r2, #3
 80067aa:	fa02 f303 	lsl.w	r3, r2, r3
 80067ae:	43db      	mvns	r3, r3
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	4013      	ands	r3, r2
 80067b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	689a      	ldr	r2, [r3, #8]
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	fa02 f303 	lsl.w	r3, r2, r3
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f003 0303 	and.w	r3, r3, #3
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d123      	bne.n	8006822 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	08da      	lsrs	r2, r3, #3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	3208      	adds	r2, #8
 80067e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	220f      	movs	r2, #15
 80067f2:	fa02 f303 	lsl.w	r3, r2, r3
 80067f6:	43db      	mvns	r3, r3
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	4013      	ands	r3, r2
 80067fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	691a      	ldr	r2, [r3, #16]
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f003 0307 	and.w	r3, r3, #7
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	fa02 f303 	lsl.w	r3, r2, r3
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	4313      	orrs	r3, r2
 8006812:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	08da      	lsrs	r2, r3, #3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	3208      	adds	r2, #8
 800681c:	6939      	ldr	r1, [r7, #16]
 800681e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	005b      	lsls	r3, r3, #1
 800682c:	2203      	movs	r2, #3
 800682e:	fa02 f303 	lsl.w	r3, r2, r3
 8006832:	43db      	mvns	r3, r3
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	4013      	ands	r3, r2
 8006838:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f003 0203 	and.w	r2, r3, #3
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	fa02 f303 	lsl.w	r3, r2, r3
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	4313      	orrs	r3, r2
 800684e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 80a0 	beq.w	80069a4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006864:	4b58      	ldr	r3, [pc, #352]	; (80069c8 <HAL_GPIO_Init+0x2d8>)
 8006866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006868:	4a57      	ldr	r2, [pc, #348]	; (80069c8 <HAL_GPIO_Init+0x2d8>)
 800686a:	f043 0301 	orr.w	r3, r3, #1
 800686e:	6613      	str	r3, [r2, #96]	; 0x60
 8006870:	4b55      	ldr	r3, [pc, #340]	; (80069c8 <HAL_GPIO_Init+0x2d8>)
 8006872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	60bb      	str	r3, [r7, #8]
 800687a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800687c:	4a53      	ldr	r2, [pc, #332]	; (80069cc <HAL_GPIO_Init+0x2dc>)
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	089b      	lsrs	r3, r3, #2
 8006882:	3302      	adds	r3, #2
 8006884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006888:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f003 0303 	and.w	r3, r3, #3
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	220f      	movs	r2, #15
 8006894:	fa02 f303 	lsl.w	r3, r2, r3
 8006898:	43db      	mvns	r3, r3
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	4013      	ands	r3, r2
 800689e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80068a6:	d019      	beq.n	80068dc <HAL_GPIO_Init+0x1ec>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a49      	ldr	r2, [pc, #292]	; (80069d0 <HAL_GPIO_Init+0x2e0>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d013      	beq.n	80068d8 <HAL_GPIO_Init+0x1e8>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a48      	ldr	r2, [pc, #288]	; (80069d4 <HAL_GPIO_Init+0x2e4>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d00d      	beq.n	80068d4 <HAL_GPIO_Init+0x1e4>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a47      	ldr	r2, [pc, #284]	; (80069d8 <HAL_GPIO_Init+0x2e8>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d007      	beq.n	80068d0 <HAL_GPIO_Init+0x1e0>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a46      	ldr	r2, [pc, #280]	; (80069dc <HAL_GPIO_Init+0x2ec>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d101      	bne.n	80068cc <HAL_GPIO_Init+0x1dc>
 80068c8:	2304      	movs	r3, #4
 80068ca:	e008      	b.n	80068de <HAL_GPIO_Init+0x1ee>
 80068cc:	2307      	movs	r3, #7
 80068ce:	e006      	b.n	80068de <HAL_GPIO_Init+0x1ee>
 80068d0:	2303      	movs	r3, #3
 80068d2:	e004      	b.n	80068de <HAL_GPIO_Init+0x1ee>
 80068d4:	2302      	movs	r3, #2
 80068d6:	e002      	b.n	80068de <HAL_GPIO_Init+0x1ee>
 80068d8:	2301      	movs	r3, #1
 80068da:	e000      	b.n	80068de <HAL_GPIO_Init+0x1ee>
 80068dc:	2300      	movs	r3, #0
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	f002 0203 	and.w	r2, r2, #3
 80068e4:	0092      	lsls	r2, r2, #2
 80068e6:	4093      	lsls	r3, r2
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80068ee:	4937      	ldr	r1, [pc, #220]	; (80069cc <HAL_GPIO_Init+0x2dc>)
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	089b      	lsrs	r3, r3, #2
 80068f4:	3302      	adds	r3, #2
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80068fc:	4b38      	ldr	r3, [pc, #224]	; (80069e0 <HAL_GPIO_Init+0x2f0>)
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	43db      	mvns	r3, r3
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	4013      	ands	r3, r2
 800690a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d003      	beq.n	8006920 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4313      	orrs	r3, r2
 800691e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006920:	4a2f      	ldr	r2, [pc, #188]	; (80069e0 <HAL_GPIO_Init+0x2f0>)
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006926:	4b2e      	ldr	r3, [pc, #184]	; (80069e0 <HAL_GPIO_Init+0x2f0>)
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	43db      	mvns	r3, r3
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	4013      	ands	r3, r2
 8006934:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4313      	orrs	r3, r2
 8006948:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800694a:	4a25      	ldr	r2, [pc, #148]	; (80069e0 <HAL_GPIO_Init+0x2f0>)
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006950:	4b23      	ldr	r3, [pc, #140]	; (80069e0 <HAL_GPIO_Init+0x2f0>)
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	43db      	mvns	r3, r3
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	4013      	ands	r3, r2
 800695e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d003      	beq.n	8006974 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	4313      	orrs	r3, r2
 8006972:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006974:	4a1a      	ldr	r2, [pc, #104]	; (80069e0 <HAL_GPIO_Init+0x2f0>)
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800697a:	4b19      	ldr	r3, [pc, #100]	; (80069e0 <HAL_GPIO_Init+0x2f0>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	43db      	mvns	r3, r3
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	4013      	ands	r3, r2
 8006988:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4313      	orrs	r3, r2
 800699c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800699e:	4a10      	ldr	r2, [pc, #64]	; (80069e0 <HAL_GPIO_Init+0x2f0>)
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	3301      	adds	r3, #1
 80069a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	fa22 f303 	lsr.w	r3, r2, r3
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f47f aea3 	bne.w	8006700 <HAL_GPIO_Init+0x10>
  }
}
 80069ba:	bf00      	nop
 80069bc:	bf00      	nop
 80069be:	371c      	adds	r7, #28
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	40021000 	.word	0x40021000
 80069cc:	40010000 	.word	0x40010000
 80069d0:	48000400 	.word	0x48000400
 80069d4:	48000800 	.word	0x48000800
 80069d8:	48000c00 	.word	0x48000c00
 80069dc:	48001000 	.word	0x48001000
 80069e0:	40010400 	.word	0x40010400

080069e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80069ee:	2300      	movs	r3, #0
 80069f0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80069f2:	e0b7      	b.n	8006b64 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80069f4:	2201      	movs	r2, #1
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	fa02 f303 	lsl.w	r3, r2, r3
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	4013      	ands	r3, r2
 8006a00:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 80aa 	beq.w	8006b5e <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006a0a:	4a5d      	ldr	r2, [pc, #372]	; (8006b80 <HAL_GPIO_DeInit+0x19c>)
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	089b      	lsrs	r3, r3, #2
 8006a10:	3302      	adds	r3, #2
 8006a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a16:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f003 0303 	and.w	r3, r3, #3
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	220f      	movs	r2, #15
 8006a22:	fa02 f303 	lsl.w	r3, r2, r3
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006a32:	d019      	beq.n	8006a68 <HAL_GPIO_DeInit+0x84>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a53      	ldr	r2, [pc, #332]	; (8006b84 <HAL_GPIO_DeInit+0x1a0>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d013      	beq.n	8006a64 <HAL_GPIO_DeInit+0x80>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a52      	ldr	r2, [pc, #328]	; (8006b88 <HAL_GPIO_DeInit+0x1a4>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d00d      	beq.n	8006a60 <HAL_GPIO_DeInit+0x7c>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a51      	ldr	r2, [pc, #324]	; (8006b8c <HAL_GPIO_DeInit+0x1a8>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d007      	beq.n	8006a5c <HAL_GPIO_DeInit+0x78>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a50      	ldr	r2, [pc, #320]	; (8006b90 <HAL_GPIO_DeInit+0x1ac>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d101      	bne.n	8006a58 <HAL_GPIO_DeInit+0x74>
 8006a54:	2304      	movs	r3, #4
 8006a56:	e008      	b.n	8006a6a <HAL_GPIO_DeInit+0x86>
 8006a58:	2307      	movs	r3, #7
 8006a5a:	e006      	b.n	8006a6a <HAL_GPIO_DeInit+0x86>
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e004      	b.n	8006a6a <HAL_GPIO_DeInit+0x86>
 8006a60:	2302      	movs	r3, #2
 8006a62:	e002      	b.n	8006a6a <HAL_GPIO_DeInit+0x86>
 8006a64:	2301      	movs	r3, #1
 8006a66:	e000      	b.n	8006a6a <HAL_GPIO_DeInit+0x86>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	f002 0203 	and.w	r2, r2, #3
 8006a70:	0092      	lsls	r2, r2, #2
 8006a72:	4093      	lsls	r3, r2
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d132      	bne.n	8006ae0 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006a7a:	4b46      	ldr	r3, [pc, #280]	; (8006b94 <HAL_GPIO_DeInit+0x1b0>)
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	43db      	mvns	r3, r3
 8006a82:	4944      	ldr	r1, [pc, #272]	; (8006b94 <HAL_GPIO_DeInit+0x1b0>)
 8006a84:	4013      	ands	r3, r2
 8006a86:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006a88:	4b42      	ldr	r3, [pc, #264]	; (8006b94 <HAL_GPIO_DeInit+0x1b0>)
 8006a8a:	685a      	ldr	r2, [r3, #4]
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	43db      	mvns	r3, r3
 8006a90:	4940      	ldr	r1, [pc, #256]	; (8006b94 <HAL_GPIO_DeInit+0x1b0>)
 8006a92:	4013      	ands	r3, r2
 8006a94:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006a96:	4b3f      	ldr	r3, [pc, #252]	; (8006b94 <HAL_GPIO_DeInit+0x1b0>)
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	43db      	mvns	r3, r3
 8006a9e:	493d      	ldr	r1, [pc, #244]	; (8006b94 <HAL_GPIO_DeInit+0x1b0>)
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8006aa4:	4b3b      	ldr	r3, [pc, #236]	; (8006b94 <HAL_GPIO_DeInit+0x1b0>)
 8006aa6:	689a      	ldr	r2, [r3, #8]
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	43db      	mvns	r3, r3
 8006aac:	4939      	ldr	r1, [pc, #228]	; (8006b94 <HAL_GPIO_DeInit+0x1b0>)
 8006aae:	4013      	ands	r3, r2
 8006ab0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f003 0303 	and.w	r3, r3, #3
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	220f      	movs	r2, #15
 8006abc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006ac2:	4a2f      	ldr	r2, [pc, #188]	; (8006b80 <HAL_GPIO_DeInit+0x19c>)
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	089b      	lsrs	r3, r3, #2
 8006ac8:	3302      	adds	r3, #2
 8006aca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	43da      	mvns	r2, r3
 8006ad2:	482b      	ldr	r0, [pc, #172]	; (8006b80 <HAL_GPIO_DeInit+0x19c>)
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	089b      	lsrs	r3, r3, #2
 8006ad8:	400a      	ands	r2, r1
 8006ada:	3302      	adds	r3, #2
 8006adc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	2103      	movs	r1, #3
 8006aea:	fa01 f303 	lsl.w	r3, r1, r3
 8006aee:	431a      	orrs	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	08da      	lsrs	r2, r3, #3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	3208      	adds	r2, #8
 8006afc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f003 0307 	and.w	r3, r3, #7
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	220f      	movs	r2, #15
 8006b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0e:	43db      	mvns	r3, r3
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	08d2      	lsrs	r2, r2, #3
 8006b14:	4019      	ands	r1, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	3208      	adds	r2, #8
 8006b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689a      	ldr	r2, [r3, #8]
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	2103      	movs	r1, #3
 8006b28:	fa01 f303 	lsl.w	r3, r1, r3
 8006b2c:	43db      	mvns	r3, r3
 8006b2e:	401a      	ands	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	2101      	movs	r1, #1
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b40:	43db      	mvns	r3, r3
 8006b42:	401a      	ands	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68da      	ldr	r2, [r3, #12]
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	2103      	movs	r1, #3
 8006b52:	fa01 f303 	lsl.w	r3, r1, r3
 8006b56:	43db      	mvns	r3, r3
 8006b58:	401a      	ands	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	3301      	adds	r3, #1
 8006b62:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	fa22 f303 	lsr.w	r3, r2, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f47f af41 	bne.w	80069f4 <HAL_GPIO_DeInit+0x10>
  }
}
 8006b72:	bf00      	nop
 8006b74:	bf00      	nop
 8006b76:	371c      	adds	r7, #28
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	40010000 	.word	0x40010000
 8006b84:	48000400 	.word	0x48000400
 8006b88:	48000800 	.word	0x48000800
 8006b8c:	48000c00 	.word	0x48000c00
 8006b90:	48001000 	.word	0x48001000
 8006b94:	40010400 	.word	0x40010400

08006b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	807b      	strh	r3, [r7, #2]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ba8:	787b      	ldrb	r3, [r7, #1]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006bae:	887a      	ldrh	r2, [r7, #2]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006bb4:	e002      	b.n	8006bbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006bb6:	887a      	ldrh	r2, [r7, #2]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10c      	bne.n	8006bf4 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8006bda:	4b13      	ldr	r3, [pc, #76]	; (8006c28 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006be6:	d10e      	bne.n	8006c06 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8006be8:	f000 f8ae 	bl	8006d48 <HAL_PWREx_DisableLowPowerRunMode>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d009      	beq.n	8006c06 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8006bf2:	e016      	b.n	8006c22 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8006bf4:	4b0c      	ldr	r3, [pc, #48]	; (8006c28 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c00:	d001      	beq.n	8006c06 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8006c02:	f000 f891 	bl	8006d28 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006c06:	4b09      	ldr	r3, [pc, #36]	; (8006c2c <HAL_PWR_EnterSLEEPMode+0x64>)
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	4a08      	ldr	r2, [pc, #32]	; (8006c2c <HAL_PWR_EnterSLEEPMode+0x64>)
 8006c0c:	f023 0304 	bic.w	r3, r3, #4
 8006c10:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006c12:	78fb      	ldrb	r3, [r7, #3]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d101      	bne.n	8006c1c <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006c18:	bf30      	wfi
 8006c1a:	e002      	b.n	8006c22 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006c1c:	bf40      	sev
    __WFE();
 8006c1e:	bf20      	wfe
    __WFE();
 8006c20:	bf20      	wfe
  }

}
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	40007000 	.word	0x40007000
 8006c2c:	e000ed00 	.word	0xe000ed00

08006c30 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c42:	d104      	bne.n	8006c4e <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8006c44:	78fb      	ldrb	r3, [r7, #3]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f000 f8e0 	bl	8006e0c <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8006c4c:	e003      	b.n	8006c56 <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8006c4e:	78fb      	ldrb	r3, [r7, #3]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f000 f8b1 	bl	8006db8 <HAL_PWREx_EnterSTOP0Mode>
}
 8006c56:	bf00      	nop
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006c60:	b480      	push	{r7}
 8006c62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006c64:	4b04      	ldr	r3, [pc, #16]	; (8006c78 <HAL_PWREx_GetVoltageRange+0x18>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	40007000 	.word	0x40007000

08006c7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c8a:	d130      	bne.n	8006cee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c8c:	4b23      	ldr	r3, [pc, #140]	; (8006d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c98:	d038      	beq.n	8006d0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c9a:	4b20      	ldr	r3, [pc, #128]	; (8006d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006ca2:	4a1e      	ldr	r2, [pc, #120]	; (8006d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ca4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ca8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006caa:	4b1d      	ldr	r3, [pc, #116]	; (8006d20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2232      	movs	r2, #50	; 0x32
 8006cb0:	fb02 f303 	mul.w	r3, r2, r3
 8006cb4:	4a1b      	ldr	r2, [pc, #108]	; (8006d24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cba:	0c9b      	lsrs	r3, r3, #18
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006cc0:	e002      	b.n	8006cc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006cc8:	4b14      	ldr	r3, [pc, #80]	; (8006d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cd4:	d102      	bne.n	8006cdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1f2      	bne.n	8006cc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006cdc:	4b0f      	ldr	r3, [pc, #60]	; (8006d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ce8:	d110      	bne.n	8006d0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e00f      	b.n	8006d0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006cee:	4b0b      	ldr	r3, [pc, #44]	; (8006d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cfa:	d007      	beq.n	8006d0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006cfc:	4b07      	ldr	r3, [pc, #28]	; (8006d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006d04:	4a05      	ldr	r2, [pc, #20]	; (8006d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	40007000 	.word	0x40007000
 8006d20:	20000110 	.word	0x20000110
 8006d24:	431bde83 	.word	0x431bde83

08006d28 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8006d2c:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a04      	ldr	r2, [pc, #16]	; (8006d44 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8006d32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d36:	6013      	str	r3, [r2, #0]
}
 8006d38:	bf00      	nop
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	40007000 	.word	0x40007000

08006d48 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8006d4e:	4b17      	ldr	r3, [pc, #92]	; (8006dac <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a16      	ldr	r2, [pc, #88]	; (8006dac <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8006d54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d58:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006d5a:	4b15      	ldr	r3, [pc, #84]	; (8006db0 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2232      	movs	r2, #50	; 0x32
 8006d60:	fb02 f303 	mul.w	r3, r2, r3
 8006d64:	4a13      	ldr	r2, [pc, #76]	; (8006db4 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8006d66:	fba2 2303 	umull	r2, r3, r2, r3
 8006d6a:	0c9b      	lsrs	r3, r3, #18
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006d70:	e002      	b.n	8006d78 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3b01      	subs	r3, #1
 8006d76:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006d78:	4b0c      	ldr	r3, [pc, #48]	; (8006dac <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d84:	d102      	bne.n	8006d8c <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1f2      	bne.n	8006d72 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8006d8c:	4b07      	ldr	r3, [pc, #28]	; (8006dac <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8006d8e:	695b      	ldr	r3, [r3, #20]
 8006d90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d98:	d101      	bne.n	8006d9e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e000      	b.n	8006da0 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	40007000 	.word	0x40007000
 8006db0:	20000110 	.word	0x20000110
 8006db4:	431bde83 	.word	0x431bde83

08006db8 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 8006dc2:	4b10      	ldr	r3, [pc, #64]	; (8006e04 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a0f      	ldr	r2, [pc, #60]	; (8006e04 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8006dc8:	f023 0307 	bic.w	r3, r3, #7
 8006dcc:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006dce:	4b0e      	ldr	r3, [pc, #56]	; (8006e08 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	4a0d      	ldr	r2, [pc, #52]	; (8006e08 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8006dd4:	f043 0304 	orr.w	r3, r3, #4
 8006dd8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8006dda:	79fb      	ldrb	r3, [r7, #7]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d101      	bne.n	8006de4 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006de0:	bf30      	wfi
 8006de2:	e002      	b.n	8006dea <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006de4:	bf40      	sev
    __WFE();
 8006de6:	bf20      	wfe
    __WFE();
 8006de8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006dea:	4b07      	ldr	r3, [pc, #28]	; (8006e08 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	4a06      	ldr	r2, [pc, #24]	; (8006e08 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8006df0:	f023 0304 	bic.w	r3, r3, #4
 8006df4:	6113      	str	r3, [r2, #16]
}
 8006df6:	bf00      	nop
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	40007000 	.word	0x40007000
 8006e08:	e000ed00 	.word	0xe000ed00

08006e0c <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	4603      	mov	r3, r0
 8006e14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 8006e16:	4b11      	ldr	r3, [pc, #68]	; (8006e5c <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f023 0307 	bic.w	r3, r3, #7
 8006e1e:	4a0f      	ldr	r2, [pc, #60]	; (8006e5c <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8006e20:	f043 0301 	orr.w	r3, r3, #1
 8006e24:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006e26:	4b0e      	ldr	r3, [pc, #56]	; (8006e60 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	4a0d      	ldr	r2, [pc, #52]	; (8006e60 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8006e2c:	f043 0304 	orr.w	r3, r3, #4
 8006e30:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8006e32:	79fb      	ldrb	r3, [r7, #7]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d101      	bne.n	8006e3c <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006e38:	bf30      	wfi
 8006e3a:	e002      	b.n	8006e42 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006e3c:	bf40      	sev
    __WFE();
 8006e3e:	bf20      	wfe
    __WFE();
 8006e40:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006e42:	4b07      	ldr	r3, [pc, #28]	; (8006e60 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	4a06      	ldr	r2, [pc, #24]	; (8006e60 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8006e48:	f023 0304 	bic.w	r3, r3, #4
 8006e4c:	6113      	str	r3, [r2, #16]
}
 8006e4e:	bf00      	nop
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	40007000 	.word	0x40007000
 8006e60:	e000ed00 	.word	0xe000ed00

08006e64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b088      	sub	sp, #32
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e3fe      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e76:	4ba1      	ldr	r3, [pc, #644]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f003 030c 	and.w	r3, r3, #12
 8006e7e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e80:	4b9e      	ldr	r3, [pc, #632]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f003 0303 	and.w	r3, r3, #3
 8006e88:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0310 	and.w	r3, r3, #16
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 80e4 	beq.w	8007060 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d007      	beq.n	8006eae <HAL_RCC_OscConfig+0x4a>
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	2b0c      	cmp	r3, #12
 8006ea2:	f040 808b 	bne.w	8006fbc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	f040 8087 	bne.w	8006fbc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006eae:	4b93      	ldr	r3, [pc, #588]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d005      	beq.n	8006ec6 <HAL_RCC_OscConfig+0x62>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e3d6      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1a      	ldr	r2, [r3, #32]
 8006eca:	4b8c      	ldr	r3, [pc, #560]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0308 	and.w	r3, r3, #8
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d004      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x7c>
 8006ed6:	4b89      	ldr	r3, [pc, #548]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ede:	e005      	b.n	8006eec <HAL_RCC_OscConfig+0x88>
 8006ee0:	4b86      	ldr	r3, [pc, #536]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8006ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ee6:	091b      	lsrs	r3, r3, #4
 8006ee8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d223      	bcs.n	8006f38 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a1b      	ldr	r3, [r3, #32]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f000 fd8b 	bl	8007a10 <RCC_SetFlashLatencyFromMSIRange>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e3b7      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f04:	4b7d      	ldr	r3, [pc, #500]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a7c      	ldr	r2, [pc, #496]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8006f0a:	f043 0308 	orr.w	r3, r3, #8
 8006f0e:	6013      	str	r3, [r2, #0]
 8006f10:	4b7a      	ldr	r3, [pc, #488]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a1b      	ldr	r3, [r3, #32]
 8006f1c:	4977      	ldr	r1, [pc, #476]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f22:	4b76      	ldr	r3, [pc, #472]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	021b      	lsls	r3, r3, #8
 8006f30:	4972      	ldr	r1, [pc, #456]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	604b      	str	r3, [r1, #4]
 8006f36:	e025      	b.n	8006f84 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f38:	4b70      	ldr	r3, [pc, #448]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a6f      	ldr	r2, [pc, #444]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8006f3e:	f043 0308 	orr.w	r3, r3, #8
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	4b6d      	ldr	r3, [pc, #436]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a1b      	ldr	r3, [r3, #32]
 8006f50:	496a      	ldr	r1, [pc, #424]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f56:	4b69      	ldr	r3, [pc, #420]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	021b      	lsls	r3, r3, #8
 8006f64:	4965      	ldr	r1, [pc, #404]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d109      	bne.n	8006f84 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 fd4b 	bl	8007a10 <RCC_SetFlashLatencyFromMSIRange>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d001      	beq.n	8006f84 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e377      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f84:	f000 fc80 	bl	8007888 <HAL_RCC_GetSysClockFreq>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	4b5c      	ldr	r3, [pc, #368]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	091b      	lsrs	r3, r3, #4
 8006f90:	f003 030f 	and.w	r3, r3, #15
 8006f94:	495a      	ldr	r1, [pc, #360]	; (8007100 <HAL_RCC_OscConfig+0x29c>)
 8006f96:	5ccb      	ldrb	r3, [r1, r3]
 8006f98:	f003 031f 	and.w	r3, r3, #31
 8006f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa0:	4a58      	ldr	r2, [pc, #352]	; (8007104 <HAL_RCC_OscConfig+0x2a0>)
 8006fa2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006fa4:	4b58      	ldr	r3, [pc, #352]	; (8007108 <HAL_RCC_OscConfig+0x2a4>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7fc ffdb 	bl	8003f64 <HAL_InitTick>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d052      	beq.n	800705e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
 8006fba:	e35b      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d032      	beq.n	800702a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006fc4:	4b4d      	ldr	r3, [pc, #308]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a4c      	ldr	r2, [pc, #304]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8006fca:	f043 0301 	orr.w	r3, r3, #1
 8006fce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006fd0:	f7fc ffd3 	bl	8003f7a <HAL_GetTick>
 8006fd4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006fd6:	e008      	b.n	8006fea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006fd8:	f7fc ffcf 	bl	8003f7a <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d901      	bls.n	8006fea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e344      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006fea:	4b44      	ldr	r3, [pc, #272]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d0f0      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ff6:	4b41      	ldr	r3, [pc, #260]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a40      	ldr	r2, [pc, #256]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8006ffc:	f043 0308 	orr.w	r3, r3, #8
 8007000:	6013      	str	r3, [r2, #0]
 8007002:	4b3e      	ldr	r3, [pc, #248]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	493b      	ldr	r1, [pc, #236]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8007010:	4313      	orrs	r3, r2
 8007012:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007014:	4b39      	ldr	r3, [pc, #228]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	69db      	ldr	r3, [r3, #28]
 8007020:	021b      	lsls	r3, r3, #8
 8007022:	4936      	ldr	r1, [pc, #216]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8007024:	4313      	orrs	r3, r2
 8007026:	604b      	str	r3, [r1, #4]
 8007028:	e01a      	b.n	8007060 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800702a:	4b34      	ldr	r3, [pc, #208]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a33      	ldr	r2, [pc, #204]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8007030:	f023 0301 	bic.w	r3, r3, #1
 8007034:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007036:	f7fc ffa0 	bl	8003f7a <HAL_GetTick>
 800703a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800703c:	e008      	b.n	8007050 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800703e:	f7fc ff9c 	bl	8003f7a <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	2b02      	cmp	r3, #2
 800704a:	d901      	bls.n	8007050 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e311      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007050:	4b2a      	ldr	r3, [pc, #168]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1f0      	bne.n	800703e <HAL_RCC_OscConfig+0x1da>
 800705c:	e000      	b.n	8007060 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800705e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	d074      	beq.n	8007156 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	2b08      	cmp	r3, #8
 8007070:	d005      	beq.n	800707e <HAL_RCC_OscConfig+0x21a>
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	2b0c      	cmp	r3, #12
 8007076:	d10e      	bne.n	8007096 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	2b03      	cmp	r3, #3
 800707c:	d10b      	bne.n	8007096 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800707e:	4b1f      	ldr	r3, [pc, #124]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d064      	beq.n	8007154 <HAL_RCC_OscConfig+0x2f0>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d160      	bne.n	8007154 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e2ee      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800709e:	d106      	bne.n	80070ae <HAL_RCC_OscConfig+0x24a>
 80070a0:	4b16      	ldr	r3, [pc, #88]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a15      	ldr	r2, [pc, #84]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 80070a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070aa:	6013      	str	r3, [r2, #0]
 80070ac:	e01d      	b.n	80070ea <HAL_RCC_OscConfig+0x286>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070b6:	d10c      	bne.n	80070d2 <HAL_RCC_OscConfig+0x26e>
 80070b8:	4b10      	ldr	r3, [pc, #64]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a0f      	ldr	r2, [pc, #60]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 80070be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070c2:	6013      	str	r3, [r2, #0]
 80070c4:	4b0d      	ldr	r3, [pc, #52]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a0c      	ldr	r2, [pc, #48]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 80070ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070ce:	6013      	str	r3, [r2, #0]
 80070d0:	e00b      	b.n	80070ea <HAL_RCC_OscConfig+0x286>
 80070d2:	4b0a      	ldr	r3, [pc, #40]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a09      	ldr	r2, [pc, #36]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 80070d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070dc:	6013      	str	r3, [r2, #0]
 80070de:	4b07      	ldr	r3, [pc, #28]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a06      	ldr	r2, [pc, #24]	; (80070fc <HAL_RCC_OscConfig+0x298>)
 80070e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d01c      	beq.n	800712c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f2:	f7fc ff42 	bl	8003f7a <HAL_GetTick>
 80070f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070f8:	e011      	b.n	800711e <HAL_RCC_OscConfig+0x2ba>
 80070fa:	bf00      	nop
 80070fc:	40021000 	.word	0x40021000
 8007100:	08011624 	.word	0x08011624
 8007104:	20000110 	.word	0x20000110
 8007108:	20000114 	.word	0x20000114
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800710c:	f7fc ff35 	bl	8003f7a <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	2b64      	cmp	r3, #100	; 0x64
 8007118:	d901      	bls.n	800711e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e2aa      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800711e:	4baf      	ldr	r3, [pc, #700]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d0f0      	beq.n	800710c <HAL_RCC_OscConfig+0x2a8>
 800712a:	e014      	b.n	8007156 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800712c:	f7fc ff25 	bl	8003f7a <HAL_GetTick>
 8007130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007132:	e008      	b.n	8007146 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007134:	f7fc ff21 	bl	8003f7a <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	2b64      	cmp	r3, #100	; 0x64
 8007140:	d901      	bls.n	8007146 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e296      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007146:	4ba5      	ldr	r3, [pc, #660]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1f0      	bne.n	8007134 <HAL_RCC_OscConfig+0x2d0>
 8007152:	e000      	b.n	8007156 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0302 	and.w	r3, r3, #2
 800715e:	2b00      	cmp	r3, #0
 8007160:	d060      	beq.n	8007224 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	2b04      	cmp	r3, #4
 8007166:	d005      	beq.n	8007174 <HAL_RCC_OscConfig+0x310>
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	2b0c      	cmp	r3, #12
 800716c:	d119      	bne.n	80071a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	2b02      	cmp	r3, #2
 8007172:	d116      	bne.n	80071a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007174:	4b99      	ldr	r3, [pc, #612]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800717c:	2b00      	cmp	r3, #0
 800717e:	d005      	beq.n	800718c <HAL_RCC_OscConfig+0x328>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e273      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800718c:	4b93      	ldr	r3, [pc, #588]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	061b      	lsls	r3, r3, #24
 800719a:	4990      	ldr	r1, [pc, #576]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 800719c:	4313      	orrs	r3, r2
 800719e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071a0:	e040      	b.n	8007224 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d023      	beq.n	80071f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071aa:	4b8c      	ldr	r3, [pc, #560]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a8b      	ldr	r2, [pc, #556]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 80071b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b6:	f7fc fee0 	bl	8003f7a <HAL_GetTick>
 80071ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071bc:	e008      	b.n	80071d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071be:	f7fc fedc 	bl	8003f7a <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d901      	bls.n	80071d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e251      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071d0:	4b82      	ldr	r3, [pc, #520]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0f0      	beq.n	80071be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071dc:	4b7f      	ldr	r3, [pc, #508]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	061b      	lsls	r3, r3, #24
 80071ea:	497c      	ldr	r1, [pc, #496]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	604b      	str	r3, [r1, #4]
 80071f0:	e018      	b.n	8007224 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071f2:	4b7a      	ldr	r3, [pc, #488]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a79      	ldr	r2, [pc, #484]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 80071f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071fe:	f7fc febc 	bl	8003f7a <HAL_GetTick>
 8007202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007204:	e008      	b.n	8007218 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007206:	f7fc feb8 	bl	8003f7a <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	2b02      	cmp	r3, #2
 8007212:	d901      	bls.n	8007218 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e22d      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007218:	4b70      	ldr	r3, [pc, #448]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1f0      	bne.n	8007206 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0308 	and.w	r3, r3, #8
 800722c:	2b00      	cmp	r3, #0
 800722e:	d03c      	beq.n	80072aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d01c      	beq.n	8007272 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007238:	4b68      	ldr	r3, [pc, #416]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 800723a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800723e:	4a67      	ldr	r2, [pc, #412]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 8007240:	f043 0301 	orr.w	r3, r3, #1
 8007244:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007248:	f7fc fe97 	bl	8003f7a <HAL_GetTick>
 800724c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800724e:	e008      	b.n	8007262 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007250:	f7fc fe93 	bl	8003f7a <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b02      	cmp	r3, #2
 800725c:	d901      	bls.n	8007262 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e208      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007262:	4b5e      	ldr	r3, [pc, #376]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 8007264:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0ef      	beq.n	8007250 <HAL_RCC_OscConfig+0x3ec>
 8007270:	e01b      	b.n	80072aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007272:	4b5a      	ldr	r3, [pc, #360]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 8007274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007278:	4a58      	ldr	r2, [pc, #352]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 800727a:	f023 0301 	bic.w	r3, r3, #1
 800727e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007282:	f7fc fe7a 	bl	8003f7a <HAL_GetTick>
 8007286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007288:	e008      	b.n	800729c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800728a:	f7fc fe76 	bl	8003f7a <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	2b02      	cmp	r3, #2
 8007296:	d901      	bls.n	800729c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e1eb      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800729c:	4b4f      	ldr	r3, [pc, #316]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 800729e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072a2:	f003 0302 	and.w	r3, r3, #2
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1ef      	bne.n	800728a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0304 	and.w	r3, r3, #4
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 80a6 	beq.w	8007404 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072b8:	2300      	movs	r3, #0
 80072ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80072bc:	4b47      	ldr	r3, [pc, #284]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 80072be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10d      	bne.n	80072e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072c8:	4b44      	ldr	r3, [pc, #272]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 80072ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072cc:	4a43      	ldr	r2, [pc, #268]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 80072ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072d2:	6593      	str	r3, [r2, #88]	; 0x58
 80072d4:	4b41      	ldr	r3, [pc, #260]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 80072d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072dc:	60bb      	str	r3, [r7, #8]
 80072de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072e0:	2301      	movs	r3, #1
 80072e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072e4:	4b3e      	ldr	r3, [pc, #248]	; (80073e0 <HAL_RCC_OscConfig+0x57c>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d118      	bne.n	8007322 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072f0:	4b3b      	ldr	r3, [pc, #236]	; (80073e0 <HAL_RCC_OscConfig+0x57c>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a3a      	ldr	r2, [pc, #232]	; (80073e0 <HAL_RCC_OscConfig+0x57c>)
 80072f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072fc:	f7fc fe3d 	bl	8003f7a <HAL_GetTick>
 8007300:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007302:	e008      	b.n	8007316 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007304:	f7fc fe39 	bl	8003f7a <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	2b02      	cmp	r3, #2
 8007310:	d901      	bls.n	8007316 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e1ae      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007316:	4b32      	ldr	r3, [pc, #200]	; (80073e0 <HAL_RCC_OscConfig+0x57c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731e:	2b00      	cmp	r3, #0
 8007320:	d0f0      	beq.n	8007304 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	2b01      	cmp	r3, #1
 8007328:	d108      	bne.n	800733c <HAL_RCC_OscConfig+0x4d8>
 800732a:	4b2c      	ldr	r3, [pc, #176]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 800732c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007330:	4a2a      	ldr	r2, [pc, #168]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 8007332:	f043 0301 	orr.w	r3, r3, #1
 8007336:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800733a:	e024      	b.n	8007386 <HAL_RCC_OscConfig+0x522>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	2b05      	cmp	r3, #5
 8007342:	d110      	bne.n	8007366 <HAL_RCC_OscConfig+0x502>
 8007344:	4b25      	ldr	r3, [pc, #148]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 8007346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800734a:	4a24      	ldr	r2, [pc, #144]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 800734c:	f043 0304 	orr.w	r3, r3, #4
 8007350:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007354:	4b21      	ldr	r3, [pc, #132]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 8007356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800735a:	4a20      	ldr	r2, [pc, #128]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 800735c:	f043 0301 	orr.w	r3, r3, #1
 8007360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007364:	e00f      	b.n	8007386 <HAL_RCC_OscConfig+0x522>
 8007366:	4b1d      	ldr	r3, [pc, #116]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 8007368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800736c:	4a1b      	ldr	r2, [pc, #108]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 800736e:	f023 0301 	bic.w	r3, r3, #1
 8007372:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007376:	4b19      	ldr	r3, [pc, #100]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 8007378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800737c:	4a17      	ldr	r2, [pc, #92]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 800737e:	f023 0304 	bic.w	r3, r3, #4
 8007382:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d016      	beq.n	80073bc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800738e:	f7fc fdf4 	bl	8003f7a <HAL_GetTick>
 8007392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007394:	e00a      	b.n	80073ac <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007396:	f7fc fdf0 	bl	8003f7a <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d901      	bls.n	80073ac <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e163      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073ac:	4b0b      	ldr	r3, [pc, #44]	; (80073dc <HAL_RCC_OscConfig+0x578>)
 80073ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d0ed      	beq.n	8007396 <HAL_RCC_OscConfig+0x532>
 80073ba:	e01a      	b.n	80073f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073bc:	f7fc fddd 	bl	8003f7a <HAL_GetTick>
 80073c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80073c2:	e00f      	b.n	80073e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073c4:	f7fc fdd9 	bl	8003f7a <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d906      	bls.n	80073e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e14c      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
 80073da:	bf00      	nop
 80073dc:	40021000 	.word	0x40021000
 80073e0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80073e4:	4ba5      	ldr	r3, [pc, #660]	; (800767c <HAL_RCC_OscConfig+0x818>)
 80073e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1e8      	bne.n	80073c4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80073f2:	7ffb      	ldrb	r3, [r7, #31]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d105      	bne.n	8007404 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073f8:	4ba0      	ldr	r3, [pc, #640]	; (800767c <HAL_RCC_OscConfig+0x818>)
 80073fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073fc:	4a9f      	ldr	r2, [pc, #636]	; (800767c <HAL_RCC_OscConfig+0x818>)
 80073fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007402:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0320 	and.w	r3, r3, #32
 800740c:	2b00      	cmp	r3, #0
 800740e:	d03c      	beq.n	800748a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007414:	2b00      	cmp	r3, #0
 8007416:	d01c      	beq.n	8007452 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007418:	4b98      	ldr	r3, [pc, #608]	; (800767c <HAL_RCC_OscConfig+0x818>)
 800741a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800741e:	4a97      	ldr	r2, [pc, #604]	; (800767c <HAL_RCC_OscConfig+0x818>)
 8007420:	f043 0301 	orr.w	r3, r3, #1
 8007424:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007428:	f7fc fda7 	bl	8003f7a <HAL_GetTick>
 800742c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800742e:	e008      	b.n	8007442 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007430:	f7fc fda3 	bl	8003f7a <HAL_GetTick>
 8007434:	4602      	mov	r2, r0
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	2b02      	cmp	r3, #2
 800743c:	d901      	bls.n	8007442 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e118      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007442:	4b8e      	ldr	r3, [pc, #568]	; (800767c <HAL_RCC_OscConfig+0x818>)
 8007444:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007448:	f003 0302 	and.w	r3, r3, #2
 800744c:	2b00      	cmp	r3, #0
 800744e:	d0ef      	beq.n	8007430 <HAL_RCC_OscConfig+0x5cc>
 8007450:	e01b      	b.n	800748a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007452:	4b8a      	ldr	r3, [pc, #552]	; (800767c <HAL_RCC_OscConfig+0x818>)
 8007454:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007458:	4a88      	ldr	r2, [pc, #544]	; (800767c <HAL_RCC_OscConfig+0x818>)
 800745a:	f023 0301 	bic.w	r3, r3, #1
 800745e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007462:	f7fc fd8a 	bl	8003f7a <HAL_GetTick>
 8007466:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007468:	e008      	b.n	800747c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800746a:	f7fc fd86 	bl	8003f7a <HAL_GetTick>
 800746e:	4602      	mov	r2, r0
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	2b02      	cmp	r3, #2
 8007476:	d901      	bls.n	800747c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	e0fb      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800747c:	4b7f      	ldr	r3, [pc, #508]	; (800767c <HAL_RCC_OscConfig+0x818>)
 800747e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1ef      	bne.n	800746a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748e:	2b00      	cmp	r3, #0
 8007490:	f000 80ef 	beq.w	8007672 <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007498:	2b02      	cmp	r3, #2
 800749a:	f040 80c5 	bne.w	8007628 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800749e:	4b77      	ldr	r3, [pc, #476]	; (800767c <HAL_RCC_OscConfig+0x818>)
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f003 0203 	and.w	r2, r3, #3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d12c      	bne.n	800750c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074bc:	3b01      	subs	r3, #1
 80074be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d123      	bne.n	800750c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d11b      	bne.n	800750c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d113      	bne.n	800750c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ee:	085b      	lsrs	r3, r3, #1
 80074f0:	3b01      	subs	r3, #1
 80074f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d109      	bne.n	800750c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007502:	085b      	lsrs	r3, r3, #1
 8007504:	3b01      	subs	r3, #1
 8007506:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007508:	429a      	cmp	r2, r3
 800750a:	d067      	beq.n	80075dc <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	2b0c      	cmp	r3, #12
 8007510:	d062      	beq.n	80075d8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007512:	4b5a      	ldr	r3, [pc, #360]	; (800767c <HAL_RCC_OscConfig+0x818>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d001      	beq.n	8007522 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e0a8      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007522:	4b56      	ldr	r3, [pc, #344]	; (800767c <HAL_RCC_OscConfig+0x818>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a55      	ldr	r2, [pc, #340]	; (800767c <HAL_RCC_OscConfig+0x818>)
 8007528:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800752c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800752e:	f7fc fd24 	bl	8003f7a <HAL_GetTick>
 8007532:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007534:	e008      	b.n	8007548 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007536:	f7fc fd20 	bl	8003f7a <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	2b02      	cmp	r3, #2
 8007542:	d901      	bls.n	8007548 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007544:	2303      	movs	r3, #3
 8007546:	e095      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007548:	4b4c      	ldr	r3, [pc, #304]	; (800767c <HAL_RCC_OscConfig+0x818>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1f0      	bne.n	8007536 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007554:	4b49      	ldr	r3, [pc, #292]	; (800767c <HAL_RCC_OscConfig+0x818>)
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	4b49      	ldr	r3, [pc, #292]	; (8007680 <HAL_RCC_OscConfig+0x81c>)
 800755a:	4013      	ands	r3, r2
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007564:	3a01      	subs	r2, #1
 8007566:	0112      	lsls	r2, r2, #4
 8007568:	4311      	orrs	r1, r2
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800756e:	0212      	lsls	r2, r2, #8
 8007570:	4311      	orrs	r1, r2
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007576:	0852      	lsrs	r2, r2, #1
 8007578:	3a01      	subs	r2, #1
 800757a:	0552      	lsls	r2, r2, #21
 800757c:	4311      	orrs	r1, r2
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007582:	0852      	lsrs	r2, r2, #1
 8007584:	3a01      	subs	r2, #1
 8007586:	0652      	lsls	r2, r2, #25
 8007588:	4311      	orrs	r1, r2
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800758e:	06d2      	lsls	r2, r2, #27
 8007590:	430a      	orrs	r2, r1
 8007592:	493a      	ldr	r1, [pc, #232]	; (800767c <HAL_RCC_OscConfig+0x818>)
 8007594:	4313      	orrs	r3, r2
 8007596:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007598:	4b38      	ldr	r3, [pc, #224]	; (800767c <HAL_RCC_OscConfig+0x818>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a37      	ldr	r2, [pc, #220]	; (800767c <HAL_RCC_OscConfig+0x818>)
 800759e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80075a4:	4b35      	ldr	r3, [pc, #212]	; (800767c <HAL_RCC_OscConfig+0x818>)
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	4a34      	ldr	r2, [pc, #208]	; (800767c <HAL_RCC_OscConfig+0x818>)
 80075aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80075b0:	f7fc fce3 	bl	8003f7a <HAL_GetTick>
 80075b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075b6:	e008      	b.n	80075ca <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075b8:	f7fc fcdf 	bl	8003f7a <HAL_GetTick>
 80075bc:	4602      	mov	r2, r0
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	2b02      	cmp	r3, #2
 80075c4:	d901      	bls.n	80075ca <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e054      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075ca:	4b2c      	ldr	r3, [pc, #176]	; (800767c <HAL_RCC_OscConfig+0x818>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d0f0      	beq.n	80075b8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80075d6:	e04c      	b.n	8007672 <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e04b      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075dc:	4b27      	ldr	r3, [pc, #156]	; (800767c <HAL_RCC_OscConfig+0x818>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d144      	bne.n	8007672 <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80075e8:	4b24      	ldr	r3, [pc, #144]	; (800767c <HAL_RCC_OscConfig+0x818>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a23      	ldr	r2, [pc, #140]	; (800767c <HAL_RCC_OscConfig+0x818>)
 80075ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80075f4:	4b21      	ldr	r3, [pc, #132]	; (800767c <HAL_RCC_OscConfig+0x818>)
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	4a20      	ldr	r2, [pc, #128]	; (800767c <HAL_RCC_OscConfig+0x818>)
 80075fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007600:	f7fc fcbb 	bl	8003f7a <HAL_GetTick>
 8007604:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007606:	e008      	b.n	800761a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007608:	f7fc fcb7 	bl	8003f7a <HAL_GetTick>
 800760c:	4602      	mov	r2, r0
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	2b02      	cmp	r3, #2
 8007614:	d901      	bls.n	800761a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e02c      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800761a:	4b18      	ldr	r3, [pc, #96]	; (800767c <HAL_RCC_OscConfig+0x818>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d0f0      	beq.n	8007608 <HAL_RCC_OscConfig+0x7a4>
 8007626:	e024      	b.n	8007672 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	2b0c      	cmp	r3, #12
 800762c:	d01f      	beq.n	800766e <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800762e:	4b13      	ldr	r3, [pc, #76]	; (800767c <HAL_RCC_OscConfig+0x818>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a12      	ldr	r2, [pc, #72]	; (800767c <HAL_RCC_OscConfig+0x818>)
 8007634:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800763a:	f7fc fc9e 	bl	8003f7a <HAL_GetTick>
 800763e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007640:	e008      	b.n	8007654 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007642:	f7fc fc9a 	bl	8003f7a <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	2b02      	cmp	r3, #2
 800764e:	d901      	bls.n	8007654 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e00f      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007654:	4b09      	ldr	r3, [pc, #36]	; (800767c <HAL_RCC_OscConfig+0x818>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1f0      	bne.n	8007642 <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007660:	4b06      	ldr	r3, [pc, #24]	; (800767c <HAL_RCC_OscConfig+0x818>)
 8007662:	68da      	ldr	r2, [r3, #12]
 8007664:	4905      	ldr	r1, [pc, #20]	; (800767c <HAL_RCC_OscConfig+0x818>)
 8007666:	4b07      	ldr	r3, [pc, #28]	; (8007684 <HAL_RCC_OscConfig+0x820>)
 8007668:	4013      	ands	r3, r2
 800766a:	60cb      	str	r3, [r1, #12]
 800766c:	e001      	b.n	8007672 <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e000      	b.n	8007674 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3720      	adds	r7, #32
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	40021000 	.word	0x40021000
 8007680:	019d808c 	.word	0x019d808c
 8007684:	feeefffc 	.word	0xfeeefffc

08007688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d101      	bne.n	800769c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e0e7      	b.n	800786c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800769c:	4b75      	ldr	r3, [pc, #468]	; (8007874 <HAL_RCC_ClockConfig+0x1ec>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0307 	and.w	r3, r3, #7
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d910      	bls.n	80076cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076aa:	4b72      	ldr	r3, [pc, #456]	; (8007874 <HAL_RCC_ClockConfig+0x1ec>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f023 0207 	bic.w	r2, r3, #7
 80076b2:	4970      	ldr	r1, [pc, #448]	; (8007874 <HAL_RCC_ClockConfig+0x1ec>)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ba:	4b6e      	ldr	r3, [pc, #440]	; (8007874 <HAL_RCC_ClockConfig+0x1ec>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0307 	and.w	r3, r3, #7
 80076c2:	683a      	ldr	r2, [r7, #0]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d001      	beq.n	80076cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e0cf      	b.n	800786c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 0302 	and.w	r3, r3, #2
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d010      	beq.n	80076fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	689a      	ldr	r2, [r3, #8]
 80076dc:	4b66      	ldr	r3, [pc, #408]	; (8007878 <HAL_RCC_ClockConfig+0x1f0>)
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d908      	bls.n	80076fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076e8:	4b63      	ldr	r3, [pc, #396]	; (8007878 <HAL_RCC_ClockConfig+0x1f0>)
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	4960      	ldr	r1, [pc, #384]	; (8007878 <HAL_RCC_ClockConfig+0x1f0>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b00      	cmp	r3, #0
 8007704:	d04c      	beq.n	80077a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	2b03      	cmp	r3, #3
 800770c:	d107      	bne.n	800771e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800770e:	4b5a      	ldr	r3, [pc, #360]	; (8007878 <HAL_RCC_ClockConfig+0x1f0>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d121      	bne.n	800775e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e0a6      	b.n	800786c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	2b02      	cmp	r3, #2
 8007724:	d107      	bne.n	8007736 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007726:	4b54      	ldr	r3, [pc, #336]	; (8007878 <HAL_RCC_ClockConfig+0x1f0>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d115      	bne.n	800775e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e09a      	b.n	800786c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d107      	bne.n	800774e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800773e:	4b4e      	ldr	r3, [pc, #312]	; (8007878 <HAL_RCC_ClockConfig+0x1f0>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d109      	bne.n	800775e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e08e      	b.n	800786c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800774e:	4b4a      	ldr	r3, [pc, #296]	; (8007878 <HAL_RCC_ClockConfig+0x1f0>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007756:	2b00      	cmp	r3, #0
 8007758:	d101      	bne.n	800775e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e086      	b.n	800786c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800775e:	4b46      	ldr	r3, [pc, #280]	; (8007878 <HAL_RCC_ClockConfig+0x1f0>)
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f023 0203 	bic.w	r2, r3, #3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	4943      	ldr	r1, [pc, #268]	; (8007878 <HAL_RCC_ClockConfig+0x1f0>)
 800776c:	4313      	orrs	r3, r2
 800776e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007770:	f7fc fc03 	bl	8003f7a <HAL_GetTick>
 8007774:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007776:	e00a      	b.n	800778e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007778:	f7fc fbff 	bl	8003f7a <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	f241 3288 	movw	r2, #5000	; 0x1388
 8007786:	4293      	cmp	r3, r2
 8007788:	d901      	bls.n	800778e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e06e      	b.n	800786c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800778e:	4b3a      	ldr	r3, [pc, #232]	; (8007878 <HAL_RCC_ClockConfig+0x1f0>)
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f003 020c 	and.w	r2, r3, #12
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	429a      	cmp	r2, r3
 800779e:	d1eb      	bne.n	8007778 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d010      	beq.n	80077ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	689a      	ldr	r2, [r3, #8]
 80077b0:	4b31      	ldr	r3, [pc, #196]	; (8007878 <HAL_RCC_ClockConfig+0x1f0>)
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d208      	bcs.n	80077ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077bc:	4b2e      	ldr	r3, [pc, #184]	; (8007878 <HAL_RCC_ClockConfig+0x1f0>)
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	492b      	ldr	r1, [pc, #172]	; (8007878 <HAL_RCC_ClockConfig+0x1f0>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80077ce:	4b29      	ldr	r3, [pc, #164]	; (8007874 <HAL_RCC_ClockConfig+0x1ec>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 0307 	and.w	r3, r3, #7
 80077d6:	683a      	ldr	r2, [r7, #0]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d210      	bcs.n	80077fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077dc:	4b25      	ldr	r3, [pc, #148]	; (8007874 <HAL_RCC_ClockConfig+0x1ec>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f023 0207 	bic.w	r2, r3, #7
 80077e4:	4923      	ldr	r1, [pc, #140]	; (8007874 <HAL_RCC_ClockConfig+0x1ec>)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ec:	4b21      	ldr	r3, [pc, #132]	; (8007874 <HAL_RCC_ClockConfig+0x1ec>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0307 	and.w	r3, r3, #7
 80077f4:	683a      	ldr	r2, [r7, #0]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d001      	beq.n	80077fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e036      	b.n	800786c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0304 	and.w	r3, r3, #4
 8007806:	2b00      	cmp	r3, #0
 8007808:	d008      	beq.n	800781c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800780a:	4b1b      	ldr	r3, [pc, #108]	; (8007878 <HAL_RCC_ClockConfig+0x1f0>)
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	4918      	ldr	r1, [pc, #96]	; (8007878 <HAL_RCC_ClockConfig+0x1f0>)
 8007818:	4313      	orrs	r3, r2
 800781a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0308 	and.w	r3, r3, #8
 8007824:	2b00      	cmp	r3, #0
 8007826:	d009      	beq.n	800783c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007828:	4b13      	ldr	r3, [pc, #76]	; (8007878 <HAL_RCC_ClockConfig+0x1f0>)
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	00db      	lsls	r3, r3, #3
 8007836:	4910      	ldr	r1, [pc, #64]	; (8007878 <HAL_RCC_ClockConfig+0x1f0>)
 8007838:	4313      	orrs	r3, r2
 800783a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800783c:	f000 f824 	bl	8007888 <HAL_RCC_GetSysClockFreq>
 8007840:	4602      	mov	r2, r0
 8007842:	4b0d      	ldr	r3, [pc, #52]	; (8007878 <HAL_RCC_ClockConfig+0x1f0>)
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	091b      	lsrs	r3, r3, #4
 8007848:	f003 030f 	and.w	r3, r3, #15
 800784c:	490b      	ldr	r1, [pc, #44]	; (800787c <HAL_RCC_ClockConfig+0x1f4>)
 800784e:	5ccb      	ldrb	r3, [r1, r3]
 8007850:	f003 031f 	and.w	r3, r3, #31
 8007854:	fa22 f303 	lsr.w	r3, r2, r3
 8007858:	4a09      	ldr	r2, [pc, #36]	; (8007880 <HAL_RCC_ClockConfig+0x1f8>)
 800785a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800785c:	4b09      	ldr	r3, [pc, #36]	; (8007884 <HAL_RCC_ClockConfig+0x1fc>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4618      	mov	r0, r3
 8007862:	f7fc fb7f 	bl	8003f64 <HAL_InitTick>
 8007866:	4603      	mov	r3, r0
 8007868:	72fb      	strb	r3, [r7, #11]

  return status;
 800786a:	7afb      	ldrb	r3, [r7, #11]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	40022000 	.word	0x40022000
 8007878:	40021000 	.word	0x40021000
 800787c:	08011624 	.word	0x08011624
 8007880:	20000110 	.word	0x20000110
 8007884:	20000114 	.word	0x20000114

08007888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007888:	b480      	push	{r7}
 800788a:	b089      	sub	sp, #36	; 0x24
 800788c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	61fb      	str	r3, [r7, #28]
 8007892:	2300      	movs	r3, #0
 8007894:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007896:	4b3e      	ldr	r3, [pc, #248]	; (8007990 <HAL_RCC_GetSysClockFreq+0x108>)
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f003 030c 	and.w	r3, r3, #12
 800789e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80078a0:	4b3b      	ldr	r3, [pc, #236]	; (8007990 <HAL_RCC_GetSysClockFreq+0x108>)
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	f003 0303 	and.w	r3, r3, #3
 80078a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d005      	beq.n	80078bc <HAL_RCC_GetSysClockFreq+0x34>
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	2b0c      	cmp	r3, #12
 80078b4:	d121      	bne.n	80078fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d11e      	bne.n	80078fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80078bc:	4b34      	ldr	r3, [pc, #208]	; (8007990 <HAL_RCC_GetSysClockFreq+0x108>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0308 	and.w	r3, r3, #8
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d107      	bne.n	80078d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80078c8:	4b31      	ldr	r3, [pc, #196]	; (8007990 <HAL_RCC_GetSysClockFreq+0x108>)
 80078ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078ce:	0a1b      	lsrs	r3, r3, #8
 80078d0:	f003 030f 	and.w	r3, r3, #15
 80078d4:	61fb      	str	r3, [r7, #28]
 80078d6:	e005      	b.n	80078e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80078d8:	4b2d      	ldr	r3, [pc, #180]	; (8007990 <HAL_RCC_GetSysClockFreq+0x108>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	091b      	lsrs	r3, r3, #4
 80078de:	f003 030f 	and.w	r3, r3, #15
 80078e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80078e4:	4a2b      	ldr	r2, [pc, #172]	; (8007994 <HAL_RCC_GetSysClockFreq+0x10c>)
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10d      	bne.n	8007910 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078f8:	e00a      	b.n	8007910 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	2b04      	cmp	r3, #4
 80078fe:	d102      	bne.n	8007906 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007900:	4b25      	ldr	r3, [pc, #148]	; (8007998 <HAL_RCC_GetSysClockFreq+0x110>)
 8007902:	61bb      	str	r3, [r7, #24]
 8007904:	e004      	b.n	8007910 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	2b08      	cmp	r3, #8
 800790a:	d101      	bne.n	8007910 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800790c:	4b23      	ldr	r3, [pc, #140]	; (800799c <HAL_RCC_GetSysClockFreq+0x114>)
 800790e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	2b0c      	cmp	r3, #12
 8007914:	d134      	bne.n	8007980 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007916:	4b1e      	ldr	r3, [pc, #120]	; (8007990 <HAL_RCC_GetSysClockFreq+0x108>)
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	f003 0303 	and.w	r3, r3, #3
 800791e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	2b02      	cmp	r3, #2
 8007924:	d003      	beq.n	800792e <HAL_RCC_GetSysClockFreq+0xa6>
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	2b03      	cmp	r3, #3
 800792a:	d003      	beq.n	8007934 <HAL_RCC_GetSysClockFreq+0xac>
 800792c:	e005      	b.n	800793a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800792e:	4b1a      	ldr	r3, [pc, #104]	; (8007998 <HAL_RCC_GetSysClockFreq+0x110>)
 8007930:	617b      	str	r3, [r7, #20]
      break;
 8007932:	e005      	b.n	8007940 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007934:	4b19      	ldr	r3, [pc, #100]	; (800799c <HAL_RCC_GetSysClockFreq+0x114>)
 8007936:	617b      	str	r3, [r7, #20]
      break;
 8007938:	e002      	b.n	8007940 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	617b      	str	r3, [r7, #20]
      break;
 800793e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007940:	4b13      	ldr	r3, [pc, #76]	; (8007990 <HAL_RCC_GetSysClockFreq+0x108>)
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	091b      	lsrs	r3, r3, #4
 8007946:	f003 0307 	and.w	r3, r3, #7
 800794a:	3301      	adds	r3, #1
 800794c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800794e:	4b10      	ldr	r3, [pc, #64]	; (8007990 <HAL_RCC_GetSysClockFreq+0x108>)
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	0a1b      	lsrs	r3, r3, #8
 8007954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	fb02 f203 	mul.w	r2, r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	fbb2 f3f3 	udiv	r3, r2, r3
 8007964:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007966:	4b0a      	ldr	r3, [pc, #40]	; (8007990 <HAL_RCC_GetSysClockFreq+0x108>)
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	0e5b      	lsrs	r3, r3, #25
 800796c:	f003 0303 	and.w	r3, r3, #3
 8007970:	3301      	adds	r3, #1
 8007972:	005b      	lsls	r3, r3, #1
 8007974:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	fbb2 f3f3 	udiv	r3, r2, r3
 800797e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007980:	69bb      	ldr	r3, [r7, #24]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3724      	adds	r7, #36	; 0x24
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	40021000 	.word	0x40021000
 8007994:	0801163c 	.word	0x0801163c
 8007998:	00f42400 	.word	0x00f42400
 800799c:	007a1200 	.word	0x007a1200

080079a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079a0:	b480      	push	{r7}
 80079a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079a4:	4b03      	ldr	r3, [pc, #12]	; (80079b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80079a6:	681b      	ldr	r3, [r3, #0]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	20000110 	.word	0x20000110

080079b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80079bc:	f7ff fff0 	bl	80079a0 <HAL_RCC_GetHCLKFreq>
 80079c0:	4602      	mov	r2, r0
 80079c2:	4b06      	ldr	r3, [pc, #24]	; (80079dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	0a1b      	lsrs	r3, r3, #8
 80079c8:	f003 0307 	and.w	r3, r3, #7
 80079cc:	4904      	ldr	r1, [pc, #16]	; (80079e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80079ce:	5ccb      	ldrb	r3, [r1, r3]
 80079d0:	f003 031f 	and.w	r3, r3, #31
 80079d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079d8:	4618      	mov	r0, r3
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	40021000 	.word	0x40021000
 80079e0:	08011634 	.word	0x08011634

080079e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80079e8:	f7ff ffda 	bl	80079a0 <HAL_RCC_GetHCLKFreq>
 80079ec:	4602      	mov	r2, r0
 80079ee:	4b06      	ldr	r3, [pc, #24]	; (8007a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	0adb      	lsrs	r3, r3, #11
 80079f4:	f003 0307 	and.w	r3, r3, #7
 80079f8:	4904      	ldr	r1, [pc, #16]	; (8007a0c <HAL_RCC_GetPCLK2Freq+0x28>)
 80079fa:	5ccb      	ldrb	r3, [r1, r3]
 80079fc:	f003 031f 	and.w	r3, r3, #31
 8007a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	40021000 	.word	0x40021000
 8007a0c:	08011634 	.word	0x08011634

08007a10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007a18:	2300      	movs	r3, #0
 8007a1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007a1c:	4b2a      	ldr	r3, [pc, #168]	; (8007ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d003      	beq.n	8007a30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007a28:	f7ff f91a 	bl	8006c60 <HAL_PWREx_GetVoltageRange>
 8007a2c:	6178      	str	r0, [r7, #20]
 8007a2e:	e014      	b.n	8007a5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a30:	4b25      	ldr	r3, [pc, #148]	; (8007ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a34:	4a24      	ldr	r2, [pc, #144]	; (8007ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a3a:	6593      	str	r3, [r2, #88]	; 0x58
 8007a3c:	4b22      	ldr	r3, [pc, #136]	; (8007ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a44:	60fb      	str	r3, [r7, #12]
 8007a46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007a48:	f7ff f90a 	bl	8006c60 <HAL_PWREx_GetVoltageRange>
 8007a4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007a4e:	4b1e      	ldr	r3, [pc, #120]	; (8007ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a52:	4a1d      	ldr	r2, [pc, #116]	; (8007ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a60:	d10b      	bne.n	8007a7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b80      	cmp	r3, #128	; 0x80
 8007a66:	d919      	bls.n	8007a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2ba0      	cmp	r3, #160	; 0xa0
 8007a6c:	d902      	bls.n	8007a74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a6e:	2302      	movs	r3, #2
 8007a70:	613b      	str	r3, [r7, #16]
 8007a72:	e013      	b.n	8007a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a74:	2301      	movs	r3, #1
 8007a76:	613b      	str	r3, [r7, #16]
 8007a78:	e010      	b.n	8007a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b80      	cmp	r3, #128	; 0x80
 8007a7e:	d902      	bls.n	8007a86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007a80:	2303      	movs	r3, #3
 8007a82:	613b      	str	r3, [r7, #16]
 8007a84:	e00a      	b.n	8007a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b80      	cmp	r3, #128	; 0x80
 8007a8a:	d102      	bne.n	8007a92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	613b      	str	r3, [r7, #16]
 8007a90:	e004      	b.n	8007a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b70      	cmp	r3, #112	; 0x70
 8007a96:	d101      	bne.n	8007a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a98:	2301      	movs	r3, #1
 8007a9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007a9c:	4b0b      	ldr	r3, [pc, #44]	; (8007acc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f023 0207 	bic.w	r2, r3, #7
 8007aa4:	4909      	ldr	r1, [pc, #36]	; (8007acc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007aac:	4b07      	ldr	r3, [pc, #28]	; (8007acc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0307 	and.w	r3, r3, #7
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d001      	beq.n	8007abe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e000      	b.n	8007ac0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	40021000 	.word	0x40021000
 8007acc:	40022000 	.word	0x40022000

08007ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ad8:	2300      	movs	r3, #0
 8007ada:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007adc:	2300      	movs	r3, #0
 8007ade:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d031      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007af0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007af4:	d01a      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007af6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007afa:	d814      	bhi.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d009      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007b00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b04:	d10f      	bne.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007b06:	4b5d      	ldr	r3, [pc, #372]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	4a5c      	ldr	r2, [pc, #368]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b10:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007b12:	e00c      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3304      	adds	r3, #4
 8007b18:	2100      	movs	r1, #0
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 fa44 	bl	8007fa8 <RCCEx_PLLSAI1_Config>
 8007b20:	4603      	mov	r3, r0
 8007b22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007b24:	e003      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	74fb      	strb	r3, [r7, #19]
      break;
 8007b2a:	e000      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007b2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b2e:	7cfb      	ldrb	r3, [r7, #19]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10b      	bne.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b34:	4b51      	ldr	r3, [pc, #324]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b42:	494e      	ldr	r1, [pc, #312]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007b4a:	e001      	b.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b4c:	7cfb      	ldrb	r3, [r7, #19]
 8007b4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 809e 	beq.w	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007b62:	4b46      	ldr	r3, [pc, #280]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e000      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007b72:	2300      	movs	r3, #0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00d      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b78:	4b40      	ldr	r3, [pc, #256]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b7c:	4a3f      	ldr	r2, [pc, #252]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b82:	6593      	str	r3, [r2, #88]	; 0x58
 8007b84:	4b3d      	ldr	r3, [pc, #244]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b8c:	60bb      	str	r3, [r7, #8]
 8007b8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b90:	2301      	movs	r3, #1
 8007b92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b94:	4b3a      	ldr	r3, [pc, #232]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a39      	ldr	r2, [pc, #228]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ba0:	f7fc f9eb 	bl	8003f7a <HAL_GetTick>
 8007ba4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007ba6:	e009      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ba8:	f7fc f9e7 	bl	8003f7a <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d902      	bls.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	74fb      	strb	r3, [r7, #19]
        break;
 8007bba:	e005      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007bbc:	4b30      	ldr	r3, [pc, #192]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d0ef      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007bc8:	7cfb      	ldrb	r3, [r7, #19]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d15a      	bne.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007bce:	4b2b      	ldr	r3, [pc, #172]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bd8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d01e      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d019      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007bea:	4b24      	ldr	r3, [pc, #144]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bf4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007bf6:	4b21      	ldr	r3, [pc, #132]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfc:	4a1f      	ldr	r2, [pc, #124]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c06:	4b1d      	ldr	r3, [pc, #116]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c0c:	4a1b      	ldr	r2, [pc, #108]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007c16:	4a19      	ldr	r2, [pc, #100]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f003 0301 	and.w	r3, r3, #1
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d016      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c28:	f7fc f9a7 	bl	8003f7a <HAL_GetTick>
 8007c2c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c2e:	e00b      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c30:	f7fc f9a3 	bl	8003f7a <HAL_GetTick>
 8007c34:	4602      	mov	r2, r0
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d902      	bls.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	74fb      	strb	r3, [r7, #19]
            break;
 8007c46:	e006      	b.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c48:	4b0c      	ldr	r3, [pc, #48]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c4e:	f003 0302 	and.w	r3, r3, #2
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d0ec      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007c56:	7cfb      	ldrb	r3, [r7, #19]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10b      	bne.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c5c:	4b07      	ldr	r3, [pc, #28]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c6a:	4904      	ldr	r1, [pc, #16]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007c72:	e009      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c74:	7cfb      	ldrb	r3, [r7, #19]
 8007c76:	74bb      	strb	r3, [r7, #18]
 8007c78:	e006      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007c7a:	bf00      	nop
 8007c7c:	40021000 	.word	0x40021000
 8007c80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c84:	7cfb      	ldrb	r3, [r7, #19]
 8007c86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c88:	7c7b      	ldrb	r3, [r7, #17]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d105      	bne.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c8e:	4b9e      	ldr	r3, [pc, #632]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c92:	4a9d      	ldr	r2, [pc, #628]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00a      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ca6:	4b98      	ldr	r3, [pc, #608]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cac:	f023 0203 	bic.w	r2, r3, #3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	4994      	ldr	r1, [pc, #592]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0302 	and.w	r3, r3, #2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00a      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007cc8:	4b8f      	ldr	r3, [pc, #572]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cce:	f023 020c 	bic.w	r2, r3, #12
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd6:	498c      	ldr	r1, [pc, #560]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0304 	and.w	r3, r3, #4
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00a      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007cea:	4b87      	ldr	r3, [pc, #540]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cf0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf8:	4983      	ldr	r1, [pc, #524]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0308 	and.w	r3, r3, #8
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00a      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007d0c:	4b7e      	ldr	r3, [pc, #504]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1a:	497b      	ldr	r1, [pc, #492]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 0320 	and.w	r3, r3, #32
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00a      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d2e:	4b76      	ldr	r3, [pc, #472]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d34:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3c:	4972      	ldr	r1, [pc, #456]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00a      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d50:	4b6d      	ldr	r3, [pc, #436]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d56:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d5e:	496a      	ldr	r1, [pc, #424]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00a      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d72:	4b65      	ldr	r3, [pc, #404]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d80:	4961      	ldr	r1, [pc, #388]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00a      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d94:	4b5c      	ldr	r3, [pc, #368]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da2:	4959      	ldr	r1, [pc, #356]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00a      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007db6:	4b54      	ldr	r3, [pc, #336]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc4:	4950      	ldr	r1, [pc, #320]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00a      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007dd8:	4b4b      	ldr	r3, [pc, #300]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de6:	4948      	ldr	r1, [pc, #288]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007de8:	4313      	orrs	r3, r2
 8007dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00a      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007dfa:	4b43      	ldr	r3, [pc, #268]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007dfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e00:	f023 0203 	bic.w	r2, r3, #3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e08:	493f      	ldr	r1, [pc, #252]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d028      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e1c:	4b3a      	ldr	r3, [pc, #232]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e2a:	4937      	ldr	r1, [pc, #220]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e3a:	d106      	bne.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e3c:	4b32      	ldr	r3, [pc, #200]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	4a31      	ldr	r2, [pc, #196]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e46:	60d3      	str	r3, [r2, #12]
 8007e48:	e011      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e52:	d10c      	bne.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	3304      	adds	r3, #4
 8007e58:	2101      	movs	r1, #1
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 f8a4 	bl	8007fa8 <RCCEx_PLLSAI1_Config>
 8007e60:	4603      	mov	r3, r0
 8007e62:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007e64:	7cfb      	ldrb	r3, [r7, #19]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8007e6a:	7cfb      	ldrb	r3, [r7, #19]
 8007e6c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d028      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007e7a:	4b23      	ldr	r3, [pc, #140]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e80:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e88:	491f      	ldr	r1, [pc, #124]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e98:	d106      	bne.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e9a:	4b1b      	ldr	r3, [pc, #108]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	4a1a      	ldr	r2, [pc, #104]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007ea0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ea4:	60d3      	str	r3, [r2, #12]
 8007ea6:	e011      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007eb0:	d10c      	bne.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	3304      	adds	r3, #4
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 f875 	bl	8007fa8 <RCCEx_PLLSAI1_Config>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ec2:	7cfb      	ldrb	r3, [r7, #19]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8007ec8:	7cfb      	ldrb	r3, [r7, #19]
 8007eca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d02b      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ed8:	4b0b      	ldr	r3, [pc, #44]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ede:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee6:	4908      	ldr	r1, [pc, #32]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ef6:	d109      	bne.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ef8:	4b03      	ldr	r3, [pc, #12]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	4a02      	ldr	r2, [pc, #8]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f02:	60d3      	str	r3, [r2, #12]
 8007f04:	e014      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8007f06:	bf00      	nop
 8007f08:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f14:	d10c      	bne.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	3304      	adds	r3, #4
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 f843 	bl	8007fa8 <RCCEx_PLLSAI1_Config>
 8007f22:	4603      	mov	r3, r0
 8007f24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f26:	7cfb      	ldrb	r3, [r7, #19]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8007f2c:	7cfb      	ldrb	r3, [r7, #19]
 8007f2e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d01c      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f3c:	4b19      	ldr	r3, [pc, #100]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8007f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f4a:	4916      	ldr	r1, [pc, #88]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f5a:	d10c      	bne.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	3304      	adds	r3, #4
 8007f60:	2102      	movs	r1, #2
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 f820 	bl	8007fa8 <RCCEx_PLLSAI1_Config>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f6c:	7cfb      	ldrb	r3, [r7, #19]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d001      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8007f72:	7cfb      	ldrb	r3, [r7, #19]
 8007f74:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00a      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f82:	4b08      	ldr	r3, [pc, #32]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8007f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f90:	4904      	ldr	r1, [pc, #16]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007f98:	7cbb      	ldrb	r3, [r7, #18]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3718      	adds	r7, #24
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	40021000 	.word	0x40021000

08007fa8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007fb6:	4b74      	ldr	r3, [pc, #464]	; (8008188 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	f003 0303 	and.w	r3, r3, #3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d018      	beq.n	8007ff4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007fc2:	4b71      	ldr	r3, [pc, #452]	; (8008188 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	f003 0203 	and.w	r2, r3, #3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d10d      	bne.n	8007fee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
       ||
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d009      	beq.n	8007fee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007fda:	4b6b      	ldr	r3, [pc, #428]	; (8008188 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	091b      	lsrs	r3, r3, #4
 8007fe0:	f003 0307 	and.w	r3, r3, #7
 8007fe4:	1c5a      	adds	r2, r3, #1
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	685b      	ldr	r3, [r3, #4]
       ||
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d047      	beq.n	800807e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	73fb      	strb	r3, [r7, #15]
 8007ff2:	e044      	b.n	800807e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b03      	cmp	r3, #3
 8007ffa:	d018      	beq.n	800802e <RCCEx_PLLSAI1_Config+0x86>
 8007ffc:	2b03      	cmp	r3, #3
 8007ffe:	d825      	bhi.n	800804c <RCCEx_PLLSAI1_Config+0xa4>
 8008000:	2b01      	cmp	r3, #1
 8008002:	d002      	beq.n	800800a <RCCEx_PLLSAI1_Config+0x62>
 8008004:	2b02      	cmp	r3, #2
 8008006:	d009      	beq.n	800801c <RCCEx_PLLSAI1_Config+0x74>
 8008008:	e020      	b.n	800804c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800800a:	4b5f      	ldr	r3, [pc, #380]	; (8008188 <RCCEx_PLLSAI1_Config+0x1e0>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 0302 	and.w	r3, r3, #2
 8008012:	2b00      	cmp	r3, #0
 8008014:	d11d      	bne.n	8008052 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800801a:	e01a      	b.n	8008052 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800801c:	4b5a      	ldr	r3, [pc, #360]	; (8008188 <RCCEx_PLLSAI1_Config+0x1e0>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008024:	2b00      	cmp	r3, #0
 8008026:	d116      	bne.n	8008056 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800802c:	e013      	b.n	8008056 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800802e:	4b56      	ldr	r3, [pc, #344]	; (8008188 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10f      	bne.n	800805a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800803a:	4b53      	ldr	r3, [pc, #332]	; (8008188 <RCCEx_PLLSAI1_Config+0x1e0>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d109      	bne.n	800805a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800804a:	e006      	b.n	800805a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	73fb      	strb	r3, [r7, #15]
      break;
 8008050:	e004      	b.n	800805c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008052:	bf00      	nop
 8008054:	e002      	b.n	800805c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008056:	bf00      	nop
 8008058:	e000      	b.n	800805c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800805a:	bf00      	nop
    }

    if(status == HAL_OK)
 800805c:	7bfb      	ldrb	r3, [r7, #15]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10d      	bne.n	800807e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008062:	4b49      	ldr	r3, [pc, #292]	; (8008188 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6819      	ldr	r1, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	3b01      	subs	r3, #1
 8008074:	011b      	lsls	r3, r3, #4
 8008076:	430b      	orrs	r3, r1
 8008078:	4943      	ldr	r1, [pc, #268]	; (8008188 <RCCEx_PLLSAI1_Config+0x1e0>)
 800807a:	4313      	orrs	r3, r2
 800807c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800807e:	7bfb      	ldrb	r3, [r7, #15]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d17c      	bne.n	800817e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008084:	4b40      	ldr	r3, [pc, #256]	; (8008188 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a3f      	ldr	r2, [pc, #252]	; (8008188 <RCCEx_PLLSAI1_Config+0x1e0>)
 800808a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800808e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008090:	f7fb ff73 	bl	8003f7a <HAL_GetTick>
 8008094:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008096:	e009      	b.n	80080ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008098:	f7fb ff6f 	bl	8003f7a <HAL_GetTick>
 800809c:	4602      	mov	r2, r0
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d902      	bls.n	80080ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	73fb      	strb	r3, [r7, #15]
        break;
 80080aa:	e005      	b.n	80080b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80080ac:	4b36      	ldr	r3, [pc, #216]	; (8008188 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1ef      	bne.n	8008098 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d15f      	bne.n	800817e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d110      	bne.n	80080e6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80080c4:	4b30      	ldr	r3, [pc, #192]	; (8008188 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80080cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	6892      	ldr	r2, [r2, #8]
 80080d4:	0211      	lsls	r1, r2, #8
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	68d2      	ldr	r2, [r2, #12]
 80080da:	06d2      	lsls	r2, r2, #27
 80080dc:	430a      	orrs	r2, r1
 80080de:	492a      	ldr	r1, [pc, #168]	; (8008188 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080e0:	4313      	orrs	r3, r2
 80080e2:	610b      	str	r3, [r1, #16]
 80080e4:	e027      	b.n	8008136 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d112      	bne.n	8008112 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80080ec:	4b26      	ldr	r3, [pc, #152]	; (8008188 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80080f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	6892      	ldr	r2, [r2, #8]
 80080fc:	0211      	lsls	r1, r2, #8
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	6912      	ldr	r2, [r2, #16]
 8008102:	0852      	lsrs	r2, r2, #1
 8008104:	3a01      	subs	r2, #1
 8008106:	0552      	lsls	r2, r2, #21
 8008108:	430a      	orrs	r2, r1
 800810a:	491f      	ldr	r1, [pc, #124]	; (8008188 <RCCEx_PLLSAI1_Config+0x1e0>)
 800810c:	4313      	orrs	r3, r2
 800810e:	610b      	str	r3, [r1, #16]
 8008110:	e011      	b.n	8008136 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008112:	4b1d      	ldr	r3, [pc, #116]	; (8008188 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800811a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	6892      	ldr	r2, [r2, #8]
 8008122:	0211      	lsls	r1, r2, #8
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	6952      	ldr	r2, [r2, #20]
 8008128:	0852      	lsrs	r2, r2, #1
 800812a:	3a01      	subs	r2, #1
 800812c:	0652      	lsls	r2, r2, #25
 800812e:	430a      	orrs	r2, r1
 8008130:	4915      	ldr	r1, [pc, #84]	; (8008188 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008132:	4313      	orrs	r3, r2
 8008134:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008136:	4b14      	ldr	r3, [pc, #80]	; (8008188 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a13      	ldr	r2, [pc, #76]	; (8008188 <RCCEx_PLLSAI1_Config+0x1e0>)
 800813c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008140:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008142:	f7fb ff1a 	bl	8003f7a <HAL_GetTick>
 8008146:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008148:	e009      	b.n	800815e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800814a:	f7fb ff16 	bl	8003f7a <HAL_GetTick>
 800814e:	4602      	mov	r2, r0
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	2b02      	cmp	r3, #2
 8008156:	d902      	bls.n	800815e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	73fb      	strb	r3, [r7, #15]
          break;
 800815c:	e005      	b.n	800816a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800815e:	4b0a      	ldr	r3, [pc, #40]	; (8008188 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008166:	2b00      	cmp	r3, #0
 8008168:	d0ef      	beq.n	800814a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800816a:	7bfb      	ldrb	r3, [r7, #15]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d106      	bne.n	800817e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008170:	4b05      	ldr	r3, [pc, #20]	; (8008188 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008172:	691a      	ldr	r2, [r3, #16]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	4903      	ldr	r1, [pc, #12]	; (8008188 <RCCEx_PLLSAI1_Config+0x1e0>)
 800817a:	4313      	orrs	r3, r2
 800817c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800817e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	40021000 	.word	0x40021000

0800818c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d06c      	beq.n	8008278 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d106      	bne.n	80081b8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f7fb fd2c 	bl	8003c10 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	22ca      	movs	r2, #202	; 0xca
 80081c6:	625a      	str	r2, [r3, #36]	; 0x24
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2253      	movs	r2, #83	; 0x53
 80081ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fc5f 	bl	8008a94 <RTC_EnterInitMode>
 80081d6:	4603      	mov	r3, r0
 80081d8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80081da:	7bfb      	ldrb	r3, [r7, #15]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d14b      	bne.n	8008278 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	6812      	ldr	r2, [r2, #0]
 80081ea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80081ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081f2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6899      	ldr	r1, [r3, #8]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	685a      	ldr	r2, [r3, #4]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	431a      	orrs	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	431a      	orrs	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	430a      	orrs	r2, r1
 8008210:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	68d2      	ldr	r2, [r2, #12]
 800821a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6919      	ldr	r1, [r3, #16]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	041a      	lsls	r2, r3, #16
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	430a      	orrs	r2, r1
 800822e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fc63 	bl	8008afc <RTC_ExitInitMode>
 8008236:	4603      	mov	r3, r0
 8008238:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800823a:	7bfb      	ldrb	r3, [r7, #15]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d11b      	bne.n	8008278 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f022 0203 	bic.w	r2, r2, #3
 800824e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	69da      	ldr	r2, [r3, #28]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	431a      	orrs	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	430a      	orrs	r2, r1
 8008266:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	22ff      	movs	r2, #255	; 0xff
 800826e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8008278:	7bfb      	ldrb	r3, [r7, #15]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008282:	b590      	push	{r4, r7, lr}
 8008284:	b087      	sub	sp, #28
 8008286:	af00      	add	r7, sp, #0
 8008288:	60f8      	str	r0, [r7, #12]
 800828a:	60b9      	str	r1, [r7, #8]
 800828c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d101      	bne.n	800829c <HAL_RTC_SetTime+0x1a>
 8008298:	2302      	movs	r3, #2
 800829a:	e08b      	b.n	80083b4 <HAL_RTC_SetTime+0x132>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2202      	movs	r2, #2
 80082a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	22ca      	movs	r2, #202	; 0xca
 80082b2:	625a      	str	r2, [r3, #36]	; 0x24
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2253      	movs	r2, #83	; 0x53
 80082ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f000 fbe9 	bl	8008a94 <RTC_EnterInitMode>
 80082c2:	4603      	mov	r3, r0
 80082c4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80082c6:	7cfb      	ldrb	r3, [r7, #19]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d163      	bne.n	8008394 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d126      	bne.n	8008320 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d102      	bne.n	80082e6 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	2200      	movs	r2, #0
 80082e4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 fc44 	bl	8008b78 <RTC_ByteToBcd2>
 80082f0:	4603      	mov	r3, r0
 80082f2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	785b      	ldrb	r3, [r3, #1]
 80082f8:	4618      	mov	r0, r3
 80082fa:	f000 fc3d 	bl	8008b78 <RTC_ByteToBcd2>
 80082fe:	4603      	mov	r3, r0
 8008300:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008302:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	789b      	ldrb	r3, [r3, #2]
 8008308:	4618      	mov	r0, r3
 800830a:	f000 fc35 	bl	8008b78 <RTC_ByteToBcd2>
 800830e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008310:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	78db      	ldrb	r3, [r3, #3]
 8008318:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800831a:	4313      	orrs	r3, r2
 800831c:	617b      	str	r3, [r7, #20]
 800831e:	e018      	b.n	8008352 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800832a:	2b00      	cmp	r3, #0
 800832c:	d102      	bne.n	8008334 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	2200      	movs	r2, #0
 8008332:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	785b      	ldrb	r3, [r3, #1]
 800833e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008340:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008346:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	78db      	ldrb	r3, [r3, #3]
 800834c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800834e:	4313      	orrs	r3, r2
 8008350:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800835c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008360:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	689a      	ldr	r2, [r3, #8]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008370:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6899      	ldr	r1, [r3, #8]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	68da      	ldr	r2, [r3, #12]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	431a      	orrs	r2, r3
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	430a      	orrs	r2, r1
 8008388:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 fbb6 	bl	8008afc <RTC_ExitInitMode>
 8008390:	4603      	mov	r3, r0
 8008392:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	22ff      	movs	r2, #255	; 0xff
 800839a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800839c:	7cfb      	ldrb	r3, [r7, #19]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d103      	bne.n	80083aa <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80083b2:	7cfb      	ldrb	r3, [r7, #19]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	371c      	adds	r7, #28
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd90      	pop	{r4, r7, pc}

080083bc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80083ea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80083ee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	0c1b      	lsrs	r3, r3, #16
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	0a1b      	lsrs	r3, r3, #8
 8008404:	b2db      	uxtb	r3, r3
 8008406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800840a:	b2da      	uxtb	r2, r3
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	b2db      	uxtb	r3, r3
 8008414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008418:	b2da      	uxtb	r2, r3
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	0d9b      	lsrs	r3, r3, #22
 8008422:	b2db      	uxtb	r3, r3
 8008424:	f003 0301 	and.w	r3, r3, #1
 8008428:	b2da      	uxtb	r2, r3
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d11a      	bne.n	800846a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	4618      	mov	r0, r3
 800843a:	f000 fbbd 	bl	8008bb8 <RTC_Bcd2ToByte>
 800843e:	4603      	mov	r3, r0
 8008440:	461a      	mov	r2, r3
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	785b      	ldrb	r3, [r3, #1]
 800844a:	4618      	mov	r0, r3
 800844c:	f000 fbb4 	bl	8008bb8 <RTC_Bcd2ToByte>
 8008450:	4603      	mov	r3, r0
 8008452:	461a      	mov	r2, r3
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	789b      	ldrb	r3, [r3, #2]
 800845c:	4618      	mov	r0, r3
 800845e:	f000 fbab 	bl	8008bb8 <RTC_Bcd2ToByte>
 8008462:	4603      	mov	r3, r0
 8008464:	461a      	mov	r2, r3
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3718      	adds	r7, #24
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008474:	b590      	push	{r4, r7, lr}
 8008476:	b087      	sub	sp, #28
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d101      	bne.n	800848e <HAL_RTC_SetDate+0x1a>
 800848a:	2302      	movs	r3, #2
 800848c:	e075      	b.n	800857a <HAL_RTC_SetDate+0x106>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2201      	movs	r2, #1
 8008492:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2202      	movs	r2, #2
 800849a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10e      	bne.n	80084c2 <HAL_RTC_SetDate+0x4e>
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	785b      	ldrb	r3, [r3, #1]
 80084a8:	f003 0310 	and.w	r3, r3, #16
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d008      	beq.n	80084c2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	785b      	ldrb	r3, [r3, #1]
 80084b4:	f023 0310 	bic.w	r3, r3, #16
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	330a      	adds	r3, #10
 80084bc:	b2da      	uxtb	r2, r3
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d11c      	bne.n	8008502 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	78db      	ldrb	r3, [r3, #3]
 80084cc:	4618      	mov	r0, r3
 80084ce:	f000 fb53 	bl	8008b78 <RTC_ByteToBcd2>
 80084d2:	4603      	mov	r3, r0
 80084d4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	785b      	ldrb	r3, [r3, #1]
 80084da:	4618      	mov	r0, r3
 80084dc:	f000 fb4c 	bl	8008b78 <RTC_ByteToBcd2>
 80084e0:	4603      	mov	r3, r0
 80084e2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80084e4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	789b      	ldrb	r3, [r3, #2]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 fb44 	bl	8008b78 <RTC_ByteToBcd2>
 80084f0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80084f2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80084fc:	4313      	orrs	r3, r2
 80084fe:	617b      	str	r3, [r7, #20]
 8008500:	e00e      	b.n	8008520 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	78db      	ldrb	r3, [r3, #3]
 8008506:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	785b      	ldrb	r3, [r3, #1]
 800850c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800850e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008514:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800851c:	4313      	orrs	r3, r2
 800851e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	22ca      	movs	r2, #202	; 0xca
 8008526:	625a      	str	r2, [r3, #36]	; 0x24
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2253      	movs	r2, #83	; 0x53
 800852e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f000 faaf 	bl	8008a94 <RTC_EnterInitMode>
 8008536:	4603      	mov	r3, r0
 8008538:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800853a:	7cfb      	ldrb	r3, [r7, #19]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10c      	bne.n	800855a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800854a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800854e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f000 fad3 	bl	8008afc <RTC_ExitInitMode>
 8008556:	4603      	mov	r3, r0
 8008558:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	22ff      	movs	r2, #255	; 0xff
 8008560:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008562:	7cfb      	ldrb	r3, [r7, #19]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d103      	bne.n	8008570 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008578:	7cfb      	ldrb	r3, [r7, #19]
}
 800857a:	4618      	mov	r0, r3
 800857c:	371c      	adds	r7, #28
 800857e:	46bd      	mov	sp, r7
 8008580:	bd90      	pop	{r4, r7, pc}

08008582 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b086      	sub	sp, #24
 8008586:	af00      	add	r7, sp, #0
 8008588:	60f8      	str	r0, [r7, #12]
 800858a:	60b9      	str	r1, [r7, #8]
 800858c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008598:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800859c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	0c1b      	lsrs	r3, r3, #16
 80085a2:	b2da      	uxtb	r2, r3
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	0a1b      	lsrs	r3, r3, #8
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	f003 031f 	and.w	r3, r3, #31
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085c0:	b2da      	uxtb	r2, r3
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	0b5b      	lsrs	r3, r3, #13
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	f003 0307 	and.w	r3, r3, #7
 80085d0:	b2da      	uxtb	r2, r3
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d11a      	bne.n	8008612 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	78db      	ldrb	r3, [r3, #3]
 80085e0:	4618      	mov	r0, r3
 80085e2:	f000 fae9 	bl	8008bb8 <RTC_Bcd2ToByte>
 80085e6:	4603      	mov	r3, r0
 80085e8:	461a      	mov	r2, r3
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	785b      	ldrb	r3, [r3, #1]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 fae0 	bl	8008bb8 <RTC_Bcd2ToByte>
 80085f8:	4603      	mov	r3, r0
 80085fa:	461a      	mov	r2, r3
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	789b      	ldrb	r3, [r3, #2]
 8008604:	4618      	mov	r0, r3
 8008606:	f000 fad7 	bl	8008bb8 <RTC_Bcd2ToByte>
 800860a:	4603      	mov	r3, r0
 800860c:	461a      	mov	r2, r3
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	3718      	adds	r7, #24
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800861c:	b590      	push	{r4, r7, lr}
 800861e:	b089      	sub	sp, #36	; 0x24
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d101      	bne.n	8008636 <HAL_RTC_SetAlarm_IT+0x1a>
 8008632:	2302      	movs	r3, #2
 8008634:	e127      	b.n	8008886 <HAL_RTC_SetAlarm_IT+0x26a>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2202      	movs	r2, #2
 8008642:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d137      	bne.n	80086bc <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008656:	2b00      	cmp	r3, #0
 8008658:	d102      	bne.n	8008660 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	2200      	movs	r2, #0
 800865e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	4618      	mov	r0, r3
 8008666:	f000 fa87 	bl	8008b78 <RTC_ByteToBcd2>
 800866a:	4603      	mov	r3, r0
 800866c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	785b      	ldrb	r3, [r3, #1]
 8008672:	4618      	mov	r0, r3
 8008674:	f000 fa80 	bl	8008b78 <RTC_ByteToBcd2>
 8008678:	4603      	mov	r3, r0
 800867a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800867c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	789b      	ldrb	r3, [r3, #2]
 8008682:	4618      	mov	r0, r3
 8008684:	f000 fa78 	bl	8008b78 <RTC_ByteToBcd2>
 8008688:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800868a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	78db      	ldrb	r3, [r3, #3]
 8008692:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008694:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 fa6a 	bl	8008b78 <RTC_ByteToBcd2>
 80086a4:	4603      	mov	r3, r0
 80086a6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80086a8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80086b0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80086b6:	4313      	orrs	r3, r2
 80086b8:	61fb      	str	r3, [r7, #28]
 80086ba:	e023      	b.n	8008704 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d102      	bne.n	80086d0 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	2200      	movs	r2, #0
 80086ce:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	785b      	ldrb	r3, [r3, #1]
 80086da:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80086dc:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80086e2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	78db      	ldrb	r3, [r3, #3]
 80086e8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80086ea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086f2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80086f4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80086fa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008700:	4313      	orrs	r3, r2
 8008702:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	685a      	ldr	r2, [r3, #4]
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	4313      	orrs	r3, r2
 800870e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	22ca      	movs	r2, #202	; 0xca
 8008716:	625a      	str	r2, [r3, #36]	; 0x24
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2253      	movs	r2, #83	; 0x53
 800871e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008728:	d14a      	bne.n	80087c0 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	689a      	ldr	r2, [r3, #8]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008738:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	b2da      	uxtb	r2, r3
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800874a:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 800874c:	f7fb fc15 	bl	8003f7a <HAL_GetTick>
 8008750:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008752:	e015      	b.n	8008780 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008754:	f7fb fc11 	bl	8003f7a <HAL_GetTick>
 8008758:	4602      	mov	r2, r0
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008762:	d90d      	bls.n	8008780 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	22ff      	movs	r2, #255	; 0xff
 800876a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2203      	movs	r2, #3
 8008770:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	e082      	b.n	8008886 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	2b00      	cmp	r3, #0
 800878c:	d0e2      	beq.n	8008754 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	69fa      	ldr	r2, [r7, #28]
 8008794:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	69ba      	ldr	r2, [r7, #24]
 800879c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	689a      	ldr	r2, [r3, #8]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087ac:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	689a      	ldr	r2, [r3, #8]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80087bc:	609a      	str	r2, [r3, #8]
 80087be:	e049      	b.n	8008854 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	689a      	ldr	r2, [r3, #8]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80087ce:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f462 7220 	orn	r2, r2, #640	; 0x280
 80087e0:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80087e2:	f7fb fbca 	bl	8003f7a <HAL_GetTick>
 80087e6:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80087e8:	e015      	b.n	8008816 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80087ea:	f7fb fbc6 	bl	8003f7a <HAL_GetTick>
 80087ee:	4602      	mov	r2, r0
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087f8:	d90d      	bls.n	8008816 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	22ff      	movs	r2, #255	; 0xff
 8008800:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2203      	movs	r2, #3
 8008806:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	e037      	b.n	8008886 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	f003 0302 	and.w	r3, r3, #2
 8008820:	2b00      	cmp	r3, #0
 8008822:	d0e2      	beq.n	80087ea <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	69fa      	ldr	r2, [r7, #28]
 800882a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	69ba      	ldr	r2, [r7, #24]
 8008832:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	689a      	ldr	r2, [r3, #8]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008842:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	689a      	ldr	r2, [r3, #8]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008852:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008854:	4b0e      	ldr	r3, [pc, #56]	; (8008890 <HAL_RTC_SetAlarm_IT+0x274>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a0d      	ldr	r2, [pc, #52]	; (8008890 <HAL_RTC_SetAlarm_IT+0x274>)
 800885a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800885e:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8008860:	4b0b      	ldr	r3, [pc, #44]	; (8008890 <HAL_RTC_SetAlarm_IT+0x274>)
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	4a0a      	ldr	r2, [pc, #40]	; (8008890 <HAL_RTC_SetAlarm_IT+0x274>)
 8008866:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800886a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	22ff      	movs	r2, #255	; 0xff
 8008872:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3724      	adds	r7, #36	; 0x24
 800888a:	46bd      	mov	sp, r7
 800888c:	bd90      	pop	{r4, r7, pc}
 800888e:	bf00      	nop
 8008890:	40010400 	.word	0x40010400

08008894 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d101      	bne.n	80088ac <HAL_RTC_DeactivateAlarm+0x18>
 80088a8:	2302      	movs	r3, #2
 80088aa:	e083      	b.n	80089b4 <HAL_RTC_DeactivateAlarm+0x120>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2202      	movs	r2, #2
 80088b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	22ca      	movs	r2, #202	; 0xca
 80088c2:	625a      	str	r2, [r3, #36]	; 0x24
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2253      	movs	r2, #83	; 0x53
 80088ca:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088d2:	d131      	bne.n	8008938 <HAL_RTC_DeactivateAlarm+0xa4>
    /* AlarmA */
#if defined (RTC_ALRMASSR_SSCLR)
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
#endif

    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	689a      	ldr	r2, [r3, #8]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088e2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	689a      	ldr	r2, [r3, #8]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80088f2:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80088f4:	f7fb fb41 	bl	8003f7a <HAL_GetTick>
 80088f8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80088fa:	e015      	b.n	8008928 <HAL_RTC_DeactivateAlarm+0x94>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80088fc:	f7fb fb3d 	bl	8003f7a <HAL_GetTick>
 8008900:	4602      	mov	r2, r0
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800890a:	d90d      	bls.n	8008928 <HAL_RTC_DeactivateAlarm+0x94>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	22ff      	movs	r2, #255	; 0xff
 8008912:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2203      	movs	r2, #3
 8008918:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008924:	2303      	movs	r3, #3
 8008926:	e045      	b.n	80089b4 <HAL_RTC_DeactivateAlarm+0x120>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	2b00      	cmp	r3, #0
 8008934:	d0e2      	beq.n	80088fc <HAL_RTC_DeactivateAlarm+0x68>
 8008936:	e030      	b.n	800899a <HAL_RTC_DeactivateAlarm+0x106>
    /* AlarmB */
#if defined (RTC_ALRMBSSR_SSCLR)
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMASSR_SSCLR);
#endif

    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	689a      	ldr	r2, [r3, #8]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008946:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	689a      	ldr	r2, [r3, #8]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008956:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8008958:	f7fb fb0f 	bl	8003f7a <HAL_GetTick>
 800895c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800895e:	e015      	b.n	800898c <HAL_RTC_DeactivateAlarm+0xf8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008960:	f7fb fb0b 	bl	8003f7a <HAL_GetTick>
 8008964:	4602      	mov	r2, r0
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800896e:	d90d      	bls.n	800898c <HAL_RTC_DeactivateAlarm+0xf8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	22ff      	movs	r2, #255	; 0xff
 8008976:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2203      	movs	r2, #3
 800897c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e013      	b.n	80089b4 <HAL_RTC_DeactivateAlarm+0x120>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	f003 0302 	and.w	r3, r3, #2
 8008996:	2b00      	cmp	r3, #0
 8008998:	d0e2      	beq.n	8008960 <HAL_RTC_DeactivateAlarm+0xcc>
      }
    }
#endif
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	22ff      	movs	r2, #255	; 0xff
 80089a0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80089c4:	4b1f      	ldr	r3, [pc, #124]	; (8008a44 <HAL_RTC_AlarmIRQHandler+0x88>)
 80089c6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80089ca:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d012      	beq.n	8008a00 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00b      	beq.n	8008a00 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	b2da      	uxtb	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80089f8:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7fa fd5d 	bl	80034ba <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d012      	beq.n	8008a34 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00b      	beq.n	8008a34 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008a2c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fa2a 	bl	8008e88 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8008a3c:	bf00      	nop
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	40010400 	.word	0x40010400

08008a48 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68da      	ldr	r2, [r3, #12]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008a5e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8008a60:	f7fb fa8b 	bl	8003f7a <HAL_GetTick>
 8008a64:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008a66:	e009      	b.n	8008a7c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008a68:	f7fb fa87 	bl	8003f7a <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a76:	d901      	bls.n	8008a7c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e007      	b.n	8008a8c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	f003 0320 	and.w	r3, r3, #32
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d0ee      	beq.n	8008a68 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d120      	bne.n	8008af0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ab6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008ab8:	f7fb fa5f 	bl	8003f7a <HAL_GetTick>
 8008abc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008abe:	e00d      	b.n	8008adc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008ac0:	f7fb fa5b 	bl	8003f7a <HAL_GetTick>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ace:	d905      	bls.n	8008adc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2203      	movs	r2, #3
 8008ad8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d102      	bne.n	8008af0 <RTC_EnterInitMode+0x5c>
 8008aea:	7bfb      	ldrb	r3, [r7, #15]
 8008aec:	2b03      	cmp	r3, #3
 8008aee:	d1e7      	bne.n	8008ac0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
	...

08008afc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008b08:	4b1a      	ldr	r3, [pc, #104]	; (8008b74 <RTC_ExitInitMode+0x78>)
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	4a19      	ldr	r2, [pc, #100]	; (8008b74 <RTC_ExitInitMode+0x78>)
 8008b0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b12:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008b14:	4b17      	ldr	r3, [pc, #92]	; (8008b74 <RTC_ExitInitMode+0x78>)
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	f003 0320 	and.w	r3, r3, #32
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d10c      	bne.n	8008b3a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f7ff ff91 	bl	8008a48 <HAL_RTC_WaitForSynchro>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d01e      	beq.n	8008b6a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2203      	movs	r2, #3
 8008b30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008b34:	2303      	movs	r3, #3
 8008b36:	73fb      	strb	r3, [r7, #15]
 8008b38:	e017      	b.n	8008b6a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008b3a:	4b0e      	ldr	r3, [pc, #56]	; (8008b74 <RTC_ExitInitMode+0x78>)
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	4a0d      	ldr	r2, [pc, #52]	; (8008b74 <RTC_ExitInitMode+0x78>)
 8008b40:	f023 0320 	bic.w	r3, r3, #32
 8008b44:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7ff ff7e 	bl	8008a48 <HAL_RTC_WaitForSynchro>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d005      	beq.n	8008b5e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2203      	movs	r2, #3
 8008b56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008b5e:	4b05      	ldr	r3, [pc, #20]	; (8008b74 <RTC_ExitInitMode+0x78>)
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	4a04      	ldr	r2, [pc, #16]	; (8008b74 <RTC_ExitInitMode+0x78>)
 8008b64:	f043 0320 	orr.w	r3, r3, #32
 8008b68:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	40002800 	.word	0x40002800

08008b78 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	4603      	mov	r3, r0
 8008b80:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008b82:	2300      	movs	r3, #0
 8008b84:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8008b86:	79fb      	ldrb	r3, [r7, #7]
 8008b88:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8008b8a:	e005      	b.n	8008b98 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8008b92:	7afb      	ldrb	r3, [r7, #11]
 8008b94:	3b0a      	subs	r3, #10
 8008b96:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8008b98:	7afb      	ldrb	r3, [r7, #11]
 8008b9a:	2b09      	cmp	r3, #9
 8008b9c:	d8f6      	bhi.n	8008b8c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	011b      	lsls	r3, r3, #4
 8008ba4:	b2da      	uxtb	r2, r3
 8008ba6:	7afb      	ldrb	r3, [r7, #11]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	b2db      	uxtb	r3, r3
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3714      	adds	r7, #20
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8008bc2:	79fb      	ldrb	r3, [r7, #7]
 8008bc4:	091b      	lsrs	r3, r3, #4
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	461a      	mov	r2, r3
 8008bca:	0092      	lsls	r2, r2, #2
 8008bcc:	4413      	add	r3, r2
 8008bce:	005b      	lsls	r3, r3, #1
 8008bd0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8008bd2:	79fb      	ldrb	r3, [r7, #7]
 8008bd4:	f003 030f 	and.w	r3, r3, #15
 8008bd8:	b2da      	uxtb	r2, r3
 8008bda:	7bfb      	ldrb	r3, [r7, #15]
 8008bdc:	4413      	add	r3, r2
 8008bde:	b2db      	uxtb	r3, r3
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3714      	adds	r7, #20
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d101      	bne.n	8008c06 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8008c02:	2302      	movs	r3, #2
 8008c04:	e07f      	b.n	8008d06 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2202      	movs	r2, #2
 8008c12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	22ca      	movs	r2, #202	; 0xca
 8008c1c:	625a      	str	r2, [r3, #36]	; 0x24
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2253      	movs	r2, #83	; 0x53
 8008c24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	689a      	ldr	r2, [r3, #8]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c34:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	b2da      	uxtb	r2, r3
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008c46:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d120      	bne.n	8008c98 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8008c56:	f7fb f990 	bl	8003f7a <HAL_GetTick>
 8008c5a:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8008c5c:	e015      	b.n	8008c8a <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c5e:	f7fb f98c 	bl	8003f7a <HAL_GetTick>
 8008c62:	4602      	mov	r2, r0
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c6c:	d90d      	bls.n	8008c8a <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	22ff      	movs	r2, #255	; 0xff
 8008c74:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2203      	movs	r2, #3
 8008c7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008c86:	2303      	movs	r3, #3
 8008c88:	e03d      	b.n	8008d06 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	f003 0304 	and.w	r3, r3, #4
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d0e2      	beq.n	8008c5e <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f023 0107 	bic.w	r1, r3, #7
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	430a      	orrs	r2, r1
 8008cb2:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8008cb4:	4b16      	ldr	r3, [pc, #88]	; (8008d10 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a15      	ldr	r2, [pc, #84]	; (8008d10 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8008cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cbe:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8008cc0:	4b13      	ldr	r3, [pc, #76]	; (8008d10 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	4a12      	ldr	r2, [pc, #72]	; (8008d10 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8008cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cca:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	689a      	ldr	r2, [r3, #8]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008cda:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	689a      	ldr	r2, [r3, #8]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008cea:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	22ff      	movs	r2, #255	; 0xff
 8008cf2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3718      	adds	r7, #24
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	40010400 	.word	0x40010400

08008d14 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d101      	bne.n	8008d2a <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8008d26:	2302      	movs	r3, #2
 8008d28:	e04d      	b.n	8008dc6 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2202      	movs	r2, #2
 8008d36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	22ca      	movs	r2, #202	; 0xca
 8008d40:	625a      	str	r2, [r3, #36]	; 0x24
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2253      	movs	r2, #83	; 0x53
 8008d48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	689a      	ldr	r2, [r3, #8]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d58:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	689a      	ldr	r2, [r3, #8]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008d68:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8008d6a:	f7fb f906 	bl	8003f7a <HAL_GetTick>
 8008d6e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008d70:	e015      	b.n	8008d9e <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008d72:	f7fb f902 	bl	8003f7a <HAL_GetTick>
 8008d76:	4602      	mov	r2, r0
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	1ad3      	subs	r3, r2, r3
 8008d7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d80:	d90d      	bls.n	8008d9e <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	22ff      	movs	r2, #255	; 0xff
 8008d88:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2203      	movs	r2, #3
 8008d8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	e013      	b.n	8008dc6 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	f003 0304 	and.w	r3, r3, #4
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d0e2      	beq.n	8008d72 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	22ff      	movs	r2, #255	; 0xff
 8008db2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
	...

08008dd0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8008dd8:	4b0f      	ldr	r3, [pc, #60]	; (8008e18 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8008dda:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008dde:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00b      	beq.n	8008e06 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	b2da      	uxtb	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008dfe:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f7f9 fb51 	bl	80024a8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8008e0e:	bf00      	nop
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	40010400 	.word	0x40010400

08008e1c <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d101      	bne.n	8008e32 <HAL_RTCEx_EnableBypassShadow+0x16>
 8008e2e:	2302      	movs	r3, #2
 8008e30:	e024      	b.n	8008e7c <HAL_RTCEx_EnableBypassShadow+0x60>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2202      	movs	r2, #2
 8008e3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	22ca      	movs	r2, #202	; 0xca
 8008e48:	625a      	str	r2, [r3, #36]	; 0x24
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2253      	movs	r2, #83	; 0x53
 8008e50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	689a      	ldr	r2, [r3, #8]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f042 0220 	orr.w	r2, r2, #32
 8008e60:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	22ff      	movs	r2, #255	; 0xff
 8008e68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008e90:	bf00      	nop
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d101      	bne.n	8008eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e049      	b.n	8008f42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d106      	bne.n	8008ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7fa fee4 	bl	8003c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2202      	movs	r2, #2
 8008ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	3304      	adds	r3, #4
 8008ed8:	4619      	mov	r1, r3
 8008eda:	4610      	mov	r0, r2
 8008edc:	f000 fbe2 	bl	80096a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3708      	adds	r7, #8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b082      	sub	sp, #8
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d101      	bne.n	8008f5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e049      	b.n	8008ff0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d106      	bne.n	8008f76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 f841 	bl	8008ff8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2202      	movs	r2, #2
 8008f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	3304      	adds	r3, #4
 8008f86:	4619      	mov	r1, r3
 8008f88:	4610      	mov	r0, r2
 8008f8a:	f000 fb8b 	bl	80096a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d109      	bne.n	8009030 <HAL_TIM_PWM_Start+0x24>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009022:	b2db      	uxtb	r3, r3
 8009024:	2b01      	cmp	r3, #1
 8009026:	bf14      	ite	ne
 8009028:	2301      	movne	r3, #1
 800902a:	2300      	moveq	r3, #0
 800902c:	b2db      	uxtb	r3, r3
 800902e:	e03c      	b.n	80090aa <HAL_TIM_PWM_Start+0x9e>
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	2b04      	cmp	r3, #4
 8009034:	d109      	bne.n	800904a <HAL_TIM_PWM_Start+0x3e>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800903c:	b2db      	uxtb	r3, r3
 800903e:	2b01      	cmp	r3, #1
 8009040:	bf14      	ite	ne
 8009042:	2301      	movne	r3, #1
 8009044:	2300      	moveq	r3, #0
 8009046:	b2db      	uxtb	r3, r3
 8009048:	e02f      	b.n	80090aa <HAL_TIM_PWM_Start+0x9e>
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	2b08      	cmp	r3, #8
 800904e:	d109      	bne.n	8009064 <HAL_TIM_PWM_Start+0x58>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009056:	b2db      	uxtb	r3, r3
 8009058:	2b01      	cmp	r3, #1
 800905a:	bf14      	ite	ne
 800905c:	2301      	movne	r3, #1
 800905e:	2300      	moveq	r3, #0
 8009060:	b2db      	uxtb	r3, r3
 8009062:	e022      	b.n	80090aa <HAL_TIM_PWM_Start+0x9e>
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	2b0c      	cmp	r3, #12
 8009068:	d109      	bne.n	800907e <HAL_TIM_PWM_Start+0x72>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b01      	cmp	r3, #1
 8009074:	bf14      	ite	ne
 8009076:	2301      	movne	r3, #1
 8009078:	2300      	moveq	r3, #0
 800907a:	b2db      	uxtb	r3, r3
 800907c:	e015      	b.n	80090aa <HAL_TIM_PWM_Start+0x9e>
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	2b10      	cmp	r3, #16
 8009082:	d109      	bne.n	8009098 <HAL_TIM_PWM_Start+0x8c>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800908a:	b2db      	uxtb	r3, r3
 800908c:	2b01      	cmp	r3, #1
 800908e:	bf14      	ite	ne
 8009090:	2301      	movne	r3, #1
 8009092:	2300      	moveq	r3, #0
 8009094:	b2db      	uxtb	r3, r3
 8009096:	e008      	b.n	80090aa <HAL_TIM_PWM_Start+0x9e>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	bf14      	ite	ne
 80090a4:	2301      	movne	r3, #1
 80090a6:	2300      	moveq	r3, #0
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d001      	beq.n	80090b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e083      	b.n	80091ba <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d104      	bne.n	80090c2 <HAL_TIM_PWM_Start+0xb6>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2202      	movs	r2, #2
 80090bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090c0:	e023      	b.n	800910a <HAL_TIM_PWM_Start+0xfe>
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	2b04      	cmp	r3, #4
 80090c6:	d104      	bne.n	80090d2 <HAL_TIM_PWM_Start+0xc6>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2202      	movs	r2, #2
 80090cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090d0:	e01b      	b.n	800910a <HAL_TIM_PWM_Start+0xfe>
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	2b08      	cmp	r3, #8
 80090d6:	d104      	bne.n	80090e2 <HAL_TIM_PWM_Start+0xd6>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2202      	movs	r2, #2
 80090dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090e0:	e013      	b.n	800910a <HAL_TIM_PWM_Start+0xfe>
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	2b0c      	cmp	r3, #12
 80090e6:	d104      	bne.n	80090f2 <HAL_TIM_PWM_Start+0xe6>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2202      	movs	r2, #2
 80090ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80090f0:	e00b      	b.n	800910a <HAL_TIM_PWM_Start+0xfe>
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	2b10      	cmp	r3, #16
 80090f6:	d104      	bne.n	8009102 <HAL_TIM_PWM_Start+0xf6>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2202      	movs	r2, #2
 80090fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009100:	e003      	b.n	800910a <HAL_TIM_PWM_Start+0xfe>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2202      	movs	r2, #2
 8009106:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2201      	movs	r2, #1
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	4618      	mov	r0, r3
 8009114:	f000 fe4c 	bl	8009db0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a29      	ldr	r2, [pc, #164]	; (80091c4 <HAL_TIM_PWM_Start+0x1b8>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d009      	beq.n	8009136 <HAL_TIM_PWM_Start+0x12a>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a28      	ldr	r2, [pc, #160]	; (80091c8 <HAL_TIM_PWM_Start+0x1bc>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d004      	beq.n	8009136 <HAL_TIM_PWM_Start+0x12a>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a26      	ldr	r2, [pc, #152]	; (80091cc <HAL_TIM_PWM_Start+0x1c0>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d101      	bne.n	800913a <HAL_TIM_PWM_Start+0x12e>
 8009136:	2301      	movs	r3, #1
 8009138:	e000      	b.n	800913c <HAL_TIM_PWM_Start+0x130>
 800913a:	2300      	movs	r3, #0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d007      	beq.n	8009150 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800914e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a1b      	ldr	r2, [pc, #108]	; (80091c4 <HAL_TIM_PWM_Start+0x1b8>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d00e      	beq.n	8009178 <HAL_TIM_PWM_Start+0x16c>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009162:	d009      	beq.n	8009178 <HAL_TIM_PWM_Start+0x16c>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a19      	ldr	r2, [pc, #100]	; (80091d0 <HAL_TIM_PWM_Start+0x1c4>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d004      	beq.n	8009178 <HAL_TIM_PWM_Start+0x16c>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a15      	ldr	r2, [pc, #84]	; (80091c8 <HAL_TIM_PWM_Start+0x1bc>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d115      	bne.n	80091a4 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	689a      	ldr	r2, [r3, #8]
 800917e:	4b15      	ldr	r3, [pc, #84]	; (80091d4 <HAL_TIM_PWM_Start+0x1c8>)
 8009180:	4013      	ands	r3, r2
 8009182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2b06      	cmp	r3, #6
 8009188:	d015      	beq.n	80091b6 <HAL_TIM_PWM_Start+0x1aa>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009190:	d011      	beq.n	80091b6 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f042 0201 	orr.w	r2, r2, #1
 80091a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091a2:	e008      	b.n	80091b6 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f042 0201 	orr.w	r2, r2, #1
 80091b2:	601a      	str	r2, [r3, #0]
 80091b4:	e000      	b.n	80091b8 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3710      	adds	r7, #16
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	40012c00 	.word	0x40012c00
 80091c8:	40014000 	.word	0x40014000
 80091cc:	40014400 	.word	0x40014400
 80091d0:	40000400 	.word	0x40000400
 80091d4:	00010007 	.word	0x00010007

080091d8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2200      	movs	r2, #0
 80091e8:	6839      	ldr	r1, [r7, #0]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f000 fde0 	bl	8009db0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a39      	ldr	r2, [pc, #228]	; (80092dc <HAL_TIM_PWM_Stop+0x104>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d009      	beq.n	800920e <HAL_TIM_PWM_Stop+0x36>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a38      	ldr	r2, [pc, #224]	; (80092e0 <HAL_TIM_PWM_Stop+0x108>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d004      	beq.n	800920e <HAL_TIM_PWM_Stop+0x36>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a36      	ldr	r2, [pc, #216]	; (80092e4 <HAL_TIM_PWM_Stop+0x10c>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d101      	bne.n	8009212 <HAL_TIM_PWM_Stop+0x3a>
 800920e:	2301      	movs	r3, #1
 8009210:	e000      	b.n	8009214 <HAL_TIM_PWM_Stop+0x3c>
 8009212:	2300      	movs	r3, #0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d017      	beq.n	8009248 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6a1a      	ldr	r2, [r3, #32]
 800921e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009222:	4013      	ands	r3, r2
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10f      	bne.n	8009248 <HAL_TIM_PWM_Stop+0x70>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6a1a      	ldr	r2, [r3, #32]
 800922e:	f240 4344 	movw	r3, #1092	; 0x444
 8009232:	4013      	ands	r3, r2
 8009234:	2b00      	cmp	r3, #0
 8009236:	d107      	bne.n	8009248 <HAL_TIM_PWM_Stop+0x70>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009246:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	6a1a      	ldr	r2, [r3, #32]
 800924e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009252:	4013      	ands	r3, r2
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10f      	bne.n	8009278 <HAL_TIM_PWM_Stop+0xa0>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	6a1a      	ldr	r2, [r3, #32]
 800925e:	f240 4344 	movw	r3, #1092	; 0x444
 8009262:	4013      	ands	r3, r2
 8009264:	2b00      	cmp	r3, #0
 8009266:	d107      	bne.n	8009278 <HAL_TIM_PWM_Stop+0xa0>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f022 0201 	bic.w	r2, r2, #1
 8009276:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d104      	bne.n	8009288 <HAL_TIM_PWM_Stop+0xb0>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2201      	movs	r2, #1
 8009282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009286:	e023      	b.n	80092d0 <HAL_TIM_PWM_Stop+0xf8>
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	2b04      	cmp	r3, #4
 800928c:	d104      	bne.n	8009298 <HAL_TIM_PWM_Stop+0xc0>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2201      	movs	r2, #1
 8009292:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009296:	e01b      	b.n	80092d0 <HAL_TIM_PWM_Stop+0xf8>
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	2b08      	cmp	r3, #8
 800929c:	d104      	bne.n	80092a8 <HAL_TIM_PWM_Stop+0xd0>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2201      	movs	r2, #1
 80092a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092a6:	e013      	b.n	80092d0 <HAL_TIM_PWM_Stop+0xf8>
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	2b0c      	cmp	r3, #12
 80092ac:	d104      	bne.n	80092b8 <HAL_TIM_PWM_Stop+0xe0>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2201      	movs	r2, #1
 80092b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092b6:	e00b      	b.n	80092d0 <HAL_TIM_PWM_Stop+0xf8>
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	2b10      	cmp	r3, #16
 80092bc:	d104      	bne.n	80092c8 <HAL_TIM_PWM_Stop+0xf0>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2201      	movs	r2, #1
 80092c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092c6:	e003      	b.n	80092d0 <HAL_TIM_PWM_Stop+0xf8>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3708      	adds	r7, #8
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	40012c00 	.word	0x40012c00
 80092e0:	40014000 	.word	0x40014000
 80092e4:	40014400 	.word	0x40014400

080092e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092f4:	2300      	movs	r3, #0
 80092f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d101      	bne.n	8009306 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009302:	2302      	movs	r3, #2
 8009304:	e0ff      	b.n	8009506 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b14      	cmp	r3, #20
 8009312:	f200 80f0 	bhi.w	80094f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009316:	a201      	add	r2, pc, #4	; (adr r2, 800931c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931c:	08009371 	.word	0x08009371
 8009320:	080094f7 	.word	0x080094f7
 8009324:	080094f7 	.word	0x080094f7
 8009328:	080094f7 	.word	0x080094f7
 800932c:	080093b1 	.word	0x080093b1
 8009330:	080094f7 	.word	0x080094f7
 8009334:	080094f7 	.word	0x080094f7
 8009338:	080094f7 	.word	0x080094f7
 800933c:	080093f3 	.word	0x080093f3
 8009340:	080094f7 	.word	0x080094f7
 8009344:	080094f7 	.word	0x080094f7
 8009348:	080094f7 	.word	0x080094f7
 800934c:	08009433 	.word	0x08009433
 8009350:	080094f7 	.word	0x080094f7
 8009354:	080094f7 	.word	0x080094f7
 8009358:	080094f7 	.word	0x080094f7
 800935c:	08009475 	.word	0x08009475
 8009360:	080094f7 	.word	0x080094f7
 8009364:	080094f7 	.word	0x080094f7
 8009368:	080094f7 	.word	0x080094f7
 800936c:	080094b5 	.word	0x080094b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68b9      	ldr	r1, [r7, #8]
 8009376:	4618      	mov	r0, r3
 8009378:	f000 fa02 	bl	8009780 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	699a      	ldr	r2, [r3, #24]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f042 0208 	orr.w	r2, r2, #8
 800938a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	699a      	ldr	r2, [r3, #24]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f022 0204 	bic.w	r2, r2, #4
 800939a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6999      	ldr	r1, [r3, #24]
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	691a      	ldr	r2, [r3, #16]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	430a      	orrs	r2, r1
 80093ac:	619a      	str	r2, [r3, #24]
      break;
 80093ae:	e0a5      	b.n	80094fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68b9      	ldr	r1, [r7, #8]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f000 fa5e 	bl	8009878 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	699a      	ldr	r2, [r3, #24]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	699a      	ldr	r2, [r3, #24]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6999      	ldr	r1, [r3, #24]
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	021a      	lsls	r2, r3, #8
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	430a      	orrs	r2, r1
 80093ee:	619a      	str	r2, [r3, #24]
      break;
 80093f0:	e084      	b.n	80094fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68b9      	ldr	r1, [r7, #8]
 80093f8:	4618      	mov	r0, r3
 80093fa:	f000 fab7 	bl	800996c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	69da      	ldr	r2, [r3, #28]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f042 0208 	orr.w	r2, r2, #8
 800940c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	69da      	ldr	r2, [r3, #28]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f022 0204 	bic.w	r2, r2, #4
 800941c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	69d9      	ldr	r1, [r3, #28]
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	691a      	ldr	r2, [r3, #16]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	430a      	orrs	r2, r1
 800942e:	61da      	str	r2, [r3, #28]
      break;
 8009430:	e064      	b.n	80094fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68b9      	ldr	r1, [r7, #8]
 8009438:	4618      	mov	r0, r3
 800943a:	f000 fb0f 	bl	8009a5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	69da      	ldr	r2, [r3, #28]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800944c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	69da      	ldr	r2, [r3, #28]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800945c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	69d9      	ldr	r1, [r3, #28]
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	021a      	lsls	r2, r3, #8
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	430a      	orrs	r2, r1
 8009470:	61da      	str	r2, [r3, #28]
      break;
 8009472:	e043      	b.n	80094fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68b9      	ldr	r1, [r7, #8]
 800947a:	4618      	mov	r0, r3
 800947c:	f000 fb4c 	bl	8009b18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f042 0208 	orr.w	r2, r2, #8
 800948e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f022 0204 	bic.w	r2, r2, #4
 800949e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	691a      	ldr	r2, [r3, #16]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	430a      	orrs	r2, r1
 80094b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80094b2:	e023      	b.n	80094fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68b9      	ldr	r1, [r7, #8]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f000 fb84 	bl	8009bc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	021a      	lsls	r2, r3, #8
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	430a      	orrs	r2, r1
 80094f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80094f4:	e002      	b.n	80094fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	75fb      	strb	r3, [r7, #23]
      break;
 80094fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2200      	movs	r2, #0
 8009500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009504:	7dfb      	ldrb	r3, [r7, #23]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3718      	adds	r7, #24
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop

08009510 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009524:	2b01      	cmp	r3, #1
 8009526:	d101      	bne.n	800952c <HAL_TIM_ConfigClockSource+0x1c>
 8009528:	2302      	movs	r3, #2
 800952a:	e0b6      	b.n	800969a <HAL_TIM_ConfigClockSource+0x18a>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2202      	movs	r2, #2
 8009538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800954a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800954e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009556:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009568:	d03e      	beq.n	80095e8 <HAL_TIM_ConfigClockSource+0xd8>
 800956a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800956e:	f200 8087 	bhi.w	8009680 <HAL_TIM_ConfigClockSource+0x170>
 8009572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009576:	f000 8086 	beq.w	8009686 <HAL_TIM_ConfigClockSource+0x176>
 800957a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800957e:	d87f      	bhi.n	8009680 <HAL_TIM_ConfigClockSource+0x170>
 8009580:	2b70      	cmp	r3, #112	; 0x70
 8009582:	d01a      	beq.n	80095ba <HAL_TIM_ConfigClockSource+0xaa>
 8009584:	2b70      	cmp	r3, #112	; 0x70
 8009586:	d87b      	bhi.n	8009680 <HAL_TIM_ConfigClockSource+0x170>
 8009588:	2b60      	cmp	r3, #96	; 0x60
 800958a:	d050      	beq.n	800962e <HAL_TIM_ConfigClockSource+0x11e>
 800958c:	2b60      	cmp	r3, #96	; 0x60
 800958e:	d877      	bhi.n	8009680 <HAL_TIM_ConfigClockSource+0x170>
 8009590:	2b50      	cmp	r3, #80	; 0x50
 8009592:	d03c      	beq.n	800960e <HAL_TIM_ConfigClockSource+0xfe>
 8009594:	2b50      	cmp	r3, #80	; 0x50
 8009596:	d873      	bhi.n	8009680 <HAL_TIM_ConfigClockSource+0x170>
 8009598:	2b40      	cmp	r3, #64	; 0x40
 800959a:	d058      	beq.n	800964e <HAL_TIM_ConfigClockSource+0x13e>
 800959c:	2b40      	cmp	r3, #64	; 0x40
 800959e:	d86f      	bhi.n	8009680 <HAL_TIM_ConfigClockSource+0x170>
 80095a0:	2b30      	cmp	r3, #48	; 0x30
 80095a2:	d064      	beq.n	800966e <HAL_TIM_ConfigClockSource+0x15e>
 80095a4:	2b30      	cmp	r3, #48	; 0x30
 80095a6:	d86b      	bhi.n	8009680 <HAL_TIM_ConfigClockSource+0x170>
 80095a8:	2b20      	cmp	r3, #32
 80095aa:	d060      	beq.n	800966e <HAL_TIM_ConfigClockSource+0x15e>
 80095ac:	2b20      	cmp	r3, #32
 80095ae:	d867      	bhi.n	8009680 <HAL_TIM_ConfigClockSource+0x170>
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d05c      	beq.n	800966e <HAL_TIM_ConfigClockSource+0x15e>
 80095b4:	2b10      	cmp	r3, #16
 80095b6:	d05a      	beq.n	800966e <HAL_TIM_ConfigClockSource+0x15e>
 80095b8:	e062      	b.n	8009680 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6818      	ldr	r0, [r3, #0]
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	6899      	ldr	r1, [r3, #8]
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	685a      	ldr	r2, [r3, #4]
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	f000 fbd1 	bl	8009d70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80095dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	609a      	str	r2, [r3, #8]
      break;
 80095e6:	e04f      	b.n	8009688 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6818      	ldr	r0, [r3, #0]
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	6899      	ldr	r1, [r3, #8]
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	685a      	ldr	r2, [r3, #4]
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	f000 fbba 	bl	8009d70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	689a      	ldr	r2, [r3, #8]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800960a:	609a      	str	r2, [r3, #8]
      break;
 800960c:	e03c      	b.n	8009688 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6818      	ldr	r0, [r3, #0]
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	6859      	ldr	r1, [r3, #4]
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	461a      	mov	r2, r3
 800961c:	f000 fb2e 	bl	8009c7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2150      	movs	r1, #80	; 0x50
 8009626:	4618      	mov	r0, r3
 8009628:	f000 fb87 	bl	8009d3a <TIM_ITRx_SetConfig>
      break;
 800962c:	e02c      	b.n	8009688 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6818      	ldr	r0, [r3, #0]
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	6859      	ldr	r1, [r3, #4]
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	461a      	mov	r2, r3
 800963c:	f000 fb4d 	bl	8009cda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2160      	movs	r1, #96	; 0x60
 8009646:	4618      	mov	r0, r3
 8009648:	f000 fb77 	bl	8009d3a <TIM_ITRx_SetConfig>
      break;
 800964c:	e01c      	b.n	8009688 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6818      	ldr	r0, [r3, #0]
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	6859      	ldr	r1, [r3, #4]
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	461a      	mov	r2, r3
 800965c:	f000 fb0e 	bl	8009c7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2140      	movs	r1, #64	; 0x40
 8009666:	4618      	mov	r0, r3
 8009668:	f000 fb67 	bl	8009d3a <TIM_ITRx_SetConfig>
      break;
 800966c:	e00c      	b.n	8009688 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4619      	mov	r1, r3
 8009678:	4610      	mov	r0, r2
 800967a:	f000 fb5e 	bl	8009d3a <TIM_ITRx_SetConfig>
      break;
 800967e:	e003      	b.n	8009688 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	73fb      	strb	r3, [r7, #15]
      break;
 8009684:	e000      	b.n	8009688 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009686:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009698:	7bfb      	ldrb	r3, [r7, #15]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
	...

080096a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a2e      	ldr	r2, [pc, #184]	; (8009770 <TIM_Base_SetConfig+0xcc>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d007      	beq.n	80096cc <TIM_Base_SetConfig+0x28>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096c2:	d003      	beq.n	80096cc <TIM_Base_SetConfig+0x28>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a2b      	ldr	r2, [pc, #172]	; (8009774 <TIM_Base_SetConfig+0xd0>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d108      	bne.n	80096de <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	4313      	orrs	r3, r2
 80096dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a23      	ldr	r2, [pc, #140]	; (8009770 <TIM_Base_SetConfig+0xcc>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d00f      	beq.n	8009706 <TIM_Base_SetConfig+0x62>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096ec:	d00b      	beq.n	8009706 <TIM_Base_SetConfig+0x62>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a20      	ldr	r2, [pc, #128]	; (8009774 <TIM_Base_SetConfig+0xd0>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d007      	beq.n	8009706 <TIM_Base_SetConfig+0x62>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a1f      	ldr	r2, [pc, #124]	; (8009778 <TIM_Base_SetConfig+0xd4>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d003      	beq.n	8009706 <TIM_Base_SetConfig+0x62>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a1e      	ldr	r2, [pc, #120]	; (800977c <TIM_Base_SetConfig+0xd8>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d108      	bne.n	8009718 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800970c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	4313      	orrs	r3, r2
 8009716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	695b      	ldr	r3, [r3, #20]
 8009722:	4313      	orrs	r3, r2
 8009724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	689a      	ldr	r2, [r3, #8]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a0c      	ldr	r2, [pc, #48]	; (8009770 <TIM_Base_SetConfig+0xcc>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d007      	beq.n	8009754 <TIM_Base_SetConfig+0xb0>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a0c      	ldr	r2, [pc, #48]	; (8009778 <TIM_Base_SetConfig+0xd4>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d003      	beq.n	8009754 <TIM_Base_SetConfig+0xb0>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a0b      	ldr	r2, [pc, #44]	; (800977c <TIM_Base_SetConfig+0xd8>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d103      	bne.n	800975c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	691a      	ldr	r2, [r3, #16]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	615a      	str	r2, [r3, #20]
}
 8009762:	bf00      	nop
 8009764:	3714      	adds	r7, #20
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	40012c00 	.word	0x40012c00
 8009774:	40000400 	.word	0x40000400
 8009778:	40014000 	.word	0x40014000
 800977c:	40014400 	.word	0x40014400

08009780 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009780:	b480      	push	{r7}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	f023 0201 	bic.w	r2, r3, #1
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f023 0303 	bic.w	r3, r3, #3
 80097ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	f023 0302 	bic.w	r3, r3, #2
 80097cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	697a      	ldr	r2, [r7, #20]
 80097d4:	4313      	orrs	r3, r2
 80097d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a24      	ldr	r2, [pc, #144]	; (800986c <TIM_OC1_SetConfig+0xec>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d007      	beq.n	80097f0 <TIM_OC1_SetConfig+0x70>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a23      	ldr	r2, [pc, #140]	; (8009870 <TIM_OC1_SetConfig+0xf0>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d003      	beq.n	80097f0 <TIM_OC1_SetConfig+0x70>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4a22      	ldr	r2, [pc, #136]	; (8009874 <TIM_OC1_SetConfig+0xf4>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d10c      	bne.n	800980a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	f023 0308 	bic.w	r3, r3, #8
 80097f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	697a      	ldr	r2, [r7, #20]
 80097fe:	4313      	orrs	r3, r2
 8009800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	f023 0304 	bic.w	r3, r3, #4
 8009808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a17      	ldr	r2, [pc, #92]	; (800986c <TIM_OC1_SetConfig+0xec>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d007      	beq.n	8009822 <TIM_OC1_SetConfig+0xa2>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a16      	ldr	r2, [pc, #88]	; (8009870 <TIM_OC1_SetConfig+0xf0>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d003      	beq.n	8009822 <TIM_OC1_SetConfig+0xa2>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4a15      	ldr	r2, [pc, #84]	; (8009874 <TIM_OC1_SetConfig+0xf4>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d111      	bne.n	8009846 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	695b      	ldr	r3, [r3, #20]
 8009836:	693a      	ldr	r2, [r7, #16]
 8009838:	4313      	orrs	r3, r2
 800983a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	693a      	ldr	r2, [r7, #16]
 8009842:	4313      	orrs	r3, r2
 8009844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	68fa      	ldr	r2, [r7, #12]
 8009850:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	685a      	ldr	r2, [r3, #4]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	697a      	ldr	r2, [r7, #20]
 800985e:	621a      	str	r2, [r3, #32]
}
 8009860:	bf00      	nop
 8009862:	371c      	adds	r7, #28
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr
 800986c:	40012c00 	.word	0x40012c00
 8009870:	40014000 	.word	0x40014000
 8009874:	40014400 	.word	0x40014400

08009878 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009878:	b480      	push	{r7}
 800987a:	b087      	sub	sp, #28
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	f023 0210 	bic.w	r2, r3, #16
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6a1b      	ldr	r3, [r3, #32]
 8009892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	021b      	lsls	r3, r3, #8
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	4313      	orrs	r3, r2
 80098be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	f023 0320 	bic.w	r3, r3, #32
 80098c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	011b      	lsls	r3, r3, #4
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	4313      	orrs	r3, r2
 80098d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a22      	ldr	r2, [pc, #136]	; (8009960 <TIM_OC2_SetConfig+0xe8>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d10d      	bne.n	80098f8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	011b      	lsls	r3, r3, #4
 80098ea:	697a      	ldr	r2, [r7, #20]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a19      	ldr	r2, [pc, #100]	; (8009960 <TIM_OC2_SetConfig+0xe8>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d007      	beq.n	8009910 <TIM_OC2_SetConfig+0x98>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a18      	ldr	r2, [pc, #96]	; (8009964 <TIM_OC2_SetConfig+0xec>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d003      	beq.n	8009910 <TIM_OC2_SetConfig+0x98>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a17      	ldr	r2, [pc, #92]	; (8009968 <TIM_OC2_SetConfig+0xf0>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d113      	bne.n	8009938 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009916:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800991e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	695b      	ldr	r3, [r3, #20]
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	4313      	orrs	r3, r2
 800992a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	699b      	ldr	r3, [r3, #24]
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	693a      	ldr	r2, [r7, #16]
 8009934:	4313      	orrs	r3, r2
 8009936:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	693a      	ldr	r2, [r7, #16]
 800993c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	685a      	ldr	r2, [r3, #4]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	697a      	ldr	r2, [r7, #20]
 8009950:	621a      	str	r2, [r3, #32]
}
 8009952:	bf00      	nop
 8009954:	371c      	adds	r7, #28
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	40012c00 	.word	0x40012c00
 8009964:	40014000 	.word	0x40014000
 8009968:	40014400 	.word	0x40014400

0800996c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800996c:	b480      	push	{r7}
 800996e:	b087      	sub	sp, #28
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a1b      	ldr	r3, [r3, #32]
 800997a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6a1b      	ldr	r3, [r3, #32]
 8009986:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	69db      	ldr	r3, [r3, #28]
 8009992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800999a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800999e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f023 0303 	bic.w	r3, r3, #3
 80099a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	021b      	lsls	r3, r3, #8
 80099c0:	697a      	ldr	r2, [r7, #20]
 80099c2:	4313      	orrs	r3, r2
 80099c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4a21      	ldr	r2, [pc, #132]	; (8009a50 <TIM_OC3_SetConfig+0xe4>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d10d      	bne.n	80099ea <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	021b      	lsls	r3, r3, #8
 80099dc:	697a      	ldr	r2, [r7, #20]
 80099de:	4313      	orrs	r3, r2
 80099e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a18      	ldr	r2, [pc, #96]	; (8009a50 <TIM_OC3_SetConfig+0xe4>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d007      	beq.n	8009a02 <TIM_OC3_SetConfig+0x96>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a17      	ldr	r2, [pc, #92]	; (8009a54 <TIM_OC3_SetConfig+0xe8>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d003      	beq.n	8009a02 <TIM_OC3_SetConfig+0x96>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a16      	ldr	r2, [pc, #88]	; (8009a58 <TIM_OC3_SetConfig+0xec>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d113      	bne.n	8009a2a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	695b      	ldr	r3, [r3, #20]
 8009a16:	011b      	lsls	r3, r3, #4
 8009a18:	693a      	ldr	r2, [r7, #16]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	699b      	ldr	r3, [r3, #24]
 8009a22:	011b      	lsls	r3, r3, #4
 8009a24:	693a      	ldr	r2, [r7, #16]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	685a      	ldr	r2, [r3, #4]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	621a      	str	r2, [r3, #32]
}
 8009a44:	bf00      	nop
 8009a46:	371c      	adds	r7, #28
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr
 8009a50:	40012c00 	.word	0x40012c00
 8009a54:	40014000 	.word	0x40014000
 8009a58:	40014400 	.word	0x40014400

08009a5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b087      	sub	sp, #28
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a1b      	ldr	r3, [r3, #32]
 8009a6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a1b      	ldr	r3, [r3, #32]
 8009a76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	69db      	ldr	r3, [r3, #28]
 8009a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	021b      	lsls	r3, r3, #8
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009aaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	031b      	lsls	r3, r3, #12
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a14      	ldr	r2, [pc, #80]	; (8009b0c <TIM_OC4_SetConfig+0xb0>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d007      	beq.n	8009ad0 <TIM_OC4_SetConfig+0x74>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a13      	ldr	r2, [pc, #76]	; (8009b10 <TIM_OC4_SetConfig+0xb4>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d003      	beq.n	8009ad0 <TIM_OC4_SetConfig+0x74>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a12      	ldr	r2, [pc, #72]	; (8009b14 <TIM_OC4_SetConfig+0xb8>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d109      	bne.n	8009ae4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ad6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	695b      	ldr	r3, [r3, #20]
 8009adc:	019b      	lsls	r3, r3, #6
 8009ade:	697a      	ldr	r2, [r7, #20]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	685a      	ldr	r2, [r3, #4]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	693a      	ldr	r2, [r7, #16]
 8009afc:	621a      	str	r2, [r3, #32]
}
 8009afe:	bf00      	nop
 8009b00:	371c      	adds	r7, #28
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	40012c00 	.word	0x40012c00
 8009b10:	40014000 	.word	0x40014000
 8009b14:	40014400 	.word	0x40014400

08009b18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b087      	sub	sp, #28
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a1b      	ldr	r3, [r3, #32]
 8009b26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a1b      	ldr	r3, [r3, #32]
 8009b32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009b5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	041b      	lsls	r3, r3, #16
 8009b64:	693a      	ldr	r2, [r7, #16]
 8009b66:	4313      	orrs	r3, r2
 8009b68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4a13      	ldr	r2, [pc, #76]	; (8009bbc <TIM_OC5_SetConfig+0xa4>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d007      	beq.n	8009b82 <TIM_OC5_SetConfig+0x6a>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	4a12      	ldr	r2, [pc, #72]	; (8009bc0 <TIM_OC5_SetConfig+0xa8>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d003      	beq.n	8009b82 <TIM_OC5_SetConfig+0x6a>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4a11      	ldr	r2, [pc, #68]	; (8009bc4 <TIM_OC5_SetConfig+0xac>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d109      	bne.n	8009b96 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	695b      	ldr	r3, [r3, #20]
 8009b8e:	021b      	lsls	r3, r3, #8
 8009b90:	697a      	ldr	r2, [r7, #20]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	697a      	ldr	r2, [r7, #20]
 8009b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	685a      	ldr	r2, [r3, #4]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	693a      	ldr	r2, [r7, #16]
 8009bae:	621a      	str	r2, [r3, #32]
}
 8009bb0:	bf00      	nop
 8009bb2:	371c      	adds	r7, #28
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr
 8009bbc:	40012c00 	.word	0x40012c00
 8009bc0:	40014000 	.word	0x40014000
 8009bc4:	40014400 	.word	0x40014400

08009bc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b087      	sub	sp, #28
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a1b      	ldr	r3, [r3, #32]
 8009bd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a1b      	ldr	r3, [r3, #32]
 8009be2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	021b      	lsls	r3, r3, #8
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	4313      	orrs	r3, r2
 8009c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	051b      	lsls	r3, r3, #20
 8009c16:	693a      	ldr	r2, [r7, #16]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a14      	ldr	r2, [pc, #80]	; (8009c70 <TIM_OC6_SetConfig+0xa8>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d007      	beq.n	8009c34 <TIM_OC6_SetConfig+0x6c>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a13      	ldr	r2, [pc, #76]	; (8009c74 <TIM_OC6_SetConfig+0xac>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d003      	beq.n	8009c34 <TIM_OC6_SetConfig+0x6c>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4a12      	ldr	r2, [pc, #72]	; (8009c78 <TIM_OC6_SetConfig+0xb0>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d109      	bne.n	8009c48 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	695b      	ldr	r3, [r3, #20]
 8009c40:	029b      	lsls	r3, r3, #10
 8009c42:	697a      	ldr	r2, [r7, #20]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	697a      	ldr	r2, [r7, #20]
 8009c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	685a      	ldr	r2, [r3, #4]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	693a      	ldr	r2, [r7, #16]
 8009c60:	621a      	str	r2, [r3, #32]
}
 8009c62:	bf00      	nop
 8009c64:	371c      	adds	r7, #28
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	40012c00 	.word	0x40012c00
 8009c74:	40014000 	.word	0x40014000
 8009c78:	40014400 	.word	0x40014400

08009c7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b087      	sub	sp, #28
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6a1b      	ldr	r3, [r3, #32]
 8009c8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6a1b      	ldr	r3, [r3, #32]
 8009c92:	f023 0201 	bic.w	r2, r3, #1
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	011b      	lsls	r3, r3, #4
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	f023 030a 	bic.w	r3, r3, #10
 8009cb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	697a      	ldr	r2, [r7, #20]
 8009ccc:	621a      	str	r2, [r3, #32]
}
 8009cce:	bf00      	nop
 8009cd0:	371c      	adds	r7, #28
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr

08009cda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cda:	b480      	push	{r7}
 8009cdc:	b087      	sub	sp, #28
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	60f8      	str	r0, [r7, #12]
 8009ce2:	60b9      	str	r1, [r7, #8]
 8009ce4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6a1b      	ldr	r3, [r3, #32]
 8009cea:	f023 0210 	bic.w	r2, r3, #16
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	699b      	ldr	r3, [r3, #24]
 8009cf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6a1b      	ldr	r3, [r3, #32]
 8009cfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	031b      	lsls	r3, r3, #12
 8009d0a:	697a      	ldr	r2, [r7, #20]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	011b      	lsls	r3, r3, #4
 8009d1c:	693a      	ldr	r2, [r7, #16]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	697a      	ldr	r2, [r7, #20]
 8009d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	693a      	ldr	r2, [r7, #16]
 8009d2c:	621a      	str	r2, [r3, #32]
}
 8009d2e:	bf00      	nop
 8009d30:	371c      	adds	r7, #28
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b085      	sub	sp, #20
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d52:	683a      	ldr	r2, [r7, #0]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	4313      	orrs	r3, r2
 8009d58:	f043 0307 	orr.w	r3, r3, #7
 8009d5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	609a      	str	r2, [r3, #8]
}
 8009d64:	bf00      	nop
 8009d66:	3714      	adds	r7, #20
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b087      	sub	sp, #28
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
 8009d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	021a      	lsls	r2, r3, #8
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	431a      	orrs	r2, r3
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	697a      	ldr	r2, [r7, #20]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	697a      	ldr	r2, [r7, #20]
 8009da2:	609a      	str	r2, [r3, #8]
}
 8009da4:	bf00      	nop
 8009da6:	371c      	adds	r7, #28
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b087      	sub	sp, #28
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	f003 031f 	and.w	r3, r3, #31
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8009dc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6a1a      	ldr	r2, [r3, #32]
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	43db      	mvns	r3, r3
 8009dd2:	401a      	ands	r2, r3
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6a1a      	ldr	r2, [r3, #32]
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	f003 031f 	and.w	r3, r3, #31
 8009de2:	6879      	ldr	r1, [r7, #4]
 8009de4:	fa01 f303 	lsl.w	r3, r1, r3
 8009de8:	431a      	orrs	r2, r3
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	621a      	str	r2, [r3, #32]
}
 8009dee:	bf00      	nop
 8009df0:	371c      	adds	r7, #28
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
	...

08009dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d101      	bne.n	8009e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e10:	2302      	movs	r3, #2
 8009e12:	e054      	b.n	8009ebe <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2202      	movs	r2, #2
 8009e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a24      	ldr	r2, [pc, #144]	; (8009ecc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d108      	bne.n	8009e50 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009e44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a17      	ldr	r2, [pc, #92]	; (8009ecc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d00e      	beq.n	8009e92 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e7c:	d009      	beq.n	8009e92 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a13      	ldr	r2, [pc, #76]	; (8009ed0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d004      	beq.n	8009e92 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a11      	ldr	r2, [pc, #68]	; (8009ed4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d10c      	bne.n	8009eac <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	68ba      	ldr	r2, [r7, #8]
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68ba      	ldr	r2, [r7, #8]
 8009eaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3714      	adds	r7, #20
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
 8009eca:	bf00      	nop
 8009ecc:	40012c00 	.word	0x40012c00
 8009ed0:	40000400 	.word	0x40000400
 8009ed4:	40014000 	.word	0x40014000

08009ed8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b085      	sub	sp, #20
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d101      	bne.n	8009ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009ef0:	2302      	movs	r3, #2
 8009ef2:	e060      	b.n	8009fb6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	4313      	orrs	r3, r2
 8009f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	691b      	ldr	r3, [r3, #16]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	695b      	ldr	r3, [r3, #20]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	041b      	lsls	r3, r3, #16
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a14      	ldr	r2, [pc, #80]	; (8009fc4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d115      	bne.n	8009fa4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f82:	051b      	lsls	r3, r3, #20
 8009f84:	4313      	orrs	r3, r2
 8009f86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	69db      	ldr	r3, [r3, #28]
 8009f92:	4313      	orrs	r3, r2
 8009f94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	6a1b      	ldr	r3, [r3, #32]
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	40012c00 	.word	0x40012c00

08009fc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d101      	bne.n	8009fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e040      	b.n	800a05c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d106      	bne.n	8009ff0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f7f9 fd32 	bl	8003a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2224      	movs	r2, #36	; 0x24
 8009ff4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f022 0201 	bic.w	r2, r2, #1
 800a004:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 f9fe 	bl	800a408 <UART_SetConfig>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d101      	bne.n	800a016 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	e022      	b.n	800a05c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d002      	beq.n	800a024 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 fc4e 	bl	800a8c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	685a      	ldr	r2, [r3, #4]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	689a      	ldr	r2, [r3, #8]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f042 0201 	orr.w	r2, r2, #1
 800a052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 fcd5 	bl	800aa04 <UART_CheckIdleState>
 800a05a:	4603      	mov	r3, r0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3708      	adds	r7, #8
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b08a      	sub	sp, #40	; 0x28
 800a068:	af02      	add	r7, sp, #8
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	603b      	str	r3, [r7, #0]
 800a070:	4613      	mov	r3, r2
 800a072:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a078:	2b20      	cmp	r3, #32
 800a07a:	f040 8082 	bne.w	800a182 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d002      	beq.n	800a08a <HAL_UART_Transmit+0x26>
 800a084:	88fb      	ldrh	r3, [r7, #6]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d101      	bne.n	800a08e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	e07a      	b.n	800a184 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a094:	2b01      	cmp	r3, #1
 800a096:	d101      	bne.n	800a09c <HAL_UART_Transmit+0x38>
 800a098:	2302      	movs	r3, #2
 800a09a:	e073      	b.n	800a184 <HAL_UART_Transmit+0x120>
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2221      	movs	r2, #33	; 0x21
 800a0b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a0b2:	f7f9 ff62 	bl	8003f7a <HAL_GetTick>
 800a0b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	88fa      	ldrh	r2, [r7, #6]
 800a0bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	88fa      	ldrh	r2, [r7, #6]
 800a0c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0d0:	d108      	bne.n	800a0e4 <HAL_UART_Transmit+0x80>
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d104      	bne.n	800a0e4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	61bb      	str	r3, [r7, #24]
 800a0e2:	e003      	b.n	800a0ec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a0f4:	e02d      	b.n	800a152 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	2180      	movs	r1, #128	; 0x80
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f000 fcc8 	bl	800aa96 <UART_WaitOnFlagUntilTimeout>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d001      	beq.n	800a110 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a10c:	2303      	movs	r3, #3
 800a10e:	e039      	b.n	800a184 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a110:	69fb      	ldr	r3, [r7, #28]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d10b      	bne.n	800a12e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	881a      	ldrh	r2, [r3, #0]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a122:	b292      	uxth	r2, r2
 800a124:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	3302      	adds	r3, #2
 800a12a:	61bb      	str	r3, [r7, #24]
 800a12c:	e008      	b.n	800a140 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	781a      	ldrb	r2, [r3, #0]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	b292      	uxth	r2, r2
 800a138:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	3301      	adds	r3, #1
 800a13e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a146:	b29b      	uxth	r3, r3
 800a148:	3b01      	subs	r3, #1
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a158:	b29b      	uxth	r3, r3
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d1cb      	bne.n	800a0f6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	9300      	str	r3, [sp, #0]
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	2200      	movs	r2, #0
 800a166:	2140      	movs	r1, #64	; 0x40
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	f000 fc94 	bl	800aa96 <UART_WaitOnFlagUntilTimeout>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d001      	beq.n	800a178 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a174:	2303      	movs	r3, #3
 800a176:	e005      	b.n	800a184 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2220      	movs	r2, #32
 800a17c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a17e:	2300      	movs	r3, #0
 800a180:	e000      	b.n	800a184 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a182:	2302      	movs	r3, #2
  }
}
 800a184:	4618      	mov	r0, r3
 800a186:	3720      	adds	r7, #32
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b08a      	sub	sp, #40	; 0x28
 800a190:	af02      	add	r7, sp, #8
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	603b      	str	r3, [r7, #0]
 800a198:	4613      	mov	r3, r2
 800a19a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1a0:	2b20      	cmp	r3, #32
 800a1a2:	f040 80bf 	bne.w	800a324 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d002      	beq.n	800a1b2 <HAL_UART_Receive+0x26>
 800a1ac:	88fb      	ldrh	r3, [r7, #6]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d101      	bne.n	800a1b6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e0b7      	b.n	800a326 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d101      	bne.n	800a1c4 <HAL_UART_Receive+0x38>
 800a1c0:	2302      	movs	r3, #2
 800a1c2:	e0b0      	b.n	800a326 <HAL_UART_Receive+0x19a>
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2222      	movs	r2, #34	; 0x22
 800a1d8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a1e0:	f7f9 fecb 	bl	8003f7a <HAL_GetTick>
 800a1e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	88fa      	ldrh	r2, [r7, #6]
 800a1ea:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	88fa      	ldrh	r2, [r7, #6]
 800a1f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1fe:	d10e      	bne.n	800a21e <HAL_UART_Receive+0x92>
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d105      	bne.n	800a214 <HAL_UART_Receive+0x88>
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a20e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a212:	e02d      	b.n	800a270 <HAL_UART_Receive+0xe4>
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	22ff      	movs	r2, #255	; 0xff
 800a218:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a21c:	e028      	b.n	800a270 <HAL_UART_Receive+0xe4>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10d      	bne.n	800a242 <HAL_UART_Receive+0xb6>
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	691b      	ldr	r3, [r3, #16]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d104      	bne.n	800a238 <HAL_UART_Receive+0xac>
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	22ff      	movs	r2, #255	; 0xff
 800a232:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a236:	e01b      	b.n	800a270 <HAL_UART_Receive+0xe4>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	227f      	movs	r2, #127	; 0x7f
 800a23c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a240:	e016      	b.n	800a270 <HAL_UART_Receive+0xe4>
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a24a:	d10d      	bne.n	800a268 <HAL_UART_Receive+0xdc>
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d104      	bne.n	800a25e <HAL_UART_Receive+0xd2>
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	227f      	movs	r2, #127	; 0x7f
 800a258:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a25c:	e008      	b.n	800a270 <HAL_UART_Receive+0xe4>
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	223f      	movs	r2, #63	; 0x3f
 800a262:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a266:	e003      	b.n	800a270 <HAL_UART_Receive+0xe4>
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a276:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a280:	d108      	bne.n	800a294 <HAL_UART_Receive+0x108>
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	691b      	ldr	r3, [r3, #16]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d104      	bne.n	800a294 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800a28a:	2300      	movs	r3, #0
 800a28c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	61bb      	str	r3, [r7, #24]
 800a292:	e003      	b.n	800a29c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a298:	2300      	movs	r3, #0
 800a29a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a2a4:	e033      	b.n	800a30e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	9300      	str	r3, [sp, #0]
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	2120      	movs	r1, #32
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	f000 fbf0 	bl	800aa96 <UART_WaitOnFlagUntilTimeout>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d001      	beq.n	800a2c0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	e032      	b.n	800a326 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d10c      	bne.n	800a2e0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a2cc:	b29a      	uxth	r2, r3
 800a2ce:	8a7b      	ldrh	r3, [r7, #18]
 800a2d0:	4013      	ands	r3, r2
 800a2d2:	b29a      	uxth	r2, r3
 800a2d4:	69bb      	ldr	r3, [r7, #24]
 800a2d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	3302      	adds	r3, #2
 800a2dc:	61bb      	str	r3, [r7, #24]
 800a2de:	e00d      	b.n	800a2fc <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	b2da      	uxtb	r2, r3
 800a2ea:	8a7b      	ldrh	r3, [r7, #18]
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	4013      	ands	r3, r2
 800a2f0:	b2da      	uxtb	r2, r3
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a302:	b29b      	uxth	r3, r3
 800a304:	3b01      	subs	r3, #1
 800a306:	b29a      	uxth	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a314:	b29b      	uxth	r3, r3
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1c5      	bne.n	800a2a6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2220      	movs	r2, #32
 800a31e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a320:	2300      	movs	r3, #0
 800a322:	e000      	b.n	800a326 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800a324:	2302      	movs	r3, #2
  }
}
 800a326:	4618      	mov	r0, r3
 800a328:	3720      	adds	r7, #32
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
	...

0800a330 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b08a      	sub	sp, #40	; 0x28
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	4613      	mov	r3, r2
 800a33c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a342:	2b20      	cmp	r3, #32
 800a344:	d142      	bne.n	800a3cc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d002      	beq.n	800a352 <HAL_UART_Receive_IT+0x22>
 800a34c:	88fb      	ldrh	r3, [r7, #6]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d101      	bne.n	800a356 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	e03b      	b.n	800a3ce <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d101      	bne.n	800a364 <HAL_UART_Receive_IT+0x34>
 800a360:	2302      	movs	r3, #2
 800a362:	e034      	b.n	800a3ce <HAL_UART_Receive_IT+0x9e>
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2200      	movs	r2, #0
 800a370:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a18      	ldr	r2, [pc, #96]	; (800a3d8 <HAL_UART_Receive_IT+0xa8>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d01f      	beq.n	800a3bc <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a386:	2b00      	cmp	r3, #0
 800a388:	d018      	beq.n	800a3bc <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	e853 3f00 	ldrex	r3, [r3]
 800a396:	613b      	str	r3, [r7, #16]
   return(result);
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a39e:	627b      	str	r3, [r7, #36]	; 0x24
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a8:	623b      	str	r3, [r7, #32]
 800a3aa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ac:	69f9      	ldr	r1, [r7, #28]
 800a3ae:	6a3a      	ldr	r2, [r7, #32]
 800a3b0:	e841 2300 	strex	r3, r2, [r1]
 800a3b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3b6:	69bb      	ldr	r3, [r7, #24]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d1e6      	bne.n	800a38a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a3bc:	88fb      	ldrh	r3, [r7, #6]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	68b9      	ldr	r1, [r7, #8]
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f000 fc2c 	bl	800ac20 <UART_Start_Receive_IT>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	e000      	b.n	800a3ce <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a3cc:	2302      	movs	r3, #2
  }
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3728      	adds	r7, #40	; 0x28
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	40008000 	.word	0x40008000

0800a3dc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a3e4:	bf00      	nop
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a3fc:	bf00      	nop
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a408:	b5b0      	push	{r4, r5, r7, lr}
 800a40a:	b088      	sub	sp, #32
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a410:	2300      	movs	r3, #0
 800a412:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	689a      	ldr	r2, [r3, #8]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	691b      	ldr	r3, [r3, #16]
 800a41c:	431a      	orrs	r2, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	695b      	ldr	r3, [r3, #20]
 800a422:	431a      	orrs	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	69db      	ldr	r3, [r3, #28]
 800a428:	4313      	orrs	r3, r2
 800a42a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	4ba4      	ldr	r3, [pc, #656]	; (800a6c4 <UART_SetConfig+0x2bc>)
 800a434:	4013      	ands	r3, r2
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	6812      	ldr	r2, [r2, #0]
 800a43a:	69f9      	ldr	r1, [r7, #28]
 800a43c:	430b      	orrs	r3, r1
 800a43e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	68da      	ldr	r2, [r3, #12]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	430a      	orrs	r2, r1
 800a454:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	699b      	ldr	r3, [r3, #24]
 800a45a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a99      	ldr	r2, [pc, #612]	; (800a6c8 <UART_SetConfig+0x2c0>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d004      	beq.n	800a470 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6a1b      	ldr	r3, [r3, #32]
 800a46a:	69fa      	ldr	r2, [r7, #28]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	69fa      	ldr	r2, [r7, #28]
 800a480:	430a      	orrs	r2, r1
 800a482:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a90      	ldr	r2, [pc, #576]	; (800a6cc <UART_SetConfig+0x2c4>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d121      	bne.n	800a4d2 <UART_SetConfig+0xca>
 800a48e:	4b90      	ldr	r3, [pc, #576]	; (800a6d0 <UART_SetConfig+0x2c8>)
 800a490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a494:	f003 0303 	and.w	r3, r3, #3
 800a498:	2b03      	cmp	r3, #3
 800a49a:	d817      	bhi.n	800a4cc <UART_SetConfig+0xc4>
 800a49c:	a201      	add	r2, pc, #4	; (adr r2, 800a4a4 <UART_SetConfig+0x9c>)
 800a49e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a2:	bf00      	nop
 800a4a4:	0800a4b5 	.word	0x0800a4b5
 800a4a8:	0800a4c1 	.word	0x0800a4c1
 800a4ac:	0800a4bb 	.word	0x0800a4bb
 800a4b0:	0800a4c7 	.word	0x0800a4c7
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	76fb      	strb	r3, [r7, #27]
 800a4b8:	e0bc      	b.n	800a634 <UART_SetConfig+0x22c>
 800a4ba:	2302      	movs	r3, #2
 800a4bc:	76fb      	strb	r3, [r7, #27]
 800a4be:	e0b9      	b.n	800a634 <UART_SetConfig+0x22c>
 800a4c0:	2304      	movs	r3, #4
 800a4c2:	76fb      	strb	r3, [r7, #27]
 800a4c4:	e0b6      	b.n	800a634 <UART_SetConfig+0x22c>
 800a4c6:	2308      	movs	r3, #8
 800a4c8:	76fb      	strb	r3, [r7, #27]
 800a4ca:	e0b3      	b.n	800a634 <UART_SetConfig+0x22c>
 800a4cc:	2310      	movs	r3, #16
 800a4ce:	76fb      	strb	r3, [r7, #27]
 800a4d0:	e0b0      	b.n	800a634 <UART_SetConfig+0x22c>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a7f      	ldr	r2, [pc, #508]	; (800a6d4 <UART_SetConfig+0x2cc>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d132      	bne.n	800a542 <UART_SetConfig+0x13a>
 800a4dc:	4b7c      	ldr	r3, [pc, #496]	; (800a6d0 <UART_SetConfig+0x2c8>)
 800a4de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e2:	f003 030c 	and.w	r3, r3, #12
 800a4e6:	2b0c      	cmp	r3, #12
 800a4e8:	d828      	bhi.n	800a53c <UART_SetConfig+0x134>
 800a4ea:	a201      	add	r2, pc, #4	; (adr r2, 800a4f0 <UART_SetConfig+0xe8>)
 800a4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f0:	0800a525 	.word	0x0800a525
 800a4f4:	0800a53d 	.word	0x0800a53d
 800a4f8:	0800a53d 	.word	0x0800a53d
 800a4fc:	0800a53d 	.word	0x0800a53d
 800a500:	0800a531 	.word	0x0800a531
 800a504:	0800a53d 	.word	0x0800a53d
 800a508:	0800a53d 	.word	0x0800a53d
 800a50c:	0800a53d 	.word	0x0800a53d
 800a510:	0800a52b 	.word	0x0800a52b
 800a514:	0800a53d 	.word	0x0800a53d
 800a518:	0800a53d 	.word	0x0800a53d
 800a51c:	0800a53d 	.word	0x0800a53d
 800a520:	0800a537 	.word	0x0800a537
 800a524:	2300      	movs	r3, #0
 800a526:	76fb      	strb	r3, [r7, #27]
 800a528:	e084      	b.n	800a634 <UART_SetConfig+0x22c>
 800a52a:	2302      	movs	r3, #2
 800a52c:	76fb      	strb	r3, [r7, #27]
 800a52e:	e081      	b.n	800a634 <UART_SetConfig+0x22c>
 800a530:	2304      	movs	r3, #4
 800a532:	76fb      	strb	r3, [r7, #27]
 800a534:	e07e      	b.n	800a634 <UART_SetConfig+0x22c>
 800a536:	2308      	movs	r3, #8
 800a538:	76fb      	strb	r3, [r7, #27]
 800a53a:	e07b      	b.n	800a634 <UART_SetConfig+0x22c>
 800a53c:	2310      	movs	r3, #16
 800a53e:	76fb      	strb	r3, [r7, #27]
 800a540:	e078      	b.n	800a634 <UART_SetConfig+0x22c>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a64      	ldr	r2, [pc, #400]	; (800a6d8 <UART_SetConfig+0x2d0>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d120      	bne.n	800a58e <UART_SetConfig+0x186>
 800a54c:	4b60      	ldr	r3, [pc, #384]	; (800a6d0 <UART_SetConfig+0x2c8>)
 800a54e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a552:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a556:	2b30      	cmp	r3, #48	; 0x30
 800a558:	d013      	beq.n	800a582 <UART_SetConfig+0x17a>
 800a55a:	2b30      	cmp	r3, #48	; 0x30
 800a55c:	d814      	bhi.n	800a588 <UART_SetConfig+0x180>
 800a55e:	2b20      	cmp	r3, #32
 800a560:	d009      	beq.n	800a576 <UART_SetConfig+0x16e>
 800a562:	2b20      	cmp	r3, #32
 800a564:	d810      	bhi.n	800a588 <UART_SetConfig+0x180>
 800a566:	2b00      	cmp	r3, #0
 800a568:	d002      	beq.n	800a570 <UART_SetConfig+0x168>
 800a56a:	2b10      	cmp	r3, #16
 800a56c:	d006      	beq.n	800a57c <UART_SetConfig+0x174>
 800a56e:	e00b      	b.n	800a588 <UART_SetConfig+0x180>
 800a570:	2300      	movs	r3, #0
 800a572:	76fb      	strb	r3, [r7, #27]
 800a574:	e05e      	b.n	800a634 <UART_SetConfig+0x22c>
 800a576:	2302      	movs	r3, #2
 800a578:	76fb      	strb	r3, [r7, #27]
 800a57a:	e05b      	b.n	800a634 <UART_SetConfig+0x22c>
 800a57c:	2304      	movs	r3, #4
 800a57e:	76fb      	strb	r3, [r7, #27]
 800a580:	e058      	b.n	800a634 <UART_SetConfig+0x22c>
 800a582:	2308      	movs	r3, #8
 800a584:	76fb      	strb	r3, [r7, #27]
 800a586:	e055      	b.n	800a634 <UART_SetConfig+0x22c>
 800a588:	2310      	movs	r3, #16
 800a58a:	76fb      	strb	r3, [r7, #27]
 800a58c:	e052      	b.n	800a634 <UART_SetConfig+0x22c>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a52      	ldr	r2, [pc, #328]	; (800a6dc <UART_SetConfig+0x2d4>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d120      	bne.n	800a5da <UART_SetConfig+0x1d2>
 800a598:	4b4d      	ldr	r3, [pc, #308]	; (800a6d0 <UART_SetConfig+0x2c8>)
 800a59a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a59e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a5a2:	2bc0      	cmp	r3, #192	; 0xc0
 800a5a4:	d013      	beq.n	800a5ce <UART_SetConfig+0x1c6>
 800a5a6:	2bc0      	cmp	r3, #192	; 0xc0
 800a5a8:	d814      	bhi.n	800a5d4 <UART_SetConfig+0x1cc>
 800a5aa:	2b80      	cmp	r3, #128	; 0x80
 800a5ac:	d009      	beq.n	800a5c2 <UART_SetConfig+0x1ba>
 800a5ae:	2b80      	cmp	r3, #128	; 0x80
 800a5b0:	d810      	bhi.n	800a5d4 <UART_SetConfig+0x1cc>
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d002      	beq.n	800a5bc <UART_SetConfig+0x1b4>
 800a5b6:	2b40      	cmp	r3, #64	; 0x40
 800a5b8:	d006      	beq.n	800a5c8 <UART_SetConfig+0x1c0>
 800a5ba:	e00b      	b.n	800a5d4 <UART_SetConfig+0x1cc>
 800a5bc:	2300      	movs	r3, #0
 800a5be:	76fb      	strb	r3, [r7, #27]
 800a5c0:	e038      	b.n	800a634 <UART_SetConfig+0x22c>
 800a5c2:	2302      	movs	r3, #2
 800a5c4:	76fb      	strb	r3, [r7, #27]
 800a5c6:	e035      	b.n	800a634 <UART_SetConfig+0x22c>
 800a5c8:	2304      	movs	r3, #4
 800a5ca:	76fb      	strb	r3, [r7, #27]
 800a5cc:	e032      	b.n	800a634 <UART_SetConfig+0x22c>
 800a5ce:	2308      	movs	r3, #8
 800a5d0:	76fb      	strb	r3, [r7, #27]
 800a5d2:	e02f      	b.n	800a634 <UART_SetConfig+0x22c>
 800a5d4:	2310      	movs	r3, #16
 800a5d6:	76fb      	strb	r3, [r7, #27]
 800a5d8:	e02c      	b.n	800a634 <UART_SetConfig+0x22c>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a3a      	ldr	r2, [pc, #232]	; (800a6c8 <UART_SetConfig+0x2c0>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d125      	bne.n	800a630 <UART_SetConfig+0x228>
 800a5e4:	4b3a      	ldr	r3, [pc, #232]	; (800a6d0 <UART_SetConfig+0x2c8>)
 800a5e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a5ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5f2:	d017      	beq.n	800a624 <UART_SetConfig+0x21c>
 800a5f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5f8:	d817      	bhi.n	800a62a <UART_SetConfig+0x222>
 800a5fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5fe:	d00b      	beq.n	800a618 <UART_SetConfig+0x210>
 800a600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a604:	d811      	bhi.n	800a62a <UART_SetConfig+0x222>
 800a606:	2b00      	cmp	r3, #0
 800a608:	d003      	beq.n	800a612 <UART_SetConfig+0x20a>
 800a60a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a60e:	d006      	beq.n	800a61e <UART_SetConfig+0x216>
 800a610:	e00b      	b.n	800a62a <UART_SetConfig+0x222>
 800a612:	2300      	movs	r3, #0
 800a614:	76fb      	strb	r3, [r7, #27]
 800a616:	e00d      	b.n	800a634 <UART_SetConfig+0x22c>
 800a618:	2302      	movs	r3, #2
 800a61a:	76fb      	strb	r3, [r7, #27]
 800a61c:	e00a      	b.n	800a634 <UART_SetConfig+0x22c>
 800a61e:	2304      	movs	r3, #4
 800a620:	76fb      	strb	r3, [r7, #27]
 800a622:	e007      	b.n	800a634 <UART_SetConfig+0x22c>
 800a624:	2308      	movs	r3, #8
 800a626:	76fb      	strb	r3, [r7, #27]
 800a628:	e004      	b.n	800a634 <UART_SetConfig+0x22c>
 800a62a:	2310      	movs	r3, #16
 800a62c:	76fb      	strb	r3, [r7, #27]
 800a62e:	e001      	b.n	800a634 <UART_SetConfig+0x22c>
 800a630:	2310      	movs	r3, #16
 800a632:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a23      	ldr	r2, [pc, #140]	; (800a6c8 <UART_SetConfig+0x2c0>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	f040 8084 	bne.w	800a748 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a640:	7efb      	ldrb	r3, [r7, #27]
 800a642:	2b08      	cmp	r3, #8
 800a644:	d823      	bhi.n	800a68e <UART_SetConfig+0x286>
 800a646:	a201      	add	r2, pc, #4	; (adr r2, 800a64c <UART_SetConfig+0x244>)
 800a648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64c:	0800a671 	.word	0x0800a671
 800a650:	0800a68f 	.word	0x0800a68f
 800a654:	0800a679 	.word	0x0800a679
 800a658:	0800a68f 	.word	0x0800a68f
 800a65c:	0800a67f 	.word	0x0800a67f
 800a660:	0800a68f 	.word	0x0800a68f
 800a664:	0800a68f 	.word	0x0800a68f
 800a668:	0800a68f 	.word	0x0800a68f
 800a66c:	0800a687 	.word	0x0800a687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a670:	f7fd f9a2 	bl	80079b8 <HAL_RCC_GetPCLK1Freq>
 800a674:	6178      	str	r0, [r7, #20]
        break;
 800a676:	e00f      	b.n	800a698 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a678:	4b19      	ldr	r3, [pc, #100]	; (800a6e0 <UART_SetConfig+0x2d8>)
 800a67a:	617b      	str	r3, [r7, #20]
        break;
 800a67c:	e00c      	b.n	800a698 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a67e:	f7fd f903 	bl	8007888 <HAL_RCC_GetSysClockFreq>
 800a682:	6178      	str	r0, [r7, #20]
        break;
 800a684:	e008      	b.n	800a698 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a68a:	617b      	str	r3, [r7, #20]
        break;
 800a68c:	e004      	b.n	800a698 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 800a68e:	2300      	movs	r3, #0
 800a690:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a692:	2301      	movs	r3, #1
 800a694:	76bb      	strb	r3, [r7, #26]
        break;
 800a696:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f000 8102 	beq.w	800a8a4 <UART_SetConfig+0x49c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	685a      	ldr	r2, [r3, #4]
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	005b      	lsls	r3, r3, #1
 800a6a8:	4413      	add	r3, r2
 800a6aa:	697a      	ldr	r2, [r7, #20]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d305      	bcc.n	800a6bc <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a6b6:	697a      	ldr	r2, [r7, #20]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d913      	bls.n	800a6e4 <UART_SetConfig+0x2dc>
      {
        ret = HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	76bb      	strb	r3, [r7, #26]
 800a6c0:	e0f0      	b.n	800a8a4 <UART_SetConfig+0x49c>
 800a6c2:	bf00      	nop
 800a6c4:	efff69f3 	.word	0xefff69f3
 800a6c8:	40008000 	.word	0x40008000
 800a6cc:	40013800 	.word	0x40013800
 800a6d0:	40021000 	.word	0x40021000
 800a6d4:	40004400 	.word	0x40004400
 800a6d8:	40004800 	.word	0x40004800
 800a6dc:	40004c00 	.word	0x40004c00
 800a6e0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f04f 0100 	mov.w	r1, #0
 800a6ec:	f04f 0200 	mov.w	r2, #0
 800a6f0:	f04f 0300 	mov.w	r3, #0
 800a6f4:	020b      	lsls	r3, r1, #8
 800a6f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a6fa:	0202      	lsls	r2, r0, #8
 800a6fc:	6879      	ldr	r1, [r7, #4]
 800a6fe:	6849      	ldr	r1, [r1, #4]
 800a700:	0849      	lsrs	r1, r1, #1
 800a702:	4608      	mov	r0, r1
 800a704:	f04f 0100 	mov.w	r1, #0
 800a708:	1814      	adds	r4, r2, r0
 800a70a:	eb43 0501 	adc.w	r5, r3, r1
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	461a      	mov	r2, r3
 800a714:	f04f 0300 	mov.w	r3, #0
 800a718:	4620      	mov	r0, r4
 800a71a:	4629      	mov	r1, r5
 800a71c:	f7f6 fa9c 	bl	8000c58 <__aeabi_uldivmod>
 800a720:	4602      	mov	r2, r0
 800a722:	460b      	mov	r3, r1
 800a724:	4613      	mov	r3, r2
 800a726:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a72e:	d308      	bcc.n	800a742 <UART_SetConfig+0x33a>
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a736:	d204      	bcs.n	800a742 <UART_SetConfig+0x33a>
        {
          huart->Instance->BRR = usartdiv;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	693a      	ldr	r2, [r7, #16]
 800a73e:	60da      	str	r2, [r3, #12]
 800a740:	e0b0      	b.n	800a8a4 <UART_SetConfig+0x49c>
        }
        else
        {
          ret = HAL_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	76bb      	strb	r3, [r7, #26]
 800a746:	e0ad      	b.n	800a8a4 <UART_SetConfig+0x49c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	69db      	ldr	r3, [r3, #28]
 800a74c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a750:	d15b      	bne.n	800a80a <UART_SetConfig+0x402>
  {
    switch (clocksource)
 800a752:	7efb      	ldrb	r3, [r7, #27]
 800a754:	2b08      	cmp	r3, #8
 800a756:	d828      	bhi.n	800a7aa <UART_SetConfig+0x3a2>
 800a758:	a201      	add	r2, pc, #4	; (adr r2, 800a760 <UART_SetConfig+0x358>)
 800a75a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a75e:	bf00      	nop
 800a760:	0800a785 	.word	0x0800a785
 800a764:	0800a78d 	.word	0x0800a78d
 800a768:	0800a795 	.word	0x0800a795
 800a76c:	0800a7ab 	.word	0x0800a7ab
 800a770:	0800a79b 	.word	0x0800a79b
 800a774:	0800a7ab 	.word	0x0800a7ab
 800a778:	0800a7ab 	.word	0x0800a7ab
 800a77c:	0800a7ab 	.word	0x0800a7ab
 800a780:	0800a7a3 	.word	0x0800a7a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a784:	f7fd f918 	bl	80079b8 <HAL_RCC_GetPCLK1Freq>
 800a788:	6178      	str	r0, [r7, #20]
        break;
 800a78a:	e013      	b.n	800a7b4 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a78c:	f7fd f92a 	bl	80079e4 <HAL_RCC_GetPCLK2Freq>
 800a790:	6178      	str	r0, [r7, #20]
        break;
 800a792:	e00f      	b.n	800a7b4 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a794:	4b49      	ldr	r3, [pc, #292]	; (800a8bc <UART_SetConfig+0x4b4>)
 800a796:	617b      	str	r3, [r7, #20]
        break;
 800a798:	e00c      	b.n	800a7b4 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a79a:	f7fd f875 	bl	8007888 <HAL_RCC_GetSysClockFreq>
 800a79e:	6178      	str	r0, [r7, #20]
        break;
 800a7a0:	e008      	b.n	800a7b4 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7a6:	617b      	str	r3, [r7, #20]
        break;
 800a7a8:	e004      	b.n	800a7b4 <UART_SetConfig+0x3ac>
      default:
        pclk = 0U;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	76bb      	strb	r3, [r7, #26]
        break;
 800a7b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d074      	beq.n	800a8a4 <UART_SetConfig+0x49c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	005a      	lsls	r2, r3, #1
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	085b      	lsrs	r3, r3, #1
 800a7c4:	441a      	add	r2, r3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7ce:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	2b0f      	cmp	r3, #15
 800a7d4:	d916      	bls.n	800a804 <UART_SetConfig+0x3fc>
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7dc:	d212      	bcs.n	800a804 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	f023 030f 	bic.w	r3, r3, #15
 800a7e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	085b      	lsrs	r3, r3, #1
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	f003 0307 	and.w	r3, r3, #7
 800a7f2:	b29a      	uxth	r2, r3
 800a7f4:	89fb      	ldrh	r3, [r7, #14]
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	89fa      	ldrh	r2, [r7, #14]
 800a800:	60da      	str	r2, [r3, #12]
 800a802:	e04f      	b.n	800a8a4 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 800a804:	2301      	movs	r3, #1
 800a806:	76bb      	strb	r3, [r7, #26]
 800a808:	e04c      	b.n	800a8a4 <UART_SetConfig+0x49c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a80a:	7efb      	ldrb	r3, [r7, #27]
 800a80c:	2b08      	cmp	r3, #8
 800a80e:	d828      	bhi.n	800a862 <UART_SetConfig+0x45a>
 800a810:	a201      	add	r2, pc, #4	; (adr r2, 800a818 <UART_SetConfig+0x410>)
 800a812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a816:	bf00      	nop
 800a818:	0800a83d 	.word	0x0800a83d
 800a81c:	0800a845 	.word	0x0800a845
 800a820:	0800a84d 	.word	0x0800a84d
 800a824:	0800a863 	.word	0x0800a863
 800a828:	0800a853 	.word	0x0800a853
 800a82c:	0800a863 	.word	0x0800a863
 800a830:	0800a863 	.word	0x0800a863
 800a834:	0800a863 	.word	0x0800a863
 800a838:	0800a85b 	.word	0x0800a85b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a83c:	f7fd f8bc 	bl	80079b8 <HAL_RCC_GetPCLK1Freq>
 800a840:	6178      	str	r0, [r7, #20]
        break;
 800a842:	e013      	b.n	800a86c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a844:	f7fd f8ce 	bl	80079e4 <HAL_RCC_GetPCLK2Freq>
 800a848:	6178      	str	r0, [r7, #20]
        break;
 800a84a:	e00f      	b.n	800a86c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a84c:	4b1b      	ldr	r3, [pc, #108]	; (800a8bc <UART_SetConfig+0x4b4>)
 800a84e:	617b      	str	r3, [r7, #20]
        break;
 800a850:	e00c      	b.n	800a86c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a852:	f7fd f819 	bl	8007888 <HAL_RCC_GetSysClockFreq>
 800a856:	6178      	str	r0, [r7, #20]
        break;
 800a858:	e008      	b.n	800a86c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a85a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a85e:	617b      	str	r3, [r7, #20]
        break;
 800a860:	e004      	b.n	800a86c <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 800a862:	2300      	movs	r3, #0
 800a864:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	76bb      	strb	r3, [r7, #26]
        break;
 800a86a:	bf00      	nop
    }

    if (pclk != 0U)
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d018      	beq.n	800a8a4 <UART_SetConfig+0x49c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	085a      	lsrs	r2, r3, #1
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	441a      	add	r2, r3
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	fbb2 f3f3 	udiv	r3, r2, r3
 800a884:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	2b0f      	cmp	r3, #15
 800a88a:	d909      	bls.n	800a8a0 <UART_SetConfig+0x498>
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a892:	d205      	bcs.n	800a8a0 <UART_SetConfig+0x498>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	b29a      	uxth	r2, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	60da      	str	r2, [r3, #12]
 800a89e:	e001      	b.n	800a8a4 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a8b0:	7ebb      	ldrb	r3, [r7, #26]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3720      	adds	r7, #32
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bdb0      	pop	{r4, r5, r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	00f42400 	.word	0x00f42400

0800a8c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8cc:	f003 0301 	and.w	r3, r3, #1
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d00a      	beq.n	800a8ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	430a      	orrs	r2, r1
 800a8e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ee:	f003 0302 	and.w	r3, r3, #2
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d00a      	beq.n	800a90c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	430a      	orrs	r2, r1
 800a90a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a910:	f003 0304 	and.w	r3, r3, #4
 800a914:	2b00      	cmp	r3, #0
 800a916:	d00a      	beq.n	800a92e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	430a      	orrs	r2, r1
 800a92c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a932:	f003 0308 	and.w	r3, r3, #8
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00a      	beq.n	800a950 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	430a      	orrs	r2, r1
 800a94e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a954:	f003 0310 	and.w	r3, r3, #16
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00a      	beq.n	800a972 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	430a      	orrs	r2, r1
 800a970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a976:	f003 0320 	and.w	r3, r3, #32
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00a      	beq.n	800a994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	430a      	orrs	r2, r1
 800a992:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d01a      	beq.n	800a9d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	430a      	orrs	r2, r1
 800a9b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9be:	d10a      	bne.n	800a9d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	430a      	orrs	r2, r1
 800a9d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d00a      	beq.n	800a9f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	430a      	orrs	r2, r1
 800a9f6:	605a      	str	r2, [r3, #4]
  }
}
 800a9f8:	bf00      	nop
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b086      	sub	sp, #24
 800aa08:	af02      	add	r7, sp, #8
 800aa0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa14:	f7f9 fab1 	bl	8003f7a <HAL_GetTick>
 800aa18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 0308 	and.w	r3, r3, #8
 800aa24:	2b08      	cmp	r3, #8
 800aa26:	d10e      	bne.n	800aa46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa2c:	9300      	str	r3, [sp, #0]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 f82d 	bl	800aa96 <UART_WaitOnFlagUntilTimeout>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d001      	beq.n	800aa46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa42:	2303      	movs	r3, #3
 800aa44:	e023      	b.n	800aa8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f003 0304 	and.w	r3, r3, #4
 800aa50:	2b04      	cmp	r3, #4
 800aa52:	d10e      	bne.n	800aa72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa58:	9300      	str	r3, [sp, #0]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 f817 	bl	800aa96 <UART_WaitOnFlagUntilTimeout>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d001      	beq.n	800aa72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa6e:	2303      	movs	r3, #3
 800aa70:	e00d      	b.n	800aa8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2220      	movs	r2, #32
 800aa76:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2220      	movs	r2, #32
 800aa7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b09c      	sub	sp, #112	; 0x70
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	60f8      	str	r0, [r7, #12]
 800aa9e:	60b9      	str	r1, [r7, #8]
 800aaa0:	603b      	str	r3, [r7, #0]
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aaa6:	e0a5      	b.n	800abf4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aaa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aaaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaae:	f000 80a1 	beq.w	800abf4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aab2:	f7f9 fa62 	bl	8003f7a <HAL_GetTick>
 800aab6:	4602      	mov	r2, r0
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	1ad3      	subs	r3, r2, r3
 800aabc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d302      	bcc.n	800aac8 <UART_WaitOnFlagUntilTimeout+0x32>
 800aac2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d13e      	bne.n	800ab46 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aad0:	e853 3f00 	ldrex	r3, [r3]
 800aad4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aad8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aadc:	667b      	str	r3, [r7, #100]	; 0x64
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	461a      	mov	r2, r3
 800aae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aae6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aae8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aaec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aaee:	e841 2300 	strex	r3, r2, [r1]
 800aaf2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aaf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d1e6      	bne.n	800aac8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	3308      	adds	r3, #8
 800ab00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab04:	e853 3f00 	ldrex	r3, [r3]
 800ab08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab0c:	f023 0301 	bic.w	r3, r3, #1
 800ab10:	663b      	str	r3, [r7, #96]	; 0x60
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	3308      	adds	r3, #8
 800ab18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab1a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ab1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab22:	e841 2300 	strex	r3, r2, [r1]
 800ab26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ab28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d1e5      	bne.n	800aafa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2220      	movs	r2, #32
 800ab32:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2220      	movs	r2, #32
 800ab38:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ab42:	2303      	movs	r3, #3
 800ab44:	e067      	b.n	800ac16 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f003 0304 	and.w	r3, r3, #4
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d04f      	beq.n	800abf4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	69db      	ldr	r3, [r3, #28]
 800ab5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab62:	d147      	bne.n	800abf4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab6c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab76:	e853 3f00 	ldrex	r3, [r3]
 800ab7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ab82:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	461a      	mov	r2, r3
 800ab8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab8c:	637b      	str	r3, [r7, #52]	; 0x34
 800ab8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab94:	e841 2300 	strex	r3, r2, [r1]
 800ab98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1e6      	bne.n	800ab6e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	3308      	adds	r3, #8
 800aba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	e853 3f00 	ldrex	r3, [r3]
 800abae:	613b      	str	r3, [r7, #16]
   return(result);
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	f023 0301 	bic.w	r3, r3, #1
 800abb6:	66bb      	str	r3, [r7, #104]	; 0x68
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	3308      	adds	r3, #8
 800abbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800abc0:	623a      	str	r2, [r7, #32]
 800abc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc4:	69f9      	ldr	r1, [r7, #28]
 800abc6:	6a3a      	ldr	r2, [r7, #32]
 800abc8:	e841 2300 	strex	r3, r2, [r1]
 800abcc:	61bb      	str	r3, [r7, #24]
   return(result);
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d1e5      	bne.n	800aba0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2220      	movs	r2, #32
 800abd8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2220      	movs	r2, #32
 800abde:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2220      	movs	r2, #32
 800abe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2200      	movs	r2, #0
 800abec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800abf0:	2303      	movs	r3, #3
 800abf2:	e010      	b.n	800ac16 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	69da      	ldr	r2, [r3, #28]
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	4013      	ands	r3, r2
 800abfe:	68ba      	ldr	r2, [r7, #8]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	bf0c      	ite	eq
 800ac04:	2301      	moveq	r3, #1
 800ac06:	2300      	movne	r3, #0
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	79fb      	ldrb	r3, [r7, #7]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	f43f af4a 	beq.w	800aaa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3770      	adds	r7, #112	; 0x70
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
	...

0800ac20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b097      	sub	sp, #92	; 0x5c
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	88fa      	ldrh	r2, [r7, #6]
 800ac38:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	88fa      	ldrh	r2, [r7, #6]
 800ac40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2200      	movs	r2, #0
 800ac48:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	689b      	ldr	r3, [r3, #8]
 800ac4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac52:	d10e      	bne.n	800ac72 <UART_Start_Receive_IT+0x52>
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	691b      	ldr	r3, [r3, #16]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d105      	bne.n	800ac68 <UART_Start_Receive_IT+0x48>
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ac62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac66:	e02d      	b.n	800acc4 <UART_Start_Receive_IT+0xa4>
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	22ff      	movs	r2, #255	; 0xff
 800ac6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac70:	e028      	b.n	800acc4 <UART_Start_Receive_IT+0xa4>
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	689b      	ldr	r3, [r3, #8]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d10d      	bne.n	800ac96 <UART_Start_Receive_IT+0x76>
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	691b      	ldr	r3, [r3, #16]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d104      	bne.n	800ac8c <UART_Start_Receive_IT+0x6c>
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	22ff      	movs	r2, #255	; 0xff
 800ac86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac8a:	e01b      	b.n	800acc4 <UART_Start_Receive_IT+0xa4>
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	227f      	movs	r2, #127	; 0x7f
 800ac90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac94:	e016      	b.n	800acc4 <UART_Start_Receive_IT+0xa4>
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac9e:	d10d      	bne.n	800acbc <UART_Start_Receive_IT+0x9c>
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d104      	bne.n	800acb2 <UART_Start_Receive_IT+0x92>
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	227f      	movs	r2, #127	; 0x7f
 800acac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800acb0:	e008      	b.n	800acc4 <UART_Start_Receive_IT+0xa4>
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	223f      	movs	r2, #63	; 0x3f
 800acb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800acba:	e003      	b.n	800acc4 <UART_Start_Receive_IT+0xa4>
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2200      	movs	r2, #0
 800acc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2222      	movs	r2, #34	; 0x22
 800acd0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	3308      	adds	r3, #8
 800acd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acdc:	e853 3f00 	ldrex	r3, [r3]
 800ace0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ace2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace4:	f043 0301 	orr.w	r3, r3, #1
 800ace8:	657b      	str	r3, [r7, #84]	; 0x54
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	3308      	adds	r3, #8
 800acf0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800acf2:	64ba      	str	r2, [r7, #72]	; 0x48
 800acf4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800acf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800acfa:	e841 2300 	strex	r3, r2, [r1]
 800acfe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ad00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d1e5      	bne.n	800acd2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad0e:	d107      	bne.n	800ad20 <UART_Start_Receive_IT+0x100>
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d103      	bne.n	800ad20 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	4a24      	ldr	r2, [pc, #144]	; (800adac <UART_Start_Receive_IT+0x18c>)
 800ad1c:	665a      	str	r2, [r3, #100]	; 0x64
 800ad1e:	e002      	b.n	800ad26 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	4a23      	ldr	r2, [pc, #140]	; (800adb0 <UART_Start_Receive_IT+0x190>)
 800ad24:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	691b      	ldr	r3, [r3, #16]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d019      	beq.n	800ad6a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3e:	e853 3f00 	ldrex	r3, [r3]
 800ad42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad46:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ad4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	461a      	mov	r2, r3
 800ad52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad54:	637b      	str	r3, [r7, #52]	; 0x34
 800ad56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad5c:	e841 2300 	strex	r3, r2, [r1]
 800ad60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ad62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d1e6      	bne.n	800ad36 <UART_Start_Receive_IT+0x116>
 800ad68:	e018      	b.n	800ad9c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	e853 3f00 	ldrex	r3, [r3]
 800ad76:	613b      	str	r3, [r7, #16]
   return(result);
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	f043 0320 	orr.w	r3, r3, #32
 800ad7e:	653b      	str	r3, [r7, #80]	; 0x50
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	461a      	mov	r2, r3
 800ad86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad88:	623b      	str	r3, [r7, #32]
 800ad8a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad8c:	69f9      	ldr	r1, [r7, #28]
 800ad8e:	6a3a      	ldr	r2, [r7, #32]
 800ad90:	e841 2300 	strex	r3, r2, [r1]
 800ad94:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d1e6      	bne.n	800ad6a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	375c      	adds	r7, #92	; 0x5c
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	0800af15 	.word	0x0800af15
 800adb0:	0800adb5 	.word	0x0800adb5

0800adb4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b096      	sub	sp, #88	; 0x58
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800adc2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adca:	2b22      	cmp	r3, #34	; 0x22
 800adcc:	f040 8094 	bne.w	800aef8 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800add6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800adda:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800adde:	b2d9      	uxtb	r1, r3
 800ade0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ade4:	b2da      	uxtb	r2, r3
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adea:	400a      	ands	r2, r1
 800adec:	b2d2      	uxtb	r2, r2
 800adee:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adf4:	1c5a      	adds	r2, r3, #1
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	3b01      	subs	r3, #1
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d179      	bne.n	800af0c <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae20:	e853 3f00 	ldrex	r3, [r3]
 800ae24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae2c:	653b      	str	r3, [r7, #80]	; 0x50
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	461a      	mov	r2, r3
 800ae34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae36:	647b      	str	r3, [r7, #68]	; 0x44
 800ae38:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae3e:	e841 2300 	strex	r3, r2, [r1]
 800ae42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d1e6      	bne.n	800ae18 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	3308      	adds	r3, #8
 800ae50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae54:	e853 3f00 	ldrex	r3, [r3]
 800ae58:	623b      	str	r3, [r7, #32]
   return(result);
 800ae5a:	6a3b      	ldr	r3, [r7, #32]
 800ae5c:	f023 0301 	bic.w	r3, r3, #1
 800ae60:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	3308      	adds	r3, #8
 800ae68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae6a:	633a      	str	r2, [r7, #48]	; 0x30
 800ae6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae72:	e841 2300 	strex	r3, r2, [r1]
 800ae76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1e5      	bne.n	800ae4a <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2220      	movs	r2, #32
 800ae82:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d12e      	bne.n	800aef0 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	e853 3f00 	ldrex	r3, [r3]
 800aea4:	60fb      	str	r3, [r7, #12]
   return(result);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f023 0310 	bic.w	r3, r3, #16
 800aeac:	64bb      	str	r3, [r7, #72]	; 0x48
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aeb6:	61fb      	str	r3, [r7, #28]
 800aeb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeba:	69b9      	ldr	r1, [r7, #24]
 800aebc:	69fa      	ldr	r2, [r7, #28]
 800aebe:	e841 2300 	strex	r3, r2, [r1]
 800aec2:	617b      	str	r3, [r7, #20]
   return(result);
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d1e6      	bne.n	800ae98 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	69db      	ldr	r3, [r3, #28]
 800aed0:	f003 0310 	and.w	r3, r3, #16
 800aed4:	2b10      	cmp	r3, #16
 800aed6:	d103      	bne.n	800aee0 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2210      	movs	r2, #16
 800aede:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800aee6:	4619      	mov	r1, r3
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f7ff fa81 	bl	800a3f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aeee:	e00d      	b.n	800af0c <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f7ff fa73 	bl	800a3dc <HAL_UART_RxCpltCallback>
}
 800aef6:	e009      	b.n	800af0c <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	8b1b      	ldrh	r3, [r3, #24]
 800aefe:	b29a      	uxth	r2, r3
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f042 0208 	orr.w	r2, r2, #8
 800af08:	b292      	uxth	r2, r2
 800af0a:	831a      	strh	r2, [r3, #24]
}
 800af0c:	bf00      	nop
 800af0e:	3758      	adds	r7, #88	; 0x58
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b096      	sub	sp, #88	; 0x58
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800af22:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af2a:	2b22      	cmp	r3, #34	; 0x22
 800af2c:	f040 8094 	bne.w	800b058 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800af36:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af3e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800af40:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800af44:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800af48:	4013      	ands	r3, r2
 800af4a:	b29a      	uxth	r2, r3
 800af4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af4e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af54:	1c9a      	adds	r2, r3, #2
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800af60:	b29b      	uxth	r3, r3
 800af62:	3b01      	subs	r3, #1
 800af64:	b29a      	uxth	r2, r3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800af72:	b29b      	uxth	r3, r3
 800af74:	2b00      	cmp	r3, #0
 800af76:	d179      	bne.n	800b06c <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af80:	e853 3f00 	ldrex	r3, [r3]
 800af84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	461a      	mov	r2, r3
 800af94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af96:	643b      	str	r3, [r7, #64]	; 0x40
 800af98:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af9e:	e841 2300 	strex	r3, r2, [r1]
 800afa2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800afa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d1e6      	bne.n	800af78 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	3308      	adds	r3, #8
 800afb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb2:	6a3b      	ldr	r3, [r7, #32]
 800afb4:	e853 3f00 	ldrex	r3, [r3]
 800afb8:	61fb      	str	r3, [r7, #28]
   return(result);
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	f023 0301 	bic.w	r3, r3, #1
 800afc0:	64bb      	str	r3, [r7, #72]	; 0x48
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	3308      	adds	r3, #8
 800afc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800afcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afd2:	e841 2300 	strex	r3, r2, [r1]
 800afd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800afd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d1e5      	bne.n	800afaa <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2220      	movs	r2, #32
 800afe2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d12e      	bne.n	800b050 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	e853 3f00 	ldrex	r3, [r3]
 800b004:	60bb      	str	r3, [r7, #8]
   return(result);
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	f023 0310 	bic.w	r3, r3, #16
 800b00c:	647b      	str	r3, [r7, #68]	; 0x44
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	461a      	mov	r2, r3
 800b014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b016:	61bb      	str	r3, [r7, #24]
 800b018:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b01a:	6979      	ldr	r1, [r7, #20]
 800b01c:	69ba      	ldr	r2, [r7, #24]
 800b01e:	e841 2300 	strex	r3, r2, [r1]
 800b022:	613b      	str	r3, [r7, #16]
   return(result);
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d1e6      	bne.n	800aff8 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	69db      	ldr	r3, [r3, #28]
 800b030:	f003 0310 	and.w	r3, r3, #16
 800b034:	2b10      	cmp	r3, #16
 800b036:	d103      	bne.n	800b040 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2210      	movs	r2, #16
 800b03e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b046:	4619      	mov	r1, r3
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f7ff f9d1 	bl	800a3f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b04e:	e00d      	b.n	800b06c <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f7ff f9c3 	bl	800a3dc <HAL_UART_RxCpltCallback>
}
 800b056:	e009      	b.n	800b06c <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	8b1b      	ldrh	r3, [r3, #24]
 800b05e:	b29a      	uxth	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f042 0208 	orr.w	r2, r2, #8
 800b068:	b292      	uxth	r2, r2
 800b06a:	831a      	strh	r2, [r3, #24]
}
 800b06c:	bf00      	nop
 800b06e:	3758      	adds	r7, #88	; 0x58
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800b074:	b480      	push	{r7}
 800b076:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800b078:	4b05      	ldr	r3, [pc, #20]	; (800b090 <UTIL_LPM_Init+0x1c>)
 800b07a:	2200      	movs	r2, #0
 800b07c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800b07e:	4b05      	ldr	r3, [pc, #20]	; (800b094 <UTIL_LPM_Init+0x20>)
 800b080:	2200      	movs	r2, #0
 800b082:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800b084:	bf00      	nop
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	20000660 	.word	0x20000660
 800b094:	20000664 	.word	0x20000664

0800b098 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b098:	b480      	push	{r7}
 800b09a:	b087      	sub	sp, #28
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0a4:	f3ef 8310 	mrs	r3, PRIMASK
 800b0a8:	613b      	str	r3, [r7, #16]
  return(result);
 800b0aa:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b0ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b0ae:	b672      	cpsid	i
}
 800b0b0:	bf00      	nop
  
  switch( state )
 800b0b2:	78fb      	ldrb	r3, [r7, #3]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d008      	beq.n	800b0ca <UTIL_LPM_SetStopMode+0x32>
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d10e      	bne.n	800b0da <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800b0bc:	4b0d      	ldr	r3, [pc, #52]	; (800b0f4 <UTIL_LPM_SetStopMode+0x5c>)
 800b0be:	681a      	ldr	r2, [r3, #0]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	4a0b      	ldr	r2, [pc, #44]	; (800b0f4 <UTIL_LPM_SetStopMode+0x5c>)
 800b0c6:	6013      	str	r3, [r2, #0]
      break;
 800b0c8:	e008      	b.n	800b0dc <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	43da      	mvns	r2, r3
 800b0ce:	4b09      	ldr	r3, [pc, #36]	; (800b0f4 <UTIL_LPM_SetStopMode+0x5c>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4013      	ands	r3, r2
 800b0d4:	4a07      	ldr	r2, [pc, #28]	; (800b0f4 <UTIL_LPM_SetStopMode+0x5c>)
 800b0d6:	6013      	str	r3, [r2, #0]
      break;
 800b0d8:	e000      	b.n	800b0dc <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800b0da:	bf00      	nop
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f383 8810 	msr	PRIMASK, r3
}
 800b0e6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b0e8:	bf00      	nop
 800b0ea:	371c      	adds	r7, #28
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr
 800b0f4:	20000660 	.word	0x20000660

0800b0f8 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b087      	sub	sp, #28
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	460b      	mov	r3, r1
 800b102:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b104:	f3ef 8310 	mrs	r3, PRIMASK
 800b108:	613b      	str	r3, [r7, #16]
  return(result);
 800b10a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b10c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b10e:	b672      	cpsid	i
}
 800b110:	bf00      	nop
  
  switch(state)
 800b112:	78fb      	ldrb	r3, [r7, #3]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d008      	beq.n	800b12a <UTIL_LPM_SetOffMode+0x32>
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d10e      	bne.n	800b13a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800b11c:	4b0d      	ldr	r3, [pc, #52]	; (800b154 <UTIL_LPM_SetOffMode+0x5c>)
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	4313      	orrs	r3, r2
 800b124:	4a0b      	ldr	r2, [pc, #44]	; (800b154 <UTIL_LPM_SetOffMode+0x5c>)
 800b126:	6013      	str	r3, [r2, #0]
      break;
 800b128:	e008      	b.n	800b13c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	43da      	mvns	r2, r3
 800b12e:	4b09      	ldr	r3, [pc, #36]	; (800b154 <UTIL_LPM_SetOffMode+0x5c>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4013      	ands	r3, r2
 800b134:	4a07      	ldr	r2, [pc, #28]	; (800b154 <UTIL_LPM_SetOffMode+0x5c>)
 800b136:	6013      	str	r3, [r2, #0]
      break;
 800b138:	e000      	b.n	800b13c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800b13a:	bf00      	nop
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f383 8810 	msr	PRIMASK, r3
}
 800b146:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b148:	bf00      	nop
 800b14a:	371c      	adds	r7, #28
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr
 800b154:	20000664 	.word	0x20000664

0800b158 <UTIL_LPM_GetMode>:

UTIL_LPM_Mode_t UTIL_LPM_GetMode( void )
{
 800b158:	b480      	push	{r7}
 800b15a:	b085      	sub	sp, #20
 800b15c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b15e:	f3ef 8310 	mrs	r3, PRIMASK
 800b162:	607b      	str	r3, [r7, #4]
  return(result);
 800b164:	687b      	ldr	r3, [r7, #4]
  UTIL_LPM_Mode_t mode_selected;

  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b166:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800b168:	b672      	cpsid	i
}
 800b16a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800b16c:	4b0e      	ldr	r3, [pc, #56]	; (800b1a8 <UTIL_LPM_GetMode+0x50>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d002      	beq.n	800b17a <UTIL_LPM_GetMode+0x22>
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 800b174:	2300      	movs	r3, #0
 800b176:	73fb      	strb	r3, [r7, #15]
 800b178:	e008      	b.n	800b18c <UTIL_LPM_GetMode+0x34>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800b17a:	4b0c      	ldr	r3, [pc, #48]	; (800b1ac <UTIL_LPM_GetMode+0x54>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d002      	beq.n	800b188 <UTIL_LPM_GetMode+0x30>
    {
      /**
       * At least one user disallows Off Mode
       */
      mode_selected = UTIL_LPM_STOPMODE;
 800b182:	2301      	movs	r3, #1
 800b184:	73fb      	strb	r3, [r7, #15]
 800b186:	e001      	b.n	800b18c <UTIL_LPM_GetMode+0x34>
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 800b188:	2302      	movs	r3, #2
 800b18a:	73fb      	strb	r3, [r7, #15]
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	f383 8810 	msr	PRIMASK, r3
}
 800b196:	bf00      	nop
    }
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
 800b198:	7bfb      	ldrb	r3, [r7, #15]
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3714      	adds	r7, #20
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr
 800b1a6:	bf00      	nop
 800b1a8:	20000660 	.word	0x20000660
 800b1ac:	20000664 	.word	0x20000664

0800b1b0 <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1b6:	f3ef 8310 	mrs	r3, PRIMASK
 800b1ba:	60bb      	str	r3, [r7, #8]
  return(result);
 800b1bc:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800b1be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800b1c0:	b672      	cpsid	i
}
 800b1c2:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800b1c4:	4b12      	ldr	r3, [pc, #72]	; (800b210 <UTIL_LPM_EnterLowPower+0x60>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d006      	beq.n	800b1da <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800b1cc:	4b11      	ldr	r3, [pc, #68]	; (800b214 <UTIL_LPM_EnterLowPower+0x64>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800b1d2:	4b10      	ldr	r3, [pc, #64]	; (800b214 <UTIL_LPM_EnterLowPower+0x64>)
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	4798      	blx	r3
 800b1d8:	e010      	b.n	800b1fc <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800b1da:	4b0f      	ldr	r3, [pc, #60]	; (800b218 <UTIL_LPM_EnterLowPower+0x68>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d006      	beq.n	800b1f0 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800b1e2:	4b0c      	ldr	r3, [pc, #48]	; (800b214 <UTIL_LPM_EnterLowPower+0x64>)
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800b1e8:	4b0a      	ldr	r3, [pc, #40]	; (800b214 <UTIL_LPM_EnterLowPower+0x64>)
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	4798      	blx	r3
 800b1ee:	e005      	b.n	800b1fc <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800b1f0:	4b08      	ldr	r3, [pc, #32]	; (800b214 <UTIL_LPM_EnterLowPower+0x64>)
 800b1f2:	691b      	ldr	r3, [r3, #16]
 800b1f4:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800b1f6:	4b07      	ldr	r3, [pc, #28]	; (800b214 <UTIL_LPM_EnterLowPower+0x64>)
 800b1f8:	695b      	ldr	r3, [r3, #20]
 800b1fa:	4798      	blx	r3
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f383 8810 	msr	PRIMASK, r3
}
 800b206:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800b208:	bf00      	nop
 800b20a:	3710      	adds	r7, #16
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	20000660 	.word	0x20000660
 800b214:	0801160c 	.word	0x0801160c
 800b218:	20000664 	.word	0x20000664

0800b21c <tiny_vfscanf>:
 * vfscanf
 */

static inline int
VFSCANF(const char *str, const char *fmt0, va_list ap)
{
 800b21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b220:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b224:	af00      	add	r7, sp, #0
 800b226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b22a:	6018      	str	r0, [r3, #0]
 800b22c:	f107 0320 	add.w	r3, r7, #32
 800b230:	6019      	str	r1, [r3, #0]
 800b232:	f107 031c 	add.w	r3, r7, #28
 800b236:	601a      	str	r2, [r3, #0]
  u_char *fmt = (u_char *)fmt0;
 800b238:	f107 0320 	add.w	r3, r7, #32
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
#else  
  static short basefix[17] =
    { 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
#endif
    
   fp_p = str;
 800b242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
  fp_r = strlen(str);
 800b24c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b250:	6818      	ldr	r0, [r3, #0]
 800b252:	f7f4 ffc5 	bl	80001e0 <strlen>
 800b256:	4603      	mov	r3, r0
 800b258:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

  nassigned = 0;
 800b25c:	2300      	movs	r3, #0
 800b25e:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
  nread = 0;
 800b262:	2300      	movs	r3, #0
 800b264:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
  base = 0;    /* XXX just to keep gcc happy */
 800b268:	2300      	movs	r3, #0
 800b26a:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
  for (;;) {
    c = *fmt++;
 800b26e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800b272:	1c5a      	adds	r2, r3, #1
 800b274:	f8c7 225c 	str.w	r2, [r7, #604]	; 0x25c
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    if (c == 0)
 800b27e:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800b282:	2b00      	cmp	r3, #0
 800b284:	d102      	bne.n	800b28c <tiny_vfscanf+0x70>
      return (nassigned);
 800b286:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b28a:	e343      	b.n	800b914 <tiny_vfscanf+0x6f8>
          isspace(*fp_p))
        nread++, fp_r--, fp_p++;
      continue;
    }
#endif
    if (c != '%')
 800b28c:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800b290:	2b25      	cmp	r3, #37	; 0x25
 800b292:	f040 809f 	bne.w	800b3d4 <tiny_vfscanf+0x1b8>
      goto literal;
    width = 0;
 800b296:	2300      	movs	r3, #0
 800b298:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    flags = 0;
 800b29c:	2300      	movs	r3, #0
 800b29e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    /*
     * switch on the format.  continue if done;
     * break once format type is derived.
     */
again:    c = *fmt++;
 800b2a2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800b2a6:	1c5a      	adds	r2, r3, #1
 800b2a8:	f8c7 225c 	str.w	r2, [r7, #604]	; 0x25c
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    switch (c) {
 800b2b2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800b2b6:	2b78      	cmp	r3, #120	; 0x78
 800b2b8:	f300 8102 	bgt.w	800b4c0 <tiny_vfscanf+0x2a4>
 800b2bc:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800b2c0:	2b44      	cmp	r3, #68	; 0x44
 800b2c2:	da13      	bge.n	800b2ec <tiny_vfscanf+0xd0>
 800b2c4:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800b2c8:	2b39      	cmp	r3, #57	; 0x39
 800b2ca:	f300 80f9 	bgt.w	800b4c0 <tiny_vfscanf+0x2a4>
 800b2ce:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800b2d2:	2b30      	cmp	r3, #48	; 0x30
 800b2d4:	f280 80bc 	bge.w	800b450 <tiny_vfscanf+0x234>
 800b2d8:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f000 80ec 	beq.w	800b4ba <tiny_vfscanf+0x29e>
 800b2e2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800b2e6:	2b25      	cmp	r3, #37	; 0x25
 800b2e8:	d075      	beq.n	800b3d6 <tiny_vfscanf+0x1ba>
      if (isupper(c))
        flags |= LONG;
      c = CT_INT;
      base = 10;
#endif
      break;
 800b2ea:	e0e9      	b.n	800b4c0 <tiny_vfscanf+0x2a4>
 800b2ec:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800b2f0:	3b44      	subs	r3, #68	; 0x44
 800b2f2:	2b34      	cmp	r3, #52	; 0x34
 800b2f4:	f200 80e4 	bhi.w	800b4c0 <tiny_vfscanf+0x2a4>
 800b2f8:	a201      	add	r2, pc, #4	; (adr r2, 800b300 <tiny_vfscanf+0xe4>)
 800b2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2fe:	bf00      	nop
 800b300:	0800b46d 	.word	0x0800b46d
 800b304:	0800b4c1 	.word	0x0800b4c1
 800b308:	0800b4c1 	.word	0x0800b4c1
 800b30c:	0800b4c1 	.word	0x0800b4c1
 800b310:	0800b4c1 	.word	0x0800b4c1
 800b314:	0800b4c1 	.word	0x0800b4c1
 800b318:	0800b4c1 	.word	0x0800b4c1
 800b31c:	0800b4c1 	.word	0x0800b4c1
 800b320:	0800b4c1 	.word	0x0800b4c1
 800b324:	0800b4c1 	.word	0x0800b4c1
 800b328:	0800b4c1 	.word	0x0800b4c1
 800b32c:	0800b4c1 	.word	0x0800b4c1
 800b330:	0800b4c1 	.word	0x0800b4c1
 800b334:	0800b4c1 	.word	0x0800b4c1
 800b338:	0800b4c1 	.word	0x0800b4c1
 800b33c:	0800b4c1 	.word	0x0800b4c1
 800b340:	0800b4c1 	.word	0x0800b4c1
 800b344:	0800b4c1 	.word	0x0800b4c1
 800b348:	0800b4c1 	.word	0x0800b4c1
 800b34c:	0800b4c1 	.word	0x0800b4c1
 800b350:	0800b4a1 	.word	0x0800b4a1
 800b354:	0800b4c1 	.word	0x0800b4c1
 800b358:	0800b4c1 	.word	0x0800b4c1
 800b35c:	0800b4c1 	.word	0x0800b4c1
 800b360:	0800b4c1 	.word	0x0800b4c1
 800b364:	0800b4c1 	.word	0x0800b4c1
 800b368:	0800b4c1 	.word	0x0800b4c1
 800b36c:	0800b4c1 	.word	0x0800b4c1
 800b370:	0800b4c1 	.word	0x0800b4c1
 800b374:	0800b4c1 	.word	0x0800b4c1
 800b378:	0800b4c1 	.word	0x0800b4c1
 800b37c:	0800b4c1 	.word	0x0800b4c1
 800b380:	0800b479 	.word	0x0800b479
 800b384:	0800b4c1 	.word	0x0800b4c1
 800b388:	0800b4c1 	.word	0x0800b4c1
 800b38c:	0800b4c1 	.word	0x0800b4c1
 800b390:	0800b413 	.word	0x0800b413
 800b394:	0800b4c1 	.word	0x0800b4c1
 800b398:	0800b4c1 	.word	0x0800b4c1
 800b39c:	0800b4c1 	.word	0x0800b4c1
 800b3a0:	0800b443 	.word	0x0800b443
 800b3a4:	0800b4c1 	.word	0x0800b4c1
 800b3a8:	0800b4c1 	.word	0x0800b4c1
 800b3ac:	0800b4c1 	.word	0x0800b4c1
 800b3b0:	0800b4c1 	.word	0x0800b4c1
 800b3b4:	0800b4c1 	.word	0x0800b4c1
 800b3b8:	0800b4c1 	.word	0x0800b4c1
 800b3bc:	0800b4c1 	.word	0x0800b4c1
 800b3c0:	0800b4c1 	.word	0x0800b4c1
 800b3c4:	0800b487 	.word	0x0800b487
 800b3c8:	0800b4c1 	.word	0x0800b4c1
 800b3cc:	0800b4c1 	.word	0x0800b4c1
 800b3d0:	0800b4a1 	.word	0x0800b4a1
      goto literal;
 800b3d4:	bf00      	nop
      if (fp_r <= 0 && __srefill(fp))
 800b3d6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	f340 8288 	ble.w	800b8f0 <tiny_vfscanf+0x6d4>
      if (*fp_p != c)
 800b3e0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	f040 828c 	bne.w	800b90a <tiny_vfscanf+0x6ee>
      fp_r--, fp_p++;
 800b3f2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800b3f6:	3b01      	subs	r3, #1
 800b3f8:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 800b3fc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800b400:	3301      	adds	r3, #1
 800b402:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
      nread++;
 800b406:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800b40a:	3301      	adds	r3, #1
 800b40c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
      continue;
 800b410:	e26d      	b.n	800b8ee <tiny_vfscanf+0x6d2>
      if (*fmt == 'h') {
 800b412:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	2b68      	cmp	r3, #104	; 0x68
 800b41a:	d10b      	bne.n	800b434 <tiny_vfscanf+0x218>
        fmt++;
 800b41c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800b420:	3301      	adds	r3, #1
 800b422:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
        flags |= SHORTSHORT;
 800b426:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800b42a:	f043 0308 	orr.w	r3, r3, #8
 800b42e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800b432:	e736      	b.n	800b2a2 <tiny_vfscanf+0x86>
        flags |= SHORT;
 800b434:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800b438:	f043 0304 	orr.w	r3, r3, #4
 800b43c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
      goto again;
 800b440:	e72f      	b.n	800b2a2 <tiny_vfscanf+0x86>
      flags |= LONG;
 800b442:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800b446:	f043 0301 	orr.w	r3, r3, #1
 800b44a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
      goto again;
 800b44e:	e728      	b.n	800b2a2 <tiny_vfscanf+0x86>
      width = width * 10 + c - '0';
 800b450:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800b454:	4613      	mov	r3, r2
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	4413      	add	r3, r2
 800b45a:	005b      	lsls	r3, r3, #1
 800b45c:	461a      	mov	r2, r3
 800b45e:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800b462:	4413      	add	r3, r2
 800b464:	3b30      	subs	r3, #48	; 0x30
 800b466:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
      goto again;
 800b46a:	e71a      	b.n	800b2a2 <tiny_vfscanf+0x86>
      flags |= LONG;
 800b46c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800b470:	f043 0301 	orr.w	r3, r3, #1
 800b474:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
      c = CT_INT;
 800b478:	2303      	movs	r3, #3
 800b47a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
      base = 10;
 800b47e:	230a      	movs	r3, #10
 800b480:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
      break;
 800b484:	e01d      	b.n	800b4c2 <tiny_vfscanf+0x2a6>
      c = CT_INT;
 800b486:	2303      	movs	r3, #3
 800b488:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
      flags |= UNSIGNED;
 800b48c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800b490:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b494:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
      base = 10;
 800b498:	230a      	movs	r3, #10
 800b49a:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
      break;
 800b49e:	e010      	b.n	800b4c2 <tiny_vfscanf+0x2a6>
      c = CT_INT;
 800b4a0:	2303      	movs	r3, #3
 800b4a2:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
      flags |= UNSIGNED;
 800b4a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800b4aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b4ae:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
      base = 16;
 800b4b2:	2310      	movs	r3, #16
 800b4b4:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
      break;
 800b4b8:	e003      	b.n	800b4c2 <tiny_vfscanf+0x2a6>
      return (EOF);
 800b4ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b4be:	e229      	b.n	800b914 <tiny_vfscanf+0x6f8>
      break;
 800b4c0:	bf00      	nop
    }

    /*
     * We have a conversion that requires input.
     */
    if (fp_r <= 0 && __srefill(fp))
 800b4c2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	f340 8214 	ble.w	800b8f4 <tiny_vfscanf+0x6d8>
#endif
    
    /*
     * Do the conversion.
     */
    switch (c) {
 800b4cc:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800b4d0:	2b03      	cmp	r3, #3
 800b4d2:	f47f aecc 	bne.w	800b26e <tiny_vfscanf+0x52>
#ifdef hardway
      if (width == 0 || width > sizeof(buf) - 1)
        width = sizeof(buf) - 1;
#else
      /* size_t is unsigned, hence this optimisation */
      if (--width > sizeof(buf) - 2)
 800b4d6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800b4e0:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800b4e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4e8:	d303      	bcc.n	800b4f2 <tiny_vfscanf+0x2d6>
        width = sizeof(buf) - 2;
 800b4ea:	f240 13ff 	movw	r3, #511	; 0x1ff
 800b4ee:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
      width++;
 800b4f2:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
#endif

#ifdef TINY_NO_OX
      flags |= SIGNOK | NDIGITS;
 800b4fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800b500:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 800b504:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
#else
      flags |= SIGNOK | NDIGITS | NZDIGITS;
#endif
      
      sign_minus = 0;
 800b508:	2300      	movs	r3, #0
 800b50a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
      value = 0;
 800b50e:	f04f 0200 	mov.w	r2, #0
 800b512:	f04f 0300 	mov.w	r3, #0
 800b516:	e9c7 238c 	strd	r2, r3, [r7, #560]	; 0x230
      for (p = buf; width; width--) {
 800b51a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b51e:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800b522:	e154      	b.n	800b7ce <tiny_vfscanf+0x5b2>
        c = *fp_p;
 800b524:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 800b52e:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800b532:	3b2b      	subs	r3, #43	; 0x2b
 800b534:	2b3b      	cmp	r3, #59	; 0x3b
 800b536:	f200 8150 	bhi.w	800b7da <tiny_vfscanf+0x5be>
 800b53a:	a201      	add	r2, pc, #4	; (adr r2, 800b540 <tiny_vfscanf+0x324>)
 800b53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b540:	0800b765 	.word	0x0800b765
 800b544:	0800b7db 	.word	0x0800b7db
 800b548:	0800b753 	.word	0x0800b753
 800b54c:	0800b7db 	.word	0x0800b7db
 800b550:	0800b7db 	.word	0x0800b7db
 800b554:	0800b631 	.word	0x0800b631
 800b558:	0800b631 	.word	0x0800b631
 800b55c:	0800b631 	.word	0x0800b631
 800b560:	0800b631 	.word	0x0800b631
 800b564:	0800b631 	.word	0x0800b631
 800b568:	0800b631 	.word	0x0800b631
 800b56c:	0800b631 	.word	0x0800b631
 800b570:	0800b631 	.word	0x0800b631
 800b574:	0800b631 	.word	0x0800b631
 800b578:	0800b631 	.word	0x0800b631
 800b57c:	0800b7db 	.word	0x0800b7db
 800b580:	0800b7db 	.word	0x0800b7db
 800b584:	0800b7db 	.word	0x0800b7db
 800b588:	0800b7db 	.word	0x0800b7db
 800b58c:	0800b7db 	.word	0x0800b7db
 800b590:	0800b7db 	.word	0x0800b7db
 800b594:	0800b7db 	.word	0x0800b7db
 800b598:	0800b68d 	.word	0x0800b68d
 800b59c:	0800b68d 	.word	0x0800b68d
 800b5a0:	0800b68d 	.word	0x0800b68d
 800b5a4:	0800b68d 	.word	0x0800b68d
 800b5a8:	0800b68d 	.word	0x0800b68d
 800b5ac:	0800b68d 	.word	0x0800b68d
 800b5b0:	0800b7db 	.word	0x0800b7db
 800b5b4:	0800b7db 	.word	0x0800b7db
 800b5b8:	0800b7db 	.word	0x0800b7db
 800b5bc:	0800b7db 	.word	0x0800b7db
 800b5c0:	0800b7db 	.word	0x0800b7db
 800b5c4:	0800b7db 	.word	0x0800b7db
 800b5c8:	0800b7db 	.word	0x0800b7db
 800b5cc:	0800b7db 	.word	0x0800b7db
 800b5d0:	0800b7db 	.word	0x0800b7db
 800b5d4:	0800b7db 	.word	0x0800b7db
 800b5d8:	0800b7db 	.word	0x0800b7db
 800b5dc:	0800b7db 	.word	0x0800b7db
 800b5e0:	0800b7db 	.word	0x0800b7db
 800b5e4:	0800b7db 	.word	0x0800b7db
 800b5e8:	0800b7db 	.word	0x0800b7db
 800b5ec:	0800b7db 	.word	0x0800b7db
 800b5f0:	0800b7db 	.word	0x0800b7db
 800b5f4:	0800b7db 	.word	0x0800b7db
 800b5f8:	0800b7db 	.word	0x0800b7db
 800b5fc:	0800b7db 	.word	0x0800b7db
 800b600:	0800b7db 	.word	0x0800b7db
 800b604:	0800b7db 	.word	0x0800b7db
 800b608:	0800b7db 	.word	0x0800b7db
 800b60c:	0800b7db 	.word	0x0800b7db
 800b610:	0800b7db 	.word	0x0800b7db
 800b614:	0800b7db 	.word	0x0800b7db
 800b618:	0800b6f1 	.word	0x0800b6f1
 800b61c:	0800b6f1 	.word	0x0800b6f1
 800b620:	0800b6f1 	.word	0x0800b6f1
 800b624:	0800b6f1 	.word	0x0800b6f1
 800b628:	0800b6f1 	.word	0x0800b6f1
 800b62c:	0800b6f1 	.word	0x0800b6f1
        /* we only support base 10 and 16 */
        case '1': case '2': case '3':
        case '4': case '5': case '6': case '7':
        case '8': case '9':
#ifdef TINY_NO_OX 
          flags &= ~(SIGNOK | NDIGITS);
 800b630:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800b634:	f423 43a0 	bic.w	r3, r3, #20480	; 0x5000
 800b638:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
#else
          flags &= ~(SIGNOK | PFXOK | NDIGITS);
#endif
          value = value * base + c - '0';
 800b63c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800b640:	461a      	mov	r2, r3
 800b642:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800b646:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 800b64a:	fb03 f001 	mul.w	r0, r3, r1
 800b64e:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 800b652:	fb02 f101 	mul.w	r1, r2, r1
 800b656:	1844      	adds	r4, r0, r1
 800b658:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 800b65c:	fba1 0102 	umull	r0, r1, r1, r2
 800b660:	1863      	adds	r3, r4, r1
 800b662:	4619      	mov	r1, r3
 800b664:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800b668:	461a      	mov	r2, r3
 800b66a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800b66e:	eb10 0802 	adds.w	r8, r0, r2
 800b672:	eb41 0903 	adc.w	r9, r1, r3
 800b676:	f1b8 0330 	subs.w	r3, r8, #48	; 0x30
 800b67a:	613b      	str	r3, [r7, #16]
 800b67c:	f149 33ff 	adc.w	r3, r9, #4294967295
 800b680:	617b      	str	r3, [r7, #20]
 800b682:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b686:	e9c7 348c 	strd	r3, r4, [r7, #560]	; 0x230
          goto ok;
 800b68a:	e084      	b.n	800b796 <tiny_vfscanf+0x57a>
          
        /* letters ok iff hex */
        case 'A': case 'B': case 'C':
        case 'D': case 'E': case 'F':
          /* no need to fix base here */
          if (base <= 10)
 800b68c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800b690:	2b0a      	cmp	r3, #10
 800b692:	dd7a      	ble.n	800b78a <tiny_vfscanf+0x56e>
            break;  /* not legal here */
#ifdef TINY_NO_OX 
          flags &= ~(SIGNOK | NDIGITS);
 800b694:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800b698:	f423 43a0 	bic.w	r3, r3, #20480	; 0x5000
 800b69c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
#else
          flags &= ~(SIGNOK | PFXOK | NDIGITS);
#endif
          value = value * base + c - 'A' + 10;
 800b6a0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800b6a4:	461a      	mov	r2, r3
 800b6a6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800b6aa:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 800b6ae:	fb03 f001 	mul.w	r0, r3, r1
 800b6b2:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 800b6b6:	fb02 f101 	mul.w	r1, r2, r1
 800b6ba:	1844      	adds	r4, r0, r1
 800b6bc:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 800b6c0:	fba1 0102 	umull	r0, r1, r1, r2
 800b6c4:	1863      	adds	r3, r4, r1
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800b6d2:	eb10 0a02 	adds.w	sl, r0, r2
 800b6d6:	eb41 0b03 	adc.w	fp, r1, r3
 800b6da:	f1ba 0337 	subs.w	r3, sl, #55	; 0x37
 800b6de:	60bb      	str	r3, [r7, #8]
 800b6e0:	f14b 33ff 	adc.w	r3, fp, #4294967295
 800b6e4:	60fb      	str	r3, [r7, #12]
 800b6e6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800b6ea:	e9c7 348c 	strd	r3, r4, [r7, #560]	; 0x230
          goto ok;          
 800b6ee:	e052      	b.n	800b796 <tiny_vfscanf+0x57a>
        
        case 'a': case 'b': case 'c':
        case 'd': case 'e': case 'f':
          /* no need to fix base here */
          if (base <= 10)
 800b6f0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800b6f4:	2b0a      	cmp	r3, #10
 800b6f6:	dd4a      	ble.n	800b78e <tiny_vfscanf+0x572>
            break;  /* not legal here */
#ifdef TINY_NO_OX 
          flags &= ~(SIGNOK | NDIGITS);
 800b6f8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800b6fc:	f423 43a0 	bic.w	r3, r3, #20480	; 0x5000
 800b700:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
#else
          flags &= ~(SIGNOK | PFXOK | NDIGITS);
#endif
          value = value * base + c - 'a' + 10;
 800b704:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800b708:	461a      	mov	r2, r3
 800b70a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800b70e:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 800b712:	fb03 f001 	mul.w	r0, r3, r1
 800b716:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 800b71a:	fb02 f101 	mul.w	r1, r2, r1
 800b71e:	1844      	adds	r4, r0, r1
 800b720:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 800b724:	fba1 0102 	umull	r0, r1, r1, r2
 800b728:	1863      	adds	r3, r4, r1
 800b72a:	4619      	mov	r1, r3
 800b72c:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800b730:	461a      	mov	r2, r3
 800b732:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800b736:	1885      	adds	r5, r0, r2
 800b738:	eb41 0603 	adc.w	r6, r1, r3
 800b73c:	f1b5 0357 	subs.w	r3, r5, #87	; 0x57
 800b740:	603b      	str	r3, [r7, #0]
 800b742:	f146 33ff 	adc.w	r3, r6, #4294967295
 800b746:	607b      	str	r3, [r7, #4]
 800b748:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b74c:	e9c7 348c 	strd	r3, r4, [r7, #560]	; 0x230
          goto ok;
 800b750:	e021      	b.n	800b796 <tiny_vfscanf+0x57a>

        /* sign ok only as first character */
        case '-':
          if (!(flags & HAVESIGN)) {
 800b752:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800b756:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d102      	bne.n	800b764 <tiny_vfscanf+0x548>
            sign_minus = 1;
 800b75e:	2301      	movs	r3, #1
 800b760:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
          }
          /* FALLTHROUGH */
        case '+':
          if (flags & SIGNOK) {
 800b764:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800b768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d010      	beq.n	800b792 <tiny_vfscanf+0x576>
            flags &= ~SIGNOK;
 800b770:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800b774:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b778:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
            flags |= HAVESIGN;
 800b77c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800b780:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b784:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
            goto ok;
 800b788:	e005      	b.n	800b796 <tiny_vfscanf+0x57a>
            break;  /* not legal here */
 800b78a:	bf00      	nop
 800b78c:	e025      	b.n	800b7da <tiny_vfscanf+0x5be>
            break;  /* not legal here */
 800b78e:	bf00      	nop
 800b790:	e023      	b.n	800b7da <tiny_vfscanf+0x5be>
          }
          break;
 800b792:	bf00      	nop

        /*
         * If we got here, c is not a legal character
         * for a number.  Stop accumulating digits.
         */
        break;
 800b794:	e021      	b.n	800b7da <tiny_vfscanf+0x5be>
    ok:
        /*
         * c is legal: store it and look at the next.
         */
        *p++ = c;
 800b796:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800b79a:	1c53      	adds	r3, r2, #1
 800b79c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800b7a0:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	7013      	strb	r3, [r2, #0]
        if (--fp_r > 0)
 800b7a8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800b7ac:	3b01      	subs	r3, #1
 800b7ae:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 800b7b2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	dd11      	ble.n	800b7de <tiny_vfscanf+0x5c2>
          fp_p++;
 800b7ba:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800b7be:	3301      	adds	r3, #1
 800b7c0:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
      for (p = buf; width; width--) {
 800b7c4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800b7c8:	3b01      	subs	r3, #1
 800b7ca:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800b7ce:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f47f aea6 	bne.w	800b524 <tiny_vfscanf+0x308>
 800b7d8:	e002      	b.n	800b7e0 <tiny_vfscanf+0x5c4>
        break;
 800b7da:	bf00      	nop
 800b7dc:	e000      	b.n	800b7e0 <tiny_vfscanf+0x5c4>
        else if (__srefill(fp))
          break;    /* EOF */
 800b7de:	bf00      	nop
       * If we had only a sign, it is no good; push
       * back the sign.  If the number ends in `x',
       * it was [sign] '0' 'x', so push back the x
       * and treat it as [sign] '0'.
       */
      if (flags & NDIGITS) {
 800b7e0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800b7e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d020      	beq.n	800b82e <tiny_vfscanf+0x612>
        if (p > buf)
 800b7ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b7f0:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	f240 808a 	bls.w	800b90e <tiny_vfscanf+0x6f2>
        {
          --c;
 800b7fa:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800b7fe:	3b01      	subs	r3, #1
 800b800:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
          --p;
 800b804:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800b808:	3b01      	subs	r3, #1
 800b80a:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
          ungetc(c++, fp);
 800b80e:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800b812:	3301      	adds	r3, #1
 800b814:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 800b818:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800b81c:	3b01      	subs	r3, #1
 800b81e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800b822:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800b826:	3301      	adds	r3, #1
 800b828:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
          /* There is a dummy post-increment to 
             avoid an unused value warning */
        }
        goto match_failure;
 800b82c:	e06f      	b.n	800b90e <tiny_vfscanf+0x6f2>
      {
#else
      if ((flags & SUPPRESS) == 0) {
#endif

        *p = '\0';
 800b82e:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800b832:	2300      	movs	r3, #0
 800b834:	7013      	strb	r3, [r2, #0]
        if (sign_minus)
 800b836:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d006      	beq.n	800b84c <tiny_vfscanf+0x630>
          value = -value;
 800b83e:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 800b842:	4252      	negs	r2, r2
 800b844:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800b848:	e9c7 238c 	strd	r2, r3, [r7, #560]	; 0x230
          *va_arg(ap, size_t *) = value;
        else if (flags & PTRINT)
          *va_arg(ap, ptrdiff_t *) = value;
        else 
#endif
        if (flags & LONG)
 800b84c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800b850:	f003 0301 	and.w	r3, r3, #1
 800b854:	2b00      	cmp	r3, #0
 800b856:	d00b      	beq.n	800b870 <tiny_vfscanf+0x654>
          *va_arg(ap, long *) = value;
 800b858:	f107 031c 	add.w	r3, r7, #28
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	1d11      	adds	r1, r2, #4
 800b860:	f107 031c 	add.w	r3, r7, #28
 800b864:	6019      	str	r1, [r3, #0]
 800b866:	6813      	ldr	r3, [r2, #0]
 800b868:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 800b86c:	601a      	str	r2, [r3, #0]
 800b86e:	e02e      	b.n	800b8ce <tiny_vfscanf+0x6b2>
        else if (flags & SHORT)
 800b870:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800b874:	f003 0304 	and.w	r3, r3, #4
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d00b      	beq.n	800b894 <tiny_vfscanf+0x678>
          *va_arg(ap, short *) = value;
 800b87c:	f107 031c 	add.w	r3, r7, #28
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	1d11      	adds	r1, r2, #4
 800b884:	f107 031c 	add.w	r3, r7, #28
 800b888:	6019      	str	r1, [r3, #0]
 800b88a:	6812      	ldr	r2, [r2, #0]
 800b88c:	f9b7 3230 	ldrsh.w	r3, [r7, #560]	; 0x230
 800b890:	8013      	strh	r3, [r2, #0]
 800b892:	e01c      	b.n	800b8ce <tiny_vfscanf+0x6b2>
        else if (flags & SHORTSHORT)
 800b894:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800b898:	f003 0308 	and.w	r3, r3, #8
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d00b      	beq.n	800b8b8 <tiny_vfscanf+0x69c>
          *va_arg(ap, char *) = value;
 800b8a0:	f107 031c 	add.w	r3, r7, #28
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	1d11      	adds	r1, r2, #4
 800b8a8:	f107 031c 	add.w	r3, r7, #28
 800b8ac:	6019      	str	r1, [r3, #0]
 800b8ae:	6812      	ldr	r2, [r2, #0]
 800b8b0:	f897 3230 	ldrb.w	r3, [r7, #560]	; 0x230
 800b8b4:	7013      	strb	r3, [r2, #0]
 800b8b6:	e00a      	b.n	800b8ce <tiny_vfscanf+0x6b2>
        else
          *va_arg(ap, int *) = value;
 800b8b8:	f107 031c 	add.w	r3, r7, #28
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	1d11      	adds	r1, r2, #4
 800b8c0:	f107 031c 	add.w	r3, r7, #28
 800b8c4:	6019      	str	r1, [r3, #0]
 800b8c6:	6813      	ldr	r3, [r2, #0]
 800b8c8:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 800b8cc:	601a      	str	r2, [r3, #0]
        nassigned++;
 800b8ce:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
      }
      nread += p - buf;
 800b8d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b8dc:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800b8e0:	1ad3      	subs	r3, r2, r3
 800b8e2:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800b8e6:	4413      	add	r3, r2
 800b8e8:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
      break;
 800b8ec:	bf00      	nop
    c = *fmt++;
 800b8ee:	e4be      	b.n	800b26e <tiny_vfscanf+0x52>
        goto input_failure;
 800b8f0:	bf00      	nop
 800b8f2:	e000      	b.n	800b8f6 <tiny_vfscanf+0x6da>
      goto input_failure;
 800b8f4:	bf00      	nop
      break;
#endif /* FLOATING_POINT */
    }
  }
input_failure:
  return (nassigned ? nassigned : -1);
 800b8f6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d002      	beq.n	800b904 <tiny_vfscanf+0x6e8>
 800b8fe:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b902:	e007      	b.n	800b914 <tiny_vfscanf+0x6f8>
 800b904:	f04f 33ff 	mov.w	r3, #4294967295
 800b908:	e004      	b.n	800b914 <tiny_vfscanf+0x6f8>
        goto match_failure;
 800b90a:	bf00      	nop
 800b90c:	e000      	b.n	800b910 <tiny_vfscanf+0x6f4>
        goto match_failure;
 800b90e:	bf00      	nop
match_failure:
  return (nassigned);
 800b910:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
}
 800b914:	4618      	mov	r0, r3
 800b916:	f507 7719 	add.w	r7, r7, #612	; 0x264
 800b91a:	46bd      	mov	sp, r7
 800b91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b920 <tiny_sscanf>:
}
#endif

int
tiny_sscanf(const char *str, const char *fmt, ...)
{
 800b920:	b40e      	push	{r1, r2, r3}
 800b922:	b580      	push	{r7, lr}
 800b924:	b085      	sub	sp, #20
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
  int ret;
  va_list ap;
  
  va_start(ap, fmt);
 800b92a:	f107 0320 	add.w	r3, r7, #32
 800b92e:	60bb      	str	r3, [r7, #8]
  ret = tiny_vfscanf(str, fmt, ap);
 800b930:	68ba      	ldr	r2, [r7, #8]
 800b932:	69f9      	ldr	r1, [r7, #28]
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f7ff fc71 	bl	800b21c <tiny_vfscanf>
 800b93a:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return (ret);
 800b93c:	68fb      	ldr	r3, [r7, #12]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3714      	adds	r7, #20
 800b942:	46bd      	mov	sp, r7
 800b944:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b948:	b003      	add	sp, #12
 800b94a:	4770      	bx	lr

0800b94c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b085      	sub	sp, #20
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  int i = 0;
 800b954:	2300      	movs	r3, #0
 800b956:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800b958:	e00e      	b.n	800b978 <ee_skip_atoi+0x2c>
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	4613      	mov	r3, r2
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	4413      	add	r3, r2
 800b962:	005b      	lsls	r3, r3, #1
 800b964:	4618      	mov	r0, r3
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	1c59      	adds	r1, r3, #1
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	6011      	str	r1, [r2, #0]
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	4403      	add	r3, r0
 800b974:	3b30      	subs	r3, #48	; 0x30
 800b976:	60fb      	str	r3, [r7, #12]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	2b2f      	cmp	r3, #47	; 0x2f
 800b980:	d904      	bls.n	800b98c <ee_skip_atoi+0x40>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	2b39      	cmp	r3, #57	; 0x39
 800b98a:	d9e6      	bls.n	800b95a <ee_skip_atoi+0xe>
  return i;
 800b98c:	68fb      	ldr	r3, [r7, #12]
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3714      	adds	r7, #20
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr
	...

0800b99c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b099      	sub	sp, #100	; 0x64
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	607a      	str	r2, [r7, #4]
 800b9a8:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 800b9aa:	4b73      	ldr	r3, [pc, #460]	; (800bb78 <ee_number+0x1dc>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800b9b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d002      	beq.n	800b9c0 <ee_number+0x24>
 800b9ba:	4b70      	ldr	r3, [pc, #448]	; (800bb7c <ee_number+0x1e0>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	dd02      	ble.n	800b9cc <ee_number+0x30>
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	2b24      	cmp	r3, #36	; 0x24
 800b9ca:	dd01      	ble.n	800b9d0 <ee_number+0x34>
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	e0cc      	b.n	800bb6a <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 800b9d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9d2:	f003 0301 	and.w	r3, r3, #1
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d001      	beq.n	800b9de <ee_number+0x42>
 800b9da:	2330      	movs	r3, #48	; 0x30
 800b9dc:	e000      	b.n	800b9e0 <ee_number+0x44>
 800b9de:	2320      	movs	r3, #32
 800b9e0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 800b9ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9ec:	f003 0302 	and.w	r3, r3, #2
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d00b      	beq.n	800ba0c <ee_number+0x70>
  {
    if (num < 0)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	da08      	bge.n	800ba0c <ee_number+0x70>
    {
      sign = '-';
 800b9fa:	232d      	movs	r3, #45	; 0x2d
 800b9fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	425b      	negs	r3, r3
 800ba04:	607b      	str	r3, [r7, #4]
      size--;
 800ba06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d120      	bne.n	800ba58 <ee_number+0xbc>
    tmp[i++] = '0';
 800ba16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba18:	1c5a      	adds	r2, r3, #1
 800ba1a:	657a      	str	r2, [r7, #84]	; 0x54
 800ba1c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800ba20:	4413      	add	r3, r2
 800ba22:	2230      	movs	r2, #48	; 0x30
 800ba24:	f803 2c50 	strb.w	r2, [r3, #-80]
 800ba28:	e019      	b.n	800ba5e <ee_number+0xc2>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	683a      	ldr	r2, [r7, #0]
 800ba2e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba32:	fb02 f201 	mul.w	r2, r2, r1
 800ba36:	1a9b      	subs	r3, r3, r2
 800ba38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba3a:	441a      	add	r2, r3
 800ba3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba3e:	1c59      	adds	r1, r3, #1
 800ba40:	6579      	str	r1, [r7, #84]	; 0x54
 800ba42:	7812      	ldrb	r2, [r2, #0]
 800ba44:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800ba48:	440b      	add	r3, r1
 800ba4a:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba56:	607b      	str	r3, [r7, #4]
    while (num != 0)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1e5      	bne.n	800ba2a <ee_number+0x8e>
    }
  }

  if (i > precision) precision = i;
 800ba5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba62:	429a      	cmp	r2, r3
 800ba64:	dd01      	ble.n	800ba6a <ee_number+0xce>
 800ba66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba68:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 800ba6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ba6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba6e:	1ad3      	subs	r3, r2, r3
 800ba70:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800ba72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba74:	f003 0301 	and.w	r3, r3, #1
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d112      	bne.n	800baa2 <ee_number+0x106>
 800ba7c:	e00c      	b.n	800ba98 <ee_number+0xfc>
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	1c5a      	adds	r2, r3, #1
 800ba82:	60fa      	str	r2, [r7, #12]
 800ba84:	2220      	movs	r2, #32
 800ba86:	701a      	strb	r2, [r3, #0]
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	60bb      	str	r3, [r7, #8]
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d101      	bne.n	800ba98 <ee_number+0xfc>
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	e068      	b.n	800bb6a <ee_number+0x1ce>
 800ba98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba9a:	1e5a      	subs	r2, r3, #1
 800ba9c:	66ba      	str	r2, [r7, #104]	; 0x68
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	dced      	bgt.n	800ba7e <ee_number+0xe2>
  if (sign) ASSIGN_STR(sign);
 800baa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d01b      	beq.n	800bae2 <ee_number+0x146>
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	1c5a      	adds	r2, r3, #1
 800baae:	60fa      	str	r2, [r7, #12]
 800bab0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800bab4:	701a      	strb	r2, [r3, #0]
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	3b01      	subs	r3, #1
 800baba:	60bb      	str	r3, [r7, #8]
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d10f      	bne.n	800bae2 <ee_number+0x146>
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	e051      	b.n	800bb6a <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	1c5a      	adds	r2, r3, #1
 800baca:	60fa      	str	r2, [r7, #12]
 800bacc:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800bad0:	701a      	strb	r2, [r3, #0]
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	3b01      	subs	r3, #1
 800bad6:	60bb      	str	r3, [r7, #8]
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d101      	bne.n	800bae2 <ee_number+0x146>
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	e043      	b.n	800bb6a <ee_number+0x1ce>
 800bae2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bae4:	1e5a      	subs	r2, r3, #1
 800bae6:	66ba      	str	r2, [r7, #104]	; 0x68
 800bae8:	2b00      	cmp	r3, #0
 800baea:	dcec      	bgt.n	800bac6 <ee_number+0x12a>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 800baec:	e00c      	b.n	800bb08 <ee_number+0x16c>
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	1c5a      	adds	r2, r3, #1
 800baf2:	60fa      	str	r2, [r7, #12]
 800baf4:	2230      	movs	r2, #48	; 0x30
 800baf6:	701a      	strb	r2, [r3, #0]
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	3b01      	subs	r3, #1
 800bafc:	60bb      	str	r3, [r7, #8]
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d101      	bne.n	800bb08 <ee_number+0x16c>
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	e030      	b.n	800bb6a <ee_number+0x1ce>
 800bb08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb0a:	1e5a      	subs	r2, r3, #1
 800bb0c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bb0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb10:	429a      	cmp	r2, r3
 800bb12:	dbec      	blt.n	800baee <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800bb14:	e010      	b.n	800bb38 <ee_number+0x19c>
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	1c5a      	adds	r2, r3, #1
 800bb1a:	60fa      	str	r2, [r7, #12]
 800bb1c:	f107 0110 	add.w	r1, r7, #16
 800bb20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb22:	440a      	add	r2, r1
 800bb24:	7812      	ldrb	r2, [r2, #0]
 800bb26:	701a      	strb	r2, [r3, #0]
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	3b01      	subs	r3, #1
 800bb2c:	60bb      	str	r3, [r7, #8]
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d101      	bne.n	800bb38 <ee_number+0x19c>
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	e018      	b.n	800bb6a <ee_number+0x1ce>
 800bb38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb3a:	1e5a      	subs	r2, r3, #1
 800bb3c:	657a      	str	r2, [r7, #84]	; 0x54
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	dce9      	bgt.n	800bb16 <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 800bb42:	e00c      	b.n	800bb5e <ee_number+0x1c2>
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	1c5a      	adds	r2, r3, #1
 800bb48:	60fa      	str	r2, [r7, #12]
 800bb4a:	2220      	movs	r2, #32
 800bb4c:	701a      	strb	r2, [r3, #0]
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	3b01      	subs	r3, #1
 800bb52:	60bb      	str	r3, [r7, #8]
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d101      	bne.n	800bb5e <ee_number+0x1c2>
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	e005      	b.n	800bb6a <ee_number+0x1ce>
 800bb5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb60:	1e5a      	subs	r2, r3, #1
 800bb62:	66ba      	str	r2, [r7, #104]	; 0x68
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	dced      	bgt.n	800bb44 <ee_number+0x1a8>

  return str;
 800bb68:	68fb      	ldr	r3, [r7, #12]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3764      	adds	r7, #100	; 0x64
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop
 800bb78:	2000011c 	.word	0x2000011c
 800bb7c:	20000120 	.word	0x20000120

0800bb80 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b092      	sub	sp, #72	; 0x48
 800bb84:	af04      	add	r7, sp, #16
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	607a      	str	r2, [r7, #4]
 800bb8c:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	dc01      	bgt.n	800bb98 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 800bb94:	2300      	movs	r3, #0
 800bb96:	e142      	b.n	800be1e <tiny_vsnprintf_like+0x29e>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb9c:	e12a      	b.n	800bdf4 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 800bb9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	1ad2      	subs	r2, r2, r3
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	3b01      	subs	r3, #1
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	f280 8131 	bge.w	800be10 <tiny_vsnprintf_like+0x290>
    
    if (*fmt != '%')
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	2b25      	cmp	r3, #37	; 0x25
 800bbb4:	d006      	beq.n	800bbc4 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbba:	1c59      	adds	r1, r3, #1
 800bbbc:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bbbe:	7812      	ldrb	r2, [r2, #0]
 800bbc0:	701a      	strb	r2, [r3, #0]
      continue;
 800bbc2:	e114      	b.n	800bdee <tiny_vsnprintf_like+0x26e>
    }
                  
    // Process flags
    flags = 0;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	2b30      	cmp	r3, #48	; 0x30
 800bbd4:	d103      	bne.n	800bbde <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 800bbd6:	6a3b      	ldr	r3, [r7, #32]
 800bbd8:	f043 0301 	orr.w	r3, r3, #1
 800bbdc:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 800bbde:	f04f 33ff 	mov.w	r3, #4294967295
 800bbe2:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	2b2f      	cmp	r3, #47	; 0x2f
 800bbea:	d908      	bls.n	800bbfe <tiny_vsnprintf_like+0x7e>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	2b39      	cmp	r3, #57	; 0x39
 800bbf2:	d804      	bhi.n	800bbfe <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 800bbf4:	1d3b      	adds	r3, r7, #4
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7ff fea8 	bl	800b94c <ee_skip_atoi>
 800bbfc:	61f8      	str	r0, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 800bbfe:	f04f 33ff 	mov.w	r3, #4294967295
 800bc02:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 800bc04:	f04f 33ff 	mov.w	r3, #4294967295
 800bc08:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 800bc0a:	230a      	movs	r3, #10
 800bc0c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	3b58      	subs	r3, #88	; 0x58
 800bc14:	2b20      	cmp	r3, #32
 800bc16:	f200 8094 	bhi.w	800bd42 <tiny_vsnprintf_like+0x1c2>
 800bc1a:	a201      	add	r2, pc, #4	; (adr r2, 800bc20 <tiny_vsnprintf_like+0xa0>)
 800bc1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc20:	0800bd2b 	.word	0x0800bd2b
 800bc24:	0800bd43 	.word	0x0800bd43
 800bc28:	0800bd43 	.word	0x0800bd43
 800bc2c:	0800bd43 	.word	0x0800bd43
 800bc30:	0800bd43 	.word	0x0800bd43
 800bc34:	0800bd43 	.word	0x0800bd43
 800bc38:	0800bd43 	.word	0x0800bd43
 800bc3c:	0800bd43 	.word	0x0800bd43
 800bc40:	0800bd43 	.word	0x0800bd43
 800bc44:	0800bd43 	.word	0x0800bd43
 800bc48:	0800bd43 	.word	0x0800bd43
 800bc4c:	0800bcaf 	.word	0x0800bcaf
 800bc50:	0800bd39 	.word	0x0800bd39
 800bc54:	0800bd43 	.word	0x0800bd43
 800bc58:	0800bd43 	.word	0x0800bd43
 800bc5c:	0800bd43 	.word	0x0800bd43
 800bc60:	0800bd43 	.word	0x0800bd43
 800bc64:	0800bd39 	.word	0x0800bd39
 800bc68:	0800bd43 	.word	0x0800bd43
 800bc6c:	0800bd43 	.word	0x0800bd43
 800bc70:	0800bd43 	.word	0x0800bd43
 800bc74:	0800bd43 	.word	0x0800bd43
 800bc78:	0800bd43 	.word	0x0800bd43
 800bc7c:	0800bd43 	.word	0x0800bd43
 800bc80:	0800bd43 	.word	0x0800bd43
 800bc84:	0800bd43 	.word	0x0800bd43
 800bc88:	0800bd43 	.word	0x0800bd43
 800bc8c:	0800bccf 	.word	0x0800bccf
 800bc90:	0800bd43 	.word	0x0800bd43
 800bc94:	0800bd8f 	.word	0x0800bd8f
 800bc98:	0800bd43 	.word	0x0800bd43
 800bc9c:	0800bd43 	.word	0x0800bd43
 800bca0:	0800bd33 	.word	0x0800bd33
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800bca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca6:	1c5a      	adds	r2, r3, #1
 800bca8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bcaa:	2220      	movs	r2, #32
 800bcac:	701a      	strb	r2, [r3, #0]
 800bcae:	69fb      	ldr	r3, [r7, #28]
 800bcb0:	3b01      	subs	r3, #1
 800bcb2:	61fb      	str	r3, [r7, #28]
 800bcb4:	69fb      	ldr	r3, [r7, #28]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	dcf4      	bgt.n	800bca4 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	1d1a      	adds	r2, r3, #4
 800bcbe:	603a      	str	r2, [r7, #0]
 800bcc0:	6819      	ldr	r1, [r3, #0]
 800bcc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc4:	1c5a      	adds	r2, r3, #1
 800bcc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bcc8:	b2ca      	uxtb	r2, r1
 800bcca:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800bccc:	e08f      	b.n	800bdee <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	1d1a      	adds	r2, r3, #4
 800bcd2:	603a      	str	r2, [r7, #0]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 800bcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d101      	bne.n	800bce2 <tiny_vsnprintf_like+0x162>
 800bcde:	4b52      	ldr	r3, [pc, #328]	; (800be28 <tiny_vsnprintf_like+0x2a8>)
 800bce0:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 800bce2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bce4:	f7f4 fa7c 	bl	80001e0 <strlen>
 800bce8:	4603      	mov	r3, r0
 800bcea:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800bcec:	e004      	b.n	800bcf8 <tiny_vsnprintf_like+0x178>
 800bcee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf0:	1c5a      	adds	r2, r3, #1
 800bcf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bcf4:	2220      	movs	r2, #32
 800bcf6:	701a      	strb	r2, [r3, #0]
 800bcf8:	69fb      	ldr	r3, [r7, #28]
 800bcfa:	1e5a      	subs	r2, r3, #1
 800bcfc:	61fa      	str	r2, [r7, #28]
 800bcfe:	693a      	ldr	r2, [r7, #16]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	dbf4      	blt.n	800bcee <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800bd04:	2300      	movs	r3, #0
 800bd06:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd08:	e00a      	b.n	800bd20 <tiny_vsnprintf_like+0x1a0>
 800bd0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd0c:	1c53      	adds	r3, r2, #1
 800bd0e:	627b      	str	r3, [r7, #36]	; 0x24
 800bd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd12:	1c59      	adds	r1, r3, #1
 800bd14:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bd16:	7812      	ldrb	r2, [r2, #0]
 800bd18:	701a      	strb	r2, [r3, #0]
 800bd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	429a      	cmp	r2, r3
 800bd26:	dbf0      	blt.n	800bd0a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 800bd28:	e061      	b.n	800bdee <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 800bd2a:	6a3b      	ldr	r3, [r7, #32]
 800bd2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd30:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 800bd32:	2310      	movs	r3, #16
 800bd34:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800bd36:	e02d      	b.n	800bd94 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 800bd38:	6a3b      	ldr	r3, [r7, #32]
 800bd3a:	f043 0302 	orr.w	r3, r3, #2
 800bd3e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 800bd40:	e025      	b.n	800bd8e <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	2b25      	cmp	r3, #37	; 0x25
 800bd48:	d004      	beq.n	800bd54 <tiny_vsnprintf_like+0x1d4>
 800bd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd4c:	1c5a      	adds	r2, r3, #1
 800bd4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bd50:	2225      	movs	r2, #37	; 0x25
 800bd52:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 800bd54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	1ad2      	subs	r2, r2, r3
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	3b01      	subs	r3, #1
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	da17      	bge.n	800bd92 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d006      	beq.n	800bd78 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 800bd6a:	687a      	ldr	r2, [r7, #4]
 800bd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd6e:	1c59      	adds	r1, r3, #1
 800bd70:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bd72:	7812      	ldrb	r2, [r2, #0]
 800bd74:	701a      	strb	r2, [r3, #0]
 800bd76:	e002      	b.n	800bd7e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	3b01      	subs	r3, #1
 800bd7c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 800bd7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	1ad2      	subs	r2, r2, r3
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	3b01      	subs	r3, #1
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	db2f      	blt.n	800bdec <tiny_vsnprintf_like+0x26c>
 800bd8c:	e002      	b.n	800bd94 <tiny_vsnprintf_like+0x214>
        break;
 800bd8e:	bf00      	nop
 800bd90:	e000      	b.n	800bd94 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 800bd92:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	2b6c      	cmp	r3, #108	; 0x6c
 800bd98:	d105      	bne.n	800bda6 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	1d1a      	adds	r2, r3, #4
 800bd9e:	603a      	str	r2, [r7, #0]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	637b      	str	r3, [r7, #52]	; 0x34
 800bda4:	e00f      	b.n	800bdc6 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 800bda6:	6a3b      	ldr	r3, [r7, #32]
 800bda8:	f003 0302 	and.w	r3, r3, #2
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d005      	beq.n	800bdbc <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	1d1a      	adds	r2, r3, #4
 800bdb4:	603a      	str	r2, [r7, #0]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	637b      	str	r3, [r7, #52]	; 0x34
 800bdba:	e004      	b.n	800bdc6 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	1d1a      	adds	r2, r3, #4
 800bdc0:	603a      	str	r2, [r7, #0]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	1e5a      	subs	r2, r3, #1
 800bdca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	1acb      	subs	r3, r1, r3
 800bdd0:	1ad1      	subs	r1, r2, r3
 800bdd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bdd4:	6a3b      	ldr	r3, [r7, #32]
 800bdd6:	9302      	str	r3, [sp, #8]
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	9301      	str	r3, [sp, #4]
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	9300      	str	r3, [sp, #0]
 800bde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bde4:	f7ff fdda 	bl	800b99c <ee_number>
 800bde8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bdea:	e000      	b.n	800bdee <tiny_vsnprintf_like+0x26e>
        continue;
 800bdec:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	607b      	str	r3, [r7, #4]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f47f aed0 	bne.w	800bb9e <tiny_vsnprintf_like+0x1e>
 800bdfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	1ad2      	subs	r2, r2, r3
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	3b01      	subs	r3, #1
 800be08:	429a      	cmp	r2, r3
 800be0a:	f6bf aec8 	bge.w	800bb9e <tiny_vsnprintf_like+0x1e>
 800be0e:	e000      	b.n	800be12 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 800be10:	bf00      	nop
  }

  *str = '\0';
 800be12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be14:	2200      	movs	r2, #0
 800be16:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800be18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	1ad3      	subs	r3, r2, r3
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3738      	adds	r7, #56	; 0x38
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	080115c0 	.word	0x080115c0

0800be2c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800be30:	4b04      	ldr	r3, [pc, #16]	; (800be44 <UTIL_TIMER_Init+0x18>)
 800be32:	2200      	movs	r2, #0
 800be34:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800be36:	4b04      	ldr	r3, [pc, #16]	; (800be48 <UTIL_TIMER_Init+0x1c>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	4798      	blx	r3
 800be3c:	4603      	mov	r3, r0
}
 800be3e:	4618      	mov	r0, r3
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	20000668 	.word	0x20000668
 800be48:	080115e0 	.word	0x080115e0

0800be4c <UTIL_TIMER_Start>:
    return UTIL_TIMER_INVALID_PARAM;
  }
}

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b08a      	sub	sp, #40	; 0x28
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800be54:	2300      	movs	r3, #0
 800be56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d056      	beq.n	800bf0e <UTIL_TIMER_Start+0xc2>
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f000 f8e1 	bl	800c028 <TimerExists>
 800be66:	4603      	mov	r3, r0
 800be68:	f083 0301 	eor.w	r3, r3, #1
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d04d      	beq.n	800bf0e <UTIL_TIMER_Start+0xc2>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	7a5b      	ldrb	r3, [r3, #9]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d149      	bne.n	800bf0e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be7a:	f3ef 8310 	mrs	r3, PRIMASK
 800be7e:	613b      	str	r3, [r7, #16]
  return(result);
 800be80:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800be82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800be84:	b672      	cpsid	i
}
 800be86:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800be8e:	4b24      	ldr	r3, [pc, #144]	; (800bf20 <UTIL_TIMER_Start+0xd4>)
 800be90:	6a1b      	ldr	r3, [r3, #32]
 800be92:	4798      	blx	r3
 800be94:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800be96:	6a3a      	ldr	r2, [r7, #32]
 800be98:	69bb      	ldr	r3, [r7, #24]
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d201      	bcs.n	800bea2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800be9e:	69bb      	ldr	r3, [r7, #24]
 800bea0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6a3a      	ldr	r2, [r7, #32]
 800bea6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2200      	movs	r2, #0
 800beac:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2201      	movs	r2, #1
 800beb2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2200      	movs	r2, #0
 800beb8:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800beba:	4b1a      	ldr	r3, [pc, #104]	; (800bf24 <UTIL_TIMER_Start+0xd8>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d106      	bne.n	800bed0 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800bec2:	4b17      	ldr	r3, [pc, #92]	; (800bf20 <UTIL_TIMER_Start+0xd4>)
 800bec4:	691b      	ldr	r3, [r3, #16]
 800bec6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f000 f925 	bl	800c118 <TimerInsertNewHeadTimer>
 800bece:	e017      	b.n	800bf00 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800bed0:	4b13      	ldr	r3, [pc, #76]	; (800bf20 <UTIL_TIMER_Start+0xd4>)
 800bed2:	699b      	ldr	r3, [r3, #24]
 800bed4:	4798      	blx	r3
 800bed6:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	441a      	add	r2, r3
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681a      	ldr	r2, [r3, #0]
 800bee8:	4b0e      	ldr	r3, [pc, #56]	; (800bf24 <UTIL_TIMER_Start+0xd8>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	429a      	cmp	r2, r3
 800bef0:	d203      	bcs.n	800befa <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f000 f910 	bl	800c118 <TimerInsertNewHeadTimer>
 800bef8:	e002      	b.n	800bf00 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 f8dc 	bl	800c0b8 <TimerInsertTimer>
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f383 8810 	msr	PRIMASK, r3
}
 800bf0a:	bf00      	nop
  {
 800bf0c:	e002      	b.n	800bf14 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800bf14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3728      	adds	r7, #40	; 0x28
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	080115e0 	.word	0x080115e0
 800bf24:	20000668 	.word	0x20000668

0800bf28 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 800bf28:	b590      	push	{r4, r7, lr}
 800bf2a:	b089      	sub	sp, #36	; 0x24
 800bf2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf2e:	f3ef 8310 	mrs	r3, PRIMASK
 800bf32:	60bb      	str	r3, [r7, #8]
  return(result);
 800bf34:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800bf36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800bf38:	b672      	cpsid	i
}
 800bf3a:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 800bf3c:	4b38      	ldr	r3, [pc, #224]	; (800c020 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800bf3e:	695b      	ldr	r3, [r3, #20]
 800bf40:	4798      	blx	r3
 800bf42:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800bf44:	4b36      	ldr	r3, [pc, #216]	; (800c020 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800bf46:	691b      	ldr	r3, [r3, #16]
 800bf48:	4798      	blx	r3
 800bf4a:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 800bf4c:	693a      	ldr	r2, [r7, #16]
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	1ad3      	subs	r3, r2, r3
 800bf52:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 800bf54:	4b33      	ldr	r3, [pc, #204]	; (800c024 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d037      	beq.n	800bfcc <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 800bf5c:	4b31      	ldr	r3, [pc, #196]	; (800c024 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 800bf62:	69fb      	ldr	r3, [r7, #28]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	68fa      	ldr	r2, [r7, #12]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d206      	bcs.n	800bf7a <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	1ad2      	subs	r2, r2, r3
 800bf74:	69fb      	ldr	r3, [r7, #28]
 800bf76:	601a      	str	r2, [r3, #0]
 800bf78:	e002      	b.n	800bf80 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 800bf7a:	69fb      	ldr	r3, [r7, #28]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 800bf80:	69fb      	ldr	r3, [r7, #28]
 800bf82:	695b      	ldr	r3, [r3, #20]
 800bf84:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 800bf86:	69fb      	ldr	r3, [r7, #28]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1ea      	bne.n	800bf62 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800bf8c:	e01e      	b.n	800bfcc <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 800bf8e:	4b25      	ldr	r3, [pc, #148]	; (800c024 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 800bf94:	4b23      	ldr	r3, [pc, #140]	; (800c024 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	695b      	ldr	r3, [r3, #20]
 800bf9a:	4a22      	ldr	r2, [pc, #136]	; (800c024 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bf9c:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 800bf9e:	69fb      	ldr	r3, [r7, #28]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 800bfaa:	69fb      	ldr	r3, [r7, #28]
 800bfac:	68db      	ldr	r3, [r3, #12]
 800bfae:	69fa      	ldr	r2, [r7, #28]
 800bfb0:	6912      	ldr	r2, [r2, #16]
 800bfb2:	4610      	mov	r0, r2
 800bfb4:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800bfb6:	69fb      	ldr	r3, [r7, #28]
 800bfb8:	7adb      	ldrb	r3, [r3, #11]
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d106      	bne.n	800bfcc <UTIL_TIMER_IRQ_Handler+0xa4>
 800bfbe:	69fb      	ldr	r3, [r7, #28]
 800bfc0:	7a9b      	ldrb	r3, [r3, #10]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d102      	bne.n	800bfcc <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 800bfc6:	69f8      	ldr	r0, [r7, #28]
 800bfc8:	f7ff ff40 	bl	800be4c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800bfcc:	4b15      	ldr	r3, [pc, #84]	; (800c024 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d00d      	beq.n	800bff0 <UTIL_TIMER_IRQ_Handler+0xc8>
 800bfd4:	4b13      	ldr	r3, [pc, #76]	; (800c024 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d0d7      	beq.n	800bf8e <UTIL_TIMER_IRQ_Handler+0x66>
 800bfde:	4b11      	ldr	r3, [pc, #68]	; (800c024 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	681c      	ldr	r4, [r3, #0]
 800bfe4:	4b0e      	ldr	r3, [pc, #56]	; (800c020 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800bfe6:	699b      	ldr	r3, [r3, #24]
 800bfe8:	4798      	blx	r3
 800bfea:	4603      	mov	r3, r0
 800bfec:	429c      	cmp	r4, r3
 800bfee:	d3ce      	bcc.n	800bf8e <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800bff0:	4b0c      	ldr	r3, [pc, #48]	; (800c024 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d009      	beq.n	800c00c <UTIL_TIMER_IRQ_Handler+0xe4>
 800bff8:	4b0a      	ldr	r3, [pc, #40]	; (800c024 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	7a1b      	ldrb	r3, [r3, #8]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d104      	bne.n	800c00c <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800c002:	4b08      	ldr	r3, [pc, #32]	; (800c024 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4618      	mov	r0, r3
 800c008:	f000 f82c 	bl	800c064 <TimerSetTimeout>
 800c00c:	69bb      	ldr	r3, [r7, #24]
 800c00e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f383 8810 	msr	PRIMASK, r3
}
 800c016:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 800c018:	bf00      	nop
 800c01a:	3724      	adds	r7, #36	; 0x24
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd90      	pop	{r4, r7, pc}
 800c020:	080115e0 	.word	0x080115e0
 800c024:	20000668 	.word	0x20000668

0800c028 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800c028:	b480      	push	{r7}
 800c02a:	b085      	sub	sp, #20
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c030:	4b0b      	ldr	r3, [pc, #44]	; (800c060 <TimerExists+0x38>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800c036:	e008      	b.n	800c04a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800c038:	68fa      	ldr	r2, [r7, #12]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d101      	bne.n	800c044 <TimerExists+0x1c>
    {
      return true;
 800c040:	2301      	movs	r3, #1
 800c042:	e006      	b.n	800c052 <TimerExists+0x2a>
    }
    cur = cur->Next;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	695b      	ldr	r3, [r3, #20]
 800c048:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d1f3      	bne.n	800c038 <TimerExists+0x10>
  }
  return false;
 800c050:	2300      	movs	r3, #0
}
 800c052:	4618      	mov	r0, r3
 800c054:	3714      	adds	r7, #20
 800c056:	46bd      	mov	sp, r7
 800c058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05c:	4770      	bx	lr
 800c05e:	bf00      	nop
 800c060:	20000668 	.word	0x20000668

0800c064 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800c064:	b590      	push	{r4, r7, lr}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c06c:	4b11      	ldr	r3, [pc, #68]	; (800c0b4 <TimerSetTimeout+0x50>)
 800c06e:	6a1b      	ldr	r3, [r3, #32]
 800c070:	4798      	blx	r3
 800c072:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2201      	movs	r2, #1
 800c078:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681c      	ldr	r4, [r3, #0]
 800c07e:	4b0d      	ldr	r3, [pc, #52]	; (800c0b4 <TimerSetTimeout+0x50>)
 800c080:	699b      	ldr	r3, [r3, #24]
 800c082:	4798      	blx	r3
 800c084:	4602      	mov	r2, r0
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	4413      	add	r3, r2
 800c08a:	429c      	cmp	r4, r3
 800c08c:	d207      	bcs.n	800c09e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800c08e:	4b09      	ldr	r3, [pc, #36]	; (800c0b4 <TimerSetTimeout+0x50>)
 800c090:	699b      	ldr	r3, [r3, #24]
 800c092:	4798      	blx	r3
 800c094:	4602      	mov	r2, r0
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	441a      	add	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800c09e:	4b05      	ldr	r3, [pc, #20]	; (800c0b4 <TimerSetTimeout+0x50>)
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	6812      	ldr	r2, [r2, #0]
 800c0a6:	4610      	mov	r0, r2
 800c0a8:	4798      	blx	r3
}
 800c0aa:	bf00      	nop
 800c0ac:	3714      	adds	r7, #20
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd90      	pop	{r4, r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	080115e0 	.word	0x080115e0

0800c0b8 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b085      	sub	sp, #20
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c0c0:	4b14      	ldr	r3, [pc, #80]	; (800c114 <TimerInsertTimer+0x5c>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800c0c6:	4b13      	ldr	r3, [pc, #76]	; (800c114 <TimerInsertTimer+0x5c>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	695b      	ldr	r3, [r3, #20]
 800c0cc:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800c0ce:	e012      	b.n	800c0f6 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d905      	bls.n	800c0e8 <TimerInsertTimer+0x30>
    {
        cur = next;
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	695b      	ldr	r3, [r3, #20]
 800c0e4:	60bb      	str	r3, [r7, #8]
 800c0e6:	e006      	b.n	800c0f6 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	687a      	ldr	r2, [r7, #4]
 800c0ec:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	68ba      	ldr	r2, [r7, #8]
 800c0f2:	615a      	str	r2, [r3, #20]
        return;
 800c0f4:	e009      	b.n	800c10a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	695b      	ldr	r3, [r3, #20]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d1e8      	bne.n	800c0d0 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	615a      	str	r2, [r3, #20]
}
 800c10a:	3714      	adds	r7, #20
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr
 800c114:	20000668 	.word	0x20000668

0800c118 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c120:	4b0b      	ldr	r3, [pc, #44]	; (800c150 <TimerInsertNewHeadTimer+0x38>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d002      	beq.n	800c132 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2200      	movs	r2, #0
 800c130:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800c138:	4a05      	ldr	r2, [pc, #20]	; (800c150 <TimerInsertNewHeadTimer+0x38>)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800c13e:	4b04      	ldr	r3, [pc, #16]	; (800c150 <TimerInsertNewHeadTimer+0x38>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	4618      	mov	r0, r3
 800c144:	f7ff ff8e 	bl	800c064 <TimerSetTimeout>
}
 800c148:	bf00      	nop
 800c14a:	3710      	adds	r7, #16
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	20000668 	.word	0x20000668

0800c154 <arm_std_f32>:
 800c154:	2901      	cmp	r1, #1
 800c156:	d97d      	bls.n	800c254 <arm_std_f32+0x100>
 800c158:	b530      	push	{r4, r5, lr}
 800c15a:	ed2d 8b02 	vpush	{d8}
 800c15e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800c264 <arm_std_f32+0x110>
 800c162:	088d      	lsrs	r5, r1, #2
 800c164:	b083      	sub	sp, #12
 800c166:	eef0 4a47 	vmov.f32	s9, s14
 800c16a:	d028      	beq.n	800c1be <arm_std_f32+0x6a>
 800c16c:	f100 0310 	add.w	r3, r0, #16
 800c170:	462c      	mov	r4, r5
 800c172:	ed53 7a04 	vldr	s15, [r3, #-16]
 800c176:	ed13 5a03 	vldr	s10, [r3, #-12]
 800c17a:	ed53 5a02 	vldr	s11, [r3, #-8]
 800c17e:	ed13 6a01 	vldr	s12, [r3, #-4]
 800c182:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800c186:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800c18a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c18e:	ee65 6a05 	vmul.f32	s13, s10, s10
 800c192:	ee77 7a85 	vadd.f32	s15, s15, s10
 800c196:	ee76 6a87 	vadd.f32	s13, s13, s14
 800c19a:	ee25 7aa5 	vmul.f32	s14, s11, s11
 800c19e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c1a2:	ee77 6a26 	vadd.f32	s13, s14, s13
 800c1a6:	ee26 7a06 	vmul.f32	s14, s12, s12
 800c1aa:	3c01      	subs	r4, #1
 800c1ac:	ee77 4a86 	vadd.f32	s9, s15, s12
 800c1b0:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c1b4:	f103 0310 	add.w	r3, r3, #16
 800c1b8:	d1db      	bne.n	800c172 <arm_std_f32+0x1e>
 800c1ba:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800c1be:	f011 0303 	ands.w	r3, r1, #3
 800c1c2:	d01b      	beq.n	800c1fc <arm_std_f32+0xa8>
 800c1c4:	edd0 7a00 	vldr	s15, [r0]
 800c1c8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800c1cc:	3b01      	subs	r3, #1
 800c1ce:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800c1d2:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c1d6:	d011      	beq.n	800c1fc <arm_std_f32+0xa8>
 800c1d8:	edd0 7a01 	vldr	s15, [r0, #4]
 800c1dc:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800c1e6:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c1ea:	d007      	beq.n	800c1fc <arm_std_f32+0xa8>
 800c1ec:	edd0 7a02 	vldr	s15, [r0, #8]
 800c1f0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800c1f4:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800c1f8:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c1fc:	ee07 1a90 	vmov	s15, r1
 800c200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c204:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c208:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800c20c:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 800c210:	eec7 5a86 	vdiv.f32	s11, s15, s12
 800c214:	ee87 0a06 	vdiv.f32	s0, s14, s12
 800c218:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800c21c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800c220:	ee30 0a66 	vsub.f32	s0, s0, s13
 800c224:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c22c:	db0c      	blt.n	800c248 <arm_std_f32+0xf4>
 800c22e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c236:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800c23a:	d40e      	bmi.n	800c25a <arm_std_f32+0x106>
 800c23c:	ed82 8a00 	vstr	s16, [r2]
 800c240:	b003      	add	sp, #12
 800c242:	ecbd 8b02 	vpop	{d8}
 800c246:	bd30      	pop	{r4, r5, pc}
 800c248:	2300      	movs	r3, #0
 800c24a:	6013      	str	r3, [r2, #0]
 800c24c:	b003      	add	sp, #12
 800c24e:	ecbd 8b02 	vpop	{d8}
 800c252:	bd30      	pop	{r4, r5, pc}
 800c254:	2300      	movs	r3, #0
 800c256:	6013      	str	r3, [r2, #0]
 800c258:	4770      	bx	lr
 800c25a:	9201      	str	r2, [sp, #4]
 800c25c:	f003 fbd0 	bl	800fa00 <sqrtf>
 800c260:	9a01      	ldr	r2, [sp, #4]
 800c262:	e7eb      	b.n	800c23c <arm_std_f32+0xe8>
 800c264:	00000000 	.word	0x00000000

0800c268 <arm_rms_f32>:
 800c268:	b530      	push	{r4, r5, lr}
 800c26a:	ed2d 8b02 	vpush	{d8}
 800c26e:	088d      	lsrs	r5, r1, #2
 800c270:	b083      	sub	sp, #12
 800c272:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c32c <arm_rms_f32+0xc4>
 800c276:	d020      	beq.n	800c2ba <arm_rms_f32+0x52>
 800c278:	f100 0310 	add.w	r3, r0, #16
 800c27c:	462c      	mov	r4, r5
 800c27e:	ed53 6a04 	vldr	s13, [r3, #-16]
 800c282:	ed13 7a03 	vldr	s14, [r3, #-12]
 800c286:	ed53 7a02 	vldr	s15, [r3, #-8]
 800c28a:	ed13 6a01 	vldr	s12, [r3, #-4]
 800c28e:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800c292:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c296:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800c29a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c29e:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c2a2:	ee26 6a06 	vmul.f32	s12, s12, s12
 800c2a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c2aa:	3c01      	subs	r4, #1
 800c2ac:	f103 0310 	add.w	r3, r3, #16
 800c2b0:	ee76 5a27 	vadd.f32	s11, s12, s15
 800c2b4:	d1e3      	bne.n	800c27e <arm_rms_f32+0x16>
 800c2b6:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800c2ba:	f011 0303 	ands.w	r3, r1, #3
 800c2be:	d015      	beq.n	800c2ec <arm_rms_f32+0x84>
 800c2c0:	edd0 7a00 	vldr	s15, [r0]
 800c2c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c2c8:	3b01      	subs	r3, #1
 800c2ca:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800c2ce:	d00d      	beq.n	800c2ec <arm_rms_f32+0x84>
 800c2d0:	edd0 7a01 	vldr	s15, [r0, #4]
 800c2d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800c2de:	d005      	beq.n	800c2ec <arm_rms_f32+0x84>
 800c2e0:	edd0 7a02 	vldr	s15, [r0, #8]
 800c2e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c2e8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800c2ec:	ee07 1a90 	vmov	s15, r1
 800c2f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	ee85 0aa7 	vdiv.f32	s0, s11, s15
 800c2fa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c2fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c302:	db0c      	blt.n	800c31e <arm_rms_f32+0xb6>
 800c304:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c30c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800c310:	d407      	bmi.n	800c322 <arm_rms_f32+0xba>
 800c312:	ed82 8a00 	vstr	s16, [r2]
 800c316:	b003      	add	sp, #12
 800c318:	ecbd 8b02 	vpop	{d8}
 800c31c:	bd30      	pop	{r4, r5, pc}
 800c31e:	6013      	str	r3, [r2, #0]
 800c320:	e7f9      	b.n	800c316 <arm_rms_f32+0xae>
 800c322:	9201      	str	r2, [sp, #4]
 800c324:	f003 fb6c 	bl	800fa00 <sqrtf>
 800c328:	9a01      	ldr	r2, [sp, #4]
 800c32a:	e7f2      	b.n	800c312 <arm_rms_f32+0xaa>
 800c32c:	00000000 	.word	0x00000000

0800c330 <arm_max_f32>:
 800c330:	f101 3cff 	add.w	ip, r1, #4294967295
 800c334:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c336:	4607      	mov	r7, r0
 800c338:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800c33c:	ecf7 7a01 	vldmia	r7!, {s15}
 800c340:	d060      	beq.n	800c404 <arm_max_f32+0xd4>
 800c342:	2400      	movs	r4, #0
 800c344:	3014      	adds	r0, #20
 800c346:	4625      	mov	r5, r4
 800c348:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800c34c:	ed10 7a04 	vldr	s14, [r0, #-16]
 800c350:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c358:	bf48      	it	mi
 800c35a:	eef0 7a47 	vmovmi.f32	s15, s14
 800c35e:	ed10 7a03 	vldr	s14, [r0, #-12]
 800c362:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c366:	bf48      	it	mi
 800c368:	1c65      	addmi	r5, r4, #1
 800c36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c36e:	bf48      	it	mi
 800c370:	eef0 7a47 	vmovmi.f32	s15, s14
 800c374:	ed10 7a02 	vldr	s14, [r0, #-8]
 800c378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c37c:	bf48      	it	mi
 800c37e:	1ca5      	addmi	r5, r4, #2
 800c380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c384:	bf48      	it	mi
 800c386:	eef0 7a47 	vmovmi.f32	s15, s14
 800c38a:	ed10 7a01 	vldr	s14, [r0, #-4]
 800c38e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c392:	bf48      	it	mi
 800c394:	1ce5      	addmi	r5, r4, #3
 800c396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c39a:	f104 0404 	add.w	r4, r4, #4
 800c39e:	bf44      	itt	mi
 800c3a0:	eef0 7a47 	vmovmi.f32	s15, s14
 800c3a4:	4625      	movmi	r5, r4
 800c3a6:	42a6      	cmp	r6, r4
 800c3a8:	f100 0010 	add.w	r0, r0, #16
 800c3ac:	d1ce      	bne.n	800c34c <arm_max_f32+0x1c>
 800c3ae:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800c3b2:	f01c 0003 	ands.w	r0, ip, #3
 800c3b6:	d021      	beq.n	800c3fc <arm_max_f32+0xcc>
 800c3b8:	ed97 7a00 	vldr	s14, [r7]
 800c3bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3c4:	bfc4      	itt	gt
 800c3c6:	eef0 7a47 	vmovgt.f32	s15, s14
 800c3ca:	1a0d      	subgt	r5, r1, r0
 800c3cc:	3801      	subs	r0, #1
 800c3ce:	d015      	beq.n	800c3fc <arm_max_f32+0xcc>
 800c3d0:	ed97 7a01 	vldr	s14, [r7, #4]
 800c3d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c3d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3dc:	bf44      	itt	mi
 800c3de:	eef0 7a47 	vmovmi.f32	s15, s14
 800c3e2:	1a0d      	submi	r5, r1, r0
 800c3e4:	2801      	cmp	r0, #1
 800c3e6:	d009      	beq.n	800c3fc <arm_max_f32+0xcc>
 800c3e8:	ed97 7a02 	vldr	s14, [r7, #8]
 800c3ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c3f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3f4:	bfc4      	itt	gt
 800c3f6:	eef0 7a47 	vmovgt.f32	s15, s14
 800c3fa:	4665      	movgt	r5, ip
 800c3fc:	edc2 7a00 	vstr	s15, [r2]
 800c400:	601d      	str	r5, [r3, #0]
 800c402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c404:	4675      	mov	r5, lr
 800c406:	e7d4      	b.n	800c3b2 <arm_max_f32+0x82>

0800c408 <arm_cfft_radix2_init_f32>:
 800c408:	b410      	push	{r4}
 800c40a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800c40e:	4c3f      	ldr	r4, [pc, #252]	; (800c50c <arm_cfft_radix2_init_f32+0x104>)
 800c410:	7082      	strb	r2, [r0, #2]
 800c412:	70c3      	strb	r3, [r0, #3]
 800c414:	8001      	strh	r1, [r0, #0]
 800c416:	6044      	str	r4, [r0, #4]
 800c418:	d045      	beq.n	800c4a6 <arm_cfft_radix2_init_f32+0x9e>
 800c41a:	d922      	bls.n	800c462 <arm_cfft_radix2_init_f32+0x5a>
 800c41c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c420:	d04b      	beq.n	800c4ba <arm_cfft_radix2_init_f32+0xb2>
 800c422:	d911      	bls.n	800c448 <arm_cfft_radix2_init_f32+0x40>
 800c424:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800c428:	d051      	beq.n	800c4ce <arm_cfft_radix2_init_f32+0xc6>
 800c42a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800c42e:	d135      	bne.n	800c49c <arm_cfft_radix2_init_f32+0x94>
 800c430:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800c434:	4b36      	ldr	r3, [pc, #216]	; (800c510 <arm_cfft_radix2_init_f32+0x108>)
 800c436:	6102      	str	r2, [r0, #16]
 800c438:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800c43c:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800c440:	2000      	movs	r0, #0
 800c442:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c446:	4770      	bx	lr
 800c448:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c44c:	d126      	bne.n	800c49c <arm_cfft_radix2_init_f32+0x94>
 800c44e:	f04f 526c 	mov.w	r2, #989855744	; 0x3b000000
 800c452:	4b30      	ldr	r3, [pc, #192]	; (800c514 <arm_cfft_radix2_init_f32+0x10c>)
 800c454:	6102      	str	r2, [r0, #16]
 800c456:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800c45a:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800c45e:	2000      	movs	r0, #0
 800c460:	e7ef      	b.n	800c442 <arm_cfft_radix2_init_f32+0x3a>
 800c462:	2920      	cmp	r1, #32
 800c464:	d03d      	beq.n	800c4e2 <arm_cfft_radix2_init_f32+0xda>
 800c466:	d90d      	bls.n	800c484 <arm_cfft_radix2_init_f32+0x7c>
 800c468:	2940      	cmp	r1, #64	; 0x40
 800c46a:	d044      	beq.n	800c4f6 <arm_cfft_radix2_init_f32+0xee>
 800c46c:	2980      	cmp	r1, #128	; 0x80
 800c46e:	d115      	bne.n	800c49c <arm_cfft_radix2_init_f32+0x94>
 800c470:	f04f 5270 	mov.w	r2, #1006632960	; 0x3c000000
 800c474:	4b28      	ldr	r3, [pc, #160]	; (800c518 <arm_cfft_radix2_init_f32+0x110>)
 800c476:	6102      	str	r2, [r0, #16]
 800c478:	f04f 1220 	mov.w	r2, #2097184	; 0x200020
 800c47c:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800c480:	2000      	movs	r0, #0
 800c482:	e7de      	b.n	800c442 <arm_cfft_radix2_init_f32+0x3a>
 800c484:	2910      	cmp	r1, #16
 800c486:	d109      	bne.n	800c49c <arm_cfft_radix2_init_f32+0x94>
 800c488:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 800c48c:	4b23      	ldr	r3, [pc, #140]	; (800c51c <arm_cfft_radix2_init_f32+0x114>)
 800c48e:	6102      	str	r2, [r0, #16]
 800c490:	f04f 2201 	mov.w	r2, #16777472	; 0x1000100
 800c494:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800c498:	2000      	movs	r0, #0
 800c49a:	e7d2      	b.n	800c442 <arm_cfft_radix2_init_f32+0x3a>
 800c49c:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4a4:	4770      	bx	lr
 800c4a6:	f04f 526e 	mov.w	r2, #998244352	; 0x3b800000
 800c4aa:	4b1d      	ldr	r3, [pc, #116]	; (800c520 <arm_cfft_radix2_init_f32+0x118>)
 800c4ac:	6102      	str	r2, [r0, #16]
 800c4ae:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
 800c4b2:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800c4b6:	2000      	movs	r0, #0
 800c4b8:	e7c3      	b.n	800c442 <arm_cfft_radix2_init_f32+0x3a>
 800c4ba:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 800c4be:	4b19      	ldr	r3, [pc, #100]	; (800c524 <arm_cfft_radix2_init_f32+0x11c>)
 800c4c0:	6102      	str	r2, [r0, #16]
 800c4c2:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800c4c6:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800c4ca:	2000      	movs	r0, #0
 800c4cc:	e7b9      	b.n	800c442 <arm_cfft_radix2_init_f32+0x3a>
 800c4ce:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 800c4d2:	4b15      	ldr	r3, [pc, #84]	; (800c528 <arm_cfft_radix2_init_f32+0x120>)
 800c4d4:	6102      	str	r2, [r0, #16]
 800c4d6:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800c4da:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800c4de:	2000      	movs	r0, #0
 800c4e0:	e7af      	b.n	800c442 <arm_cfft_radix2_init_f32+0x3a>
 800c4e2:	f04f 5274 	mov.w	r2, #1023410176	; 0x3d000000
 800c4e6:	4b11      	ldr	r3, [pc, #68]	; (800c52c <arm_cfft_radix2_init_f32+0x124>)
 800c4e8:	6102      	str	r2, [r0, #16]
 800c4ea:	f04f 1280 	mov.w	r2, #8388736	; 0x800080
 800c4ee:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800c4f2:	2000      	movs	r0, #0
 800c4f4:	e7a5      	b.n	800c442 <arm_cfft_radix2_init_f32+0x3a>
 800c4f6:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 800c4fa:	4b0d      	ldr	r3, [pc, #52]	; (800c530 <arm_cfft_radix2_init_f32+0x128>)
 800c4fc:	6102      	str	r2, [r0, #16]
 800c4fe:	f04f 1240 	mov.w	r2, #4194368	; 0x400040
 800c502:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800c506:	2000      	movs	r0, #0
 800c508:	e79b      	b.n	800c442 <arm_cfft_radix2_init_f32+0x3a>
 800c50a:	bf00      	nop
 800c50c:	08011e6c 	.word	0x08011e6c
 800c510:	0801166c 	.word	0x0801166c
 800c514:	0801167a 	.word	0x0801167a
 800c518:	080116aa 	.word	0x080116aa
 800c51c:	0801186a 	.word	0x0801186a
 800c520:	0801168a 	.word	0x0801168a
 800c524:	08011672 	.word	0x08011672
 800c528:	0801166e 	.word	0x0801166e
 800c52c:	0801176a 	.word	0x0801176a
 800c530:	080116ea 	.word	0x080116ea

0800c534 <arm_radix2_butterfly_f32>:
 800c534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c538:	084e      	lsrs	r6, r1, #1
 800c53a:	b083      	sub	sp, #12
 800c53c:	e9cd 0200 	strd	r0, r2, [sp]
 800c540:	f000 8090 	beq.w	800c664 <arm_radix2_butterfly_f32+0x130>
 800c544:	00f5      	lsls	r5, r6, #3
 800c546:	4691      	mov	r9, r2
 800c548:	1944      	adds	r4, r0, r5
 800c54a:	4602      	mov	r2, r0
 800c54c:	1d28      	adds	r0, r5, #4
 800c54e:	46a0      	mov	r8, r4
 800c550:	4410      	add	r0, r2
 800c552:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
 800c556:	f102 0c04 	add.w	ip, r2, #4
 800c55a:	464f      	mov	r7, r9
 800c55c:	ed92 7a01 	vldr	s14, [r2, #4]
 800c560:	ed5c 6a01 	vldr	s13, [ip, #-4]
 800c564:	ed10 4a01 	vldr	s8, [r0, #-4]
 800c568:	edd4 4a01 	vldr	s9, [r4, #4]
 800c56c:	edd7 7a00 	vldr	s15, [r7]
 800c570:	edd7 5a01 	vldr	s11, [r7, #4]
 800c574:	ee36 6ac4 	vsub.f32	s12, s13, s8
 800c578:	ee77 3a64 	vsub.f32	s7, s14, s9
 800c57c:	ee27 5a86 	vmul.f32	s10, s15, s12
 800c580:	ee76 6a84 	vadd.f32	s13, s13, s8
 800c584:	ee25 6a86 	vmul.f32	s12, s11, s12
 800c588:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800c58c:	ee65 5aa3 	vmul.f32	s11, s11, s7
 800c590:	ee37 7a24 	vadd.f32	s14, s14, s9
 800c594:	ed4c 6a01 	vstr	s13, [ip, #-4]
 800c598:	ee75 5a25 	vadd.f32	s11, s10, s11
 800c59c:	ed82 7a01 	vstr	s14, [r2, #4]
 800c5a0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c5a4:	3208      	adds	r2, #8
 800c5a6:	4590      	cmp	r8, r2
 800c5a8:	ed40 5a01 	vstr	s11, [r0, #-4]
 800c5ac:	4477      	add	r7, lr
 800c5ae:	edc4 7a01 	vstr	s15, [r4, #4]
 800c5b2:	f10c 0c08 	add.w	ip, ip, #8
 800c5b6:	f100 0008 	add.w	r0, r0, #8
 800c5ba:	f104 0408 	add.w	r4, r4, #8
 800c5be:	d1cd      	bne.n	800c55c <arm_radix2_butterfly_f32+0x28>
 800c5c0:	005b      	lsls	r3, r3, #1
 800c5c2:	2e02      	cmp	r6, #2
 800c5c4:	fa1f fb83 	uxth.w	fp, r3
 800c5c8:	d94d      	bls.n	800c666 <arm_radix2_butterfly_f32+0x132>
 800c5ca:	e9dd 7e00 	ldrd	r7, lr, [sp]
 800c5ce:	ea4f 0856 	mov.w	r8, r6, lsr #1
 800c5d2:	ea4f 0ac8 	mov.w	sl, r8, lsl #3
 800c5d6:	ea4f 09cb 	mov.w	r9, fp, lsl #3
 800c5da:	f04f 0c00 	mov.w	ip, #0
 800c5de:	edde 3a00 	vldr	s7, [lr]
 800c5e2:	ed9e 4a01 	vldr	s8, [lr, #4]
 800c5e6:	eb0a 0307 	add.w	r3, sl, r7
 800c5ea:	1d38      	adds	r0, r7, #4
 800c5ec:	463a      	mov	r2, r7
 800c5ee:	4664      	mov	r4, ip
 800c5f0:	ed50 6a01 	vldr	s13, [r0, #-4]
 800c5f4:	ed92 7a01 	vldr	s14, [r2, #4]
 800c5f8:	edd3 4a00 	vldr	s9, [r3]
 800c5fc:	ed93 5a01 	vldr	s10, [r3, #4]
 800c600:	ee36 6ae4 	vsub.f32	s12, s13, s9
 800c604:	ee77 7a45 	vsub.f32	s15, s14, s10
 800c608:	ee63 5a86 	vmul.f32	s11, s7, s12
 800c60c:	ee24 3a27 	vmul.f32	s6, s8, s15
 800c610:	ee24 6a06 	vmul.f32	s12, s8, s12
 800c614:	ee63 7aa7 	vmul.f32	s15, s7, s15
 800c618:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c61c:	ee37 7a05 	vadd.f32	s14, s14, s10
 800c620:	ee75 5a83 	vadd.f32	s11, s11, s6
 800c624:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c628:	4434      	add	r4, r6
 800c62a:	42a1      	cmp	r1, r4
 800c62c:	ed40 6a01 	vstr	s13, [r0, #-4]
 800c630:	ed82 7a01 	vstr	s14, [r2, #4]
 800c634:	4428      	add	r0, r5
 800c636:	edc3 5a00 	vstr	s11, [r3]
 800c63a:	edc3 7a01 	vstr	s15, [r3, #4]
 800c63e:	442a      	add	r2, r5
 800c640:	442b      	add	r3, r5
 800c642:	d8d5      	bhi.n	800c5f0 <arm_radix2_butterfly_f32+0xbc>
 800c644:	f10c 0c01 	add.w	ip, ip, #1
 800c648:	45e0      	cmp	r8, ip
 800c64a:	44ce      	add	lr, r9
 800c64c:	f107 0708 	add.w	r7, r7, #8
 800c650:	d1c5      	bne.n	800c5de <arm_radix2_butterfly_f32+0xaa>
 800c652:	4646      	mov	r6, r8
 800c654:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800c658:	2e02      	cmp	r6, #2
 800c65a:	fa1f fb8b 	uxth.w	fp, fp
 800c65e:	d902      	bls.n	800c666 <arm_radix2_butterfly_f32+0x132>
 800c660:	00f5      	lsls	r5, r6, #3
 800c662:	e7b2      	b.n	800c5ca <arm_radix2_butterfly_f32+0x96>
 800c664:	b1f1      	cbz	r1, 800c6a4 <arm_radix2_butterfly_f32+0x170>
 800c666:	9b00      	ldr	r3, [sp, #0]
 800c668:	2200      	movs	r2, #0
 800c66a:	ed93 6a02 	vldr	s12, [r3, #8]
 800c66e:	ed93 7a00 	vldr	s14, [r3]
 800c672:	edd3 7a01 	vldr	s15, [r3, #4]
 800c676:	edd3 6a03 	vldr	s13, [r3, #12]
 800c67a:	ee77 5a06 	vadd.f32	s11, s14, s12
 800c67e:	3202      	adds	r2, #2
 800c680:	ee37 7a46 	vsub.f32	s14, s14, s12
 800c684:	ee37 6aa6 	vadd.f32	s12, s15, s13
 800c688:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c68c:	4291      	cmp	r1, r2
 800c68e:	edc3 5a00 	vstr	s11, [r3]
 800c692:	ed83 7a02 	vstr	s14, [r3, #8]
 800c696:	ed83 6a01 	vstr	s12, [r3, #4]
 800c69a:	edc3 7a03 	vstr	s15, [r3, #12]
 800c69e:	f103 0310 	add.w	r3, r3, #16
 800c6a2:	d8e2      	bhi.n	800c66a <arm_radix2_butterfly_f32+0x136>
 800c6a4:	b003      	add	sp, #12
 800c6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6aa:	bf00      	nop

0800c6ac <arm_radix2_butterfly_inverse_f32>:
 800c6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b0:	084e      	lsrs	r6, r1, #1
 800c6b2:	b083      	sub	sp, #12
 800c6b4:	e9cd 0200 	strd	r0, r2, [sp]
 800c6b8:	f000 8090 	beq.w	800c7dc <arm_radix2_butterfly_inverse_f32+0x130>
 800c6bc:	00f5      	lsls	r5, r6, #3
 800c6be:	4691      	mov	r9, r2
 800c6c0:	1944      	adds	r4, r0, r5
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	1d28      	adds	r0, r5, #4
 800c6c6:	46a0      	mov	r8, r4
 800c6c8:	4410      	add	r0, r2
 800c6ca:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
 800c6ce:	f102 0c04 	add.w	ip, r2, #4
 800c6d2:	464f      	mov	r7, r9
 800c6d4:	ed92 7a01 	vldr	s14, [r2, #4]
 800c6d8:	ed5c 6a01 	vldr	s13, [ip, #-4]
 800c6dc:	ed10 4a01 	vldr	s8, [r0, #-4]
 800c6e0:	edd4 4a01 	vldr	s9, [r4, #4]
 800c6e4:	edd7 7a00 	vldr	s15, [r7]
 800c6e8:	edd7 5a01 	vldr	s11, [r7, #4]
 800c6ec:	ee36 6ac4 	vsub.f32	s12, s13, s8
 800c6f0:	ee77 3a64 	vsub.f32	s7, s14, s9
 800c6f4:	ee27 5a86 	vmul.f32	s10, s15, s12
 800c6f8:	ee76 6a84 	vadd.f32	s13, s13, s8
 800c6fc:	ee25 6a86 	vmul.f32	s12, s11, s12
 800c700:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800c704:	ee65 5aa3 	vmul.f32	s11, s11, s7
 800c708:	ee37 7a24 	vadd.f32	s14, s14, s9
 800c70c:	ed4c 6a01 	vstr	s13, [ip, #-4]
 800c710:	ee75 5a65 	vsub.f32	s11, s10, s11
 800c714:	ed82 7a01 	vstr	s14, [r2, #4]
 800c718:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c71c:	3208      	adds	r2, #8
 800c71e:	4590      	cmp	r8, r2
 800c720:	ed40 5a01 	vstr	s11, [r0, #-4]
 800c724:	4477      	add	r7, lr
 800c726:	edc4 7a01 	vstr	s15, [r4, #4]
 800c72a:	f10c 0c08 	add.w	ip, ip, #8
 800c72e:	f100 0008 	add.w	r0, r0, #8
 800c732:	f104 0408 	add.w	r4, r4, #8
 800c736:	d1cd      	bne.n	800c6d4 <arm_radix2_butterfly_inverse_f32+0x28>
 800c738:	005b      	lsls	r3, r3, #1
 800c73a:	2e02      	cmp	r6, #2
 800c73c:	fa1f fb83 	uxth.w	fp, r3
 800c740:	d94d      	bls.n	800c7de <arm_radix2_butterfly_inverse_f32+0x132>
 800c742:	e9dd 7e00 	ldrd	r7, lr, [sp]
 800c746:	ea4f 0856 	mov.w	r8, r6, lsr #1
 800c74a:	ea4f 0ac8 	mov.w	sl, r8, lsl #3
 800c74e:	ea4f 09cb 	mov.w	r9, fp, lsl #3
 800c752:	f04f 0c00 	mov.w	ip, #0
 800c756:	edde 3a00 	vldr	s7, [lr]
 800c75a:	ed9e 4a01 	vldr	s8, [lr, #4]
 800c75e:	eb0a 0307 	add.w	r3, sl, r7
 800c762:	1d38      	adds	r0, r7, #4
 800c764:	463a      	mov	r2, r7
 800c766:	4664      	mov	r4, ip
 800c768:	ed50 6a01 	vldr	s13, [r0, #-4]
 800c76c:	ed92 7a01 	vldr	s14, [r2, #4]
 800c770:	edd3 4a00 	vldr	s9, [r3]
 800c774:	ed93 5a01 	vldr	s10, [r3, #4]
 800c778:	ee36 6ae4 	vsub.f32	s12, s13, s9
 800c77c:	ee77 7a45 	vsub.f32	s15, s14, s10
 800c780:	ee63 5a86 	vmul.f32	s11, s7, s12
 800c784:	ee24 3a27 	vmul.f32	s6, s8, s15
 800c788:	ee24 6a06 	vmul.f32	s12, s8, s12
 800c78c:	ee63 7aa7 	vmul.f32	s15, s7, s15
 800c790:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c794:	ee37 7a05 	vadd.f32	s14, s14, s10
 800c798:	ee75 5ac3 	vsub.f32	s11, s11, s6
 800c79c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c7a0:	4434      	add	r4, r6
 800c7a2:	42a1      	cmp	r1, r4
 800c7a4:	ed40 6a01 	vstr	s13, [r0, #-4]
 800c7a8:	ed82 7a01 	vstr	s14, [r2, #4]
 800c7ac:	4428      	add	r0, r5
 800c7ae:	edc3 5a00 	vstr	s11, [r3]
 800c7b2:	edc3 7a01 	vstr	s15, [r3, #4]
 800c7b6:	442a      	add	r2, r5
 800c7b8:	442b      	add	r3, r5
 800c7ba:	d8d5      	bhi.n	800c768 <arm_radix2_butterfly_inverse_f32+0xbc>
 800c7bc:	f10c 0c01 	add.w	ip, ip, #1
 800c7c0:	45e0      	cmp	r8, ip
 800c7c2:	44ce      	add	lr, r9
 800c7c4:	f107 0708 	add.w	r7, r7, #8
 800c7c8:	d8c5      	bhi.n	800c756 <arm_radix2_butterfly_inverse_f32+0xaa>
 800c7ca:	4646      	mov	r6, r8
 800c7cc:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800c7d0:	2e02      	cmp	r6, #2
 800c7d2:	fa1f fb8b 	uxth.w	fp, fp
 800c7d6:	d902      	bls.n	800c7de <arm_radix2_butterfly_inverse_f32+0x132>
 800c7d8:	00f5      	lsls	r5, r6, #3
 800c7da:	e7b2      	b.n	800c742 <arm_radix2_butterfly_inverse_f32+0x96>
 800c7dc:	b331      	cbz	r1, 800c82c <arm_radix2_butterfly_inverse_f32+0x180>
 800c7de:	9b00      	ldr	r3, [sp, #0]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	edd3 6a02 	vldr	s13, [r3, #8]
 800c7e6:	ed93 7a00 	vldr	s14, [r3]
 800c7ea:	edd3 5a03 	vldr	s11, [r3, #12]
 800c7ee:	edd3 7a01 	vldr	s15, [r3, #4]
 800c7f2:	ee37 6a26 	vadd.f32	s12, s14, s13
 800c7f6:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c7fa:	ee75 6aa7 	vadd.f32	s13, s11, s15
 800c7fe:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c802:	ee26 6a00 	vmul.f32	s12, s12, s0
 800c806:	ee27 7a00 	vmul.f32	s14, s14, s0
 800c80a:	ee66 6a80 	vmul.f32	s13, s13, s0
 800c80e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c812:	3202      	adds	r2, #2
 800c814:	4291      	cmp	r1, r2
 800c816:	ed83 6a00 	vstr	s12, [r3]
 800c81a:	ed83 7a02 	vstr	s14, [r3, #8]
 800c81e:	edc3 6a01 	vstr	s13, [r3, #4]
 800c822:	edc3 7a03 	vstr	s15, [r3, #12]
 800c826:	f103 0310 	add.w	r3, r3, #16
 800c82a:	d8da      	bhi.n	800c7e2 <arm_radix2_butterfly_inverse_f32+0x136>
 800c82c:	b003      	add	sp, #12
 800c82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c832:	bf00      	nop

0800c834 <arm_cfft_radix2_f32>:
 800c834:	b570      	push	{r4, r5, r6, lr}
 800c836:	4604      	mov	r4, r0
 800c838:	7880      	ldrb	r0, [r0, #2]
 800c83a:	6862      	ldr	r2, [r4, #4]
 800c83c:	89a3      	ldrh	r3, [r4, #12]
 800c83e:	2801      	cmp	r0, #1
 800c840:	460d      	mov	r5, r1
 800c842:	8821      	ldrh	r1, [r4, #0]
 800c844:	d006      	beq.n	800c854 <arm_cfft_radix2_f32+0x20>
 800c846:	4628      	mov	r0, r5
 800c848:	f7ff fe74 	bl	800c534 <arm_radix2_butterfly_f32>
 800c84c:	78e3      	ldrb	r3, [r4, #3]
 800c84e:	2b01      	cmp	r3, #1
 800c850:	d008      	beq.n	800c864 <arm_cfft_radix2_f32+0x30>
 800c852:	bd70      	pop	{r4, r5, r6, pc}
 800c854:	ed94 0a04 	vldr	s0, [r4, #16]
 800c858:	4628      	mov	r0, r5
 800c85a:	f7ff ff27 	bl	800c6ac <arm_radix2_butterfly_inverse_f32>
 800c85e:	78e3      	ldrb	r3, [r4, #3]
 800c860:	2b01      	cmp	r3, #1
 800c862:	d1f6      	bne.n	800c852 <arm_cfft_radix2_f32+0x1e>
 800c864:	4628      	mov	r0, r5
 800c866:	68a3      	ldr	r3, [r4, #8]
 800c868:	89e2      	ldrh	r2, [r4, #14]
 800c86a:	8821      	ldrh	r1, [r4, #0]
 800c86c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c870:	f000 b800 	b.w	800c874 <arm_bitreversal_f32>

0800c874 <arm_bitreversal_f32>:
 800c874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c878:	b085      	sub	sp, #20
 800c87a:	084c      	lsrs	r4, r1, #1
 800c87c:	0052      	lsls	r2, r2, #1
 800c87e:	2100      	movs	r1, #0
 800c880:	9201      	str	r2, [sp, #4]
 800c882:	1ea2      	subs	r2, r4, #2
 800c884:	9402      	str	r4, [sp, #8]
 800c886:	f104 0e01 	add.w	lr, r4, #1
 800c88a:	9203      	str	r2, [sp, #12]
 800c88c:	460c      	mov	r4, r1
 800c88e:	460a      	mov	r2, r1
 800c890:	9d02      	ldr	r5, [sp, #8]
 800c892:	3101      	adds	r1, #1
 800c894:	442a      	add	r2, r5
 800c896:	00c9      	lsls	r1, r1, #3
 800c898:	00d2      	lsls	r2, r2, #3
 800c89a:	1846      	adds	r6, r0, r1
 800c89c:	1885      	adds	r5, r0, r2
 800c89e:	3104      	adds	r1, #4
 800c8a0:	3204      	adds	r2, #4
 800c8a2:	6837      	ldr	r7, [r6, #0]
 800c8a4:	f8d5 c000 	ldr.w	ip, [r5]
 800c8a8:	f8c6 c000 	str.w	ip, [r6]
 800c8ac:	4401      	add	r1, r0
 800c8ae:	4402      	add	r2, r0
 800c8b0:	602f      	str	r7, [r5, #0]
 800c8b2:	3402      	adds	r4, #2
 800c8b4:	680e      	ldr	r6, [r1, #0]
 800c8b6:	f8d2 9000 	ldr.w	r9, [r2]
 800c8ba:	f8c1 9000 	str.w	r9, [r1]
 800c8be:	b2a4      	uxth	r4, r4
 800c8c0:	6016      	str	r6, [r2, #0]
 800c8c2:	eb04 050e 	add.w	r5, r4, lr
 800c8c6:	881a      	ldrh	r2, [r3, #0]
 800c8c8:	00ed      	lsls	r5, r5, #3
 800c8ca:	eb00 0c05 	add.w	ip, r0, r5
 800c8ce:	3504      	adds	r5, #4
 800c8d0:	9500      	str	r5, [sp, #0]
 800c8d2:	eb02 010e 	add.w	r1, r2, lr
 800c8d6:	9d03      	ldr	r5, [sp, #12]
 800c8d8:	00c9      	lsls	r1, r1, #3
 800c8da:	00e7      	lsls	r7, r4, #3
 800c8dc:	00d6      	lsls	r6, r2, #3
 800c8de:	f101 0b04 	add.w	fp, r1, #4
 800c8e2:	eb00 0901 	add.w	r9, r0, r1
 800c8e6:	42ac      	cmp	r4, r5
 800c8e8:	9901      	ldr	r1, [sp, #4]
 800c8ea:	9d00      	ldr	r5, [sp, #0]
 800c8ec:	eb00 0807 	add.w	r8, r0, r7
 800c8f0:	eb00 0a06 	add.w	sl, r0, r6
 800c8f4:	f107 0704 	add.w	r7, r7, #4
 800c8f8:	f106 0604 	add.w	r6, r6, #4
 800c8fc:	440b      	add	r3, r1
 800c8fe:	4407      	add	r7, r0
 800c900:	4406      	add	r6, r0
 800c902:	4621      	mov	r1, r4
 800c904:	4405      	add	r5, r0
 800c906:	4483      	add	fp, r0
 800c908:	d820      	bhi.n	800c94c <arm_bitreversal_f32+0xd8>
 800c90a:	42a2      	cmp	r2, r4
 800c90c:	d9c0      	bls.n	800c890 <arm_bitreversal_f32+0x1c>
 800c90e:	edd8 7a00 	vldr	s15, [r8]
 800c912:	ed9a 7a00 	vldr	s14, [sl]
 800c916:	ed88 7a00 	vstr	s14, [r8]
 800c91a:	edca 7a00 	vstr	s15, [sl]
 800c91e:	f8d7 8000 	ldr.w	r8, [r7]
 800c922:	f8d6 a000 	ldr.w	sl, [r6]
 800c926:	f8c7 a000 	str.w	sl, [r7]
 800c92a:	f8c6 8000 	str.w	r8, [r6]
 800c92e:	f8dc 6000 	ldr.w	r6, [ip]
 800c932:	f8d9 7000 	ldr.w	r7, [r9]
 800c936:	f8cc 7000 	str.w	r7, [ip]
 800c93a:	f8c9 6000 	str.w	r6, [r9]
 800c93e:	682e      	ldr	r6, [r5, #0]
 800c940:	f8db 7000 	ldr.w	r7, [fp]
 800c944:	602f      	str	r7, [r5, #0]
 800c946:	f8cb 6000 	str.w	r6, [fp]
 800c94a:	e7a1      	b.n	800c890 <arm_bitreversal_f32+0x1c>
 800c94c:	b005      	add	sp, #20
 800c94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c952:	bf00      	nop

0800c954 <arm_cmplx_mag_f32>:
 800c954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c958:	ed2d 8b02 	vpush	{d8}
 800c95c:	0897      	lsrs	r7, r2, #2
 800c95e:	b084      	sub	sp, #16
 800c960:	d077      	beq.n	800ca52 <arm_cmplx_mag_f32+0xfe>
 800c962:	f04f 0800 	mov.w	r8, #0
 800c966:	f100 0420 	add.w	r4, r0, #32
 800c96a:	f101 0510 	add.w	r5, r1, #16
 800c96e:	463e      	mov	r6, r7
 800c970:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800c974:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 800c978:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c97c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c980:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c984:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c98c:	f2c0 80c5 	blt.w	800cb1a <arm_cmplx_mag_f32+0x1c6>
 800c990:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c998:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800c99c:	f100 80cb 	bmi.w	800cb36 <arm_cmplx_mag_f32+0x1e2>
 800c9a0:	ed05 8a04 	vstr	s16, [r5, #-16]
 800c9a4:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 800c9a8:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 800c9ac:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c9b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c9b4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c9b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c9bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9c0:	f2c0 80a8 	blt.w	800cb14 <arm_cmplx_mag_f32+0x1c0>
 800c9c4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9cc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800c9d0:	f100 80a8 	bmi.w	800cb24 <arm_cmplx_mag_f32+0x1d0>
 800c9d4:	ed05 8a03 	vstr	s16, [r5, #-12]
 800c9d8:	ed14 0a04 	vldr	s0, [r4, #-16]
 800c9dc:	ed54 7a03 	vldr	s15, [r4, #-12]
 800c9e0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c9e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c9e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c9ec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c9f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9f4:	f2c0 808b 	blt.w	800cb0e <arm_cmplx_mag_f32+0x1ba>
 800c9f8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca00:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ca04:	f100 80a9 	bmi.w	800cb5a <arm_cmplx_mag_f32+0x206>
 800ca08:	ed05 8a02 	vstr	s16, [r5, #-8]
 800ca0c:	ed14 0a02 	vldr	s0, [r4, #-8]
 800ca10:	ed54 7a01 	vldr	s15, [r4, #-4]
 800ca14:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ca18:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ca1c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ca20:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ca24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca28:	db6e      	blt.n	800cb08 <arm_cmplx_mag_f32+0x1b4>
 800ca2a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ca2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca32:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ca36:	f100 8087 	bmi.w	800cb48 <arm_cmplx_mag_f32+0x1f4>
 800ca3a:	ed05 8a01 	vstr	s16, [r5, #-4]
 800ca3e:	3e01      	subs	r6, #1
 800ca40:	f104 0420 	add.w	r4, r4, #32
 800ca44:	f105 0510 	add.w	r5, r5, #16
 800ca48:	d192      	bne.n	800c970 <arm_cmplx_mag_f32+0x1c>
 800ca4a:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800ca4e:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800ca52:	f012 0203 	ands.w	r2, r2, #3
 800ca56:	d052      	beq.n	800cafe <arm_cmplx_mag_f32+0x1aa>
 800ca58:	ed90 0a00 	vldr	s0, [r0]
 800ca5c:	edd0 7a01 	vldr	s15, [r0, #4]
 800ca60:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ca64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ca68:	2300      	movs	r3, #0
 800ca6a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ca6e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ca72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca76:	bfb8      	it	lt
 800ca78:	600b      	strlt	r3, [r1, #0]
 800ca7a:	db08      	blt.n	800ca8e <arm_cmplx_mag_f32+0x13a>
 800ca7c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ca80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca84:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ca88:	d479      	bmi.n	800cb7e <arm_cmplx_mag_f32+0x22a>
 800ca8a:	ed81 8a00 	vstr	s16, [r1]
 800ca8e:	3a01      	subs	r2, #1
 800ca90:	d035      	beq.n	800cafe <arm_cmplx_mag_f32+0x1aa>
 800ca92:	ed90 0a02 	vldr	s0, [r0, #8]
 800ca96:	edd0 7a03 	vldr	s15, [r0, #12]
 800ca9a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ca9e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800caa2:	2300      	movs	r3, #0
 800caa4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800caa8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800caac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cab0:	bfb8      	it	lt
 800cab2:	604b      	strlt	r3, [r1, #4]
 800cab4:	db08      	blt.n	800cac8 <arm_cmplx_mag_f32+0x174>
 800cab6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800caba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cabe:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800cac2:	d453      	bmi.n	800cb6c <arm_cmplx_mag_f32+0x218>
 800cac4:	ed81 8a01 	vstr	s16, [r1, #4]
 800cac8:	2a01      	cmp	r2, #1
 800caca:	d018      	beq.n	800cafe <arm_cmplx_mag_f32+0x1aa>
 800cacc:	ed90 0a04 	vldr	s0, [r0, #16]
 800cad0:	edd0 7a05 	vldr	s15, [r0, #20]
 800cad4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cad8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cadc:	2300      	movs	r3, #0
 800cade:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cae2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caea:	db19      	blt.n	800cb20 <arm_cmplx_mag_f32+0x1cc>
 800caec:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800caf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caf4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800caf8:	d44a      	bmi.n	800cb90 <arm_cmplx_mag_f32+0x23c>
 800cafa:	ed81 8a02 	vstr	s16, [r1, #8]
 800cafe:	b004      	add	sp, #16
 800cb00:	ecbd 8b02 	vpop	{d8}
 800cb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb08:	f845 8c04 	str.w	r8, [r5, #-4]
 800cb0c:	e797      	b.n	800ca3e <arm_cmplx_mag_f32+0xea>
 800cb0e:	f845 8c08 	str.w	r8, [r5, #-8]
 800cb12:	e77b      	b.n	800ca0c <arm_cmplx_mag_f32+0xb8>
 800cb14:	f845 8c0c 	str.w	r8, [r5, #-12]
 800cb18:	e75e      	b.n	800c9d8 <arm_cmplx_mag_f32+0x84>
 800cb1a:	f845 8c10 	str.w	r8, [r5, #-16]
 800cb1e:	e741      	b.n	800c9a4 <arm_cmplx_mag_f32+0x50>
 800cb20:	608b      	str	r3, [r1, #8]
 800cb22:	e7ec      	b.n	800cafe <arm_cmplx_mag_f32+0x1aa>
 800cb24:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800cb28:	9001      	str	r0, [sp, #4]
 800cb2a:	f002 ff69 	bl	800fa00 <sqrtf>
 800cb2e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800cb32:	9801      	ldr	r0, [sp, #4]
 800cb34:	e74e      	b.n	800c9d4 <arm_cmplx_mag_f32+0x80>
 800cb36:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800cb3a:	9001      	str	r0, [sp, #4]
 800cb3c:	f002 ff60 	bl	800fa00 <sqrtf>
 800cb40:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800cb44:	9801      	ldr	r0, [sp, #4]
 800cb46:	e72b      	b.n	800c9a0 <arm_cmplx_mag_f32+0x4c>
 800cb48:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800cb4c:	9001      	str	r0, [sp, #4]
 800cb4e:	f002 ff57 	bl	800fa00 <sqrtf>
 800cb52:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800cb56:	9801      	ldr	r0, [sp, #4]
 800cb58:	e76f      	b.n	800ca3a <arm_cmplx_mag_f32+0xe6>
 800cb5a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800cb5e:	9001      	str	r0, [sp, #4]
 800cb60:	f002 ff4e 	bl	800fa00 <sqrtf>
 800cb64:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800cb68:	9801      	ldr	r0, [sp, #4]
 800cb6a:	e74d      	b.n	800ca08 <arm_cmplx_mag_f32+0xb4>
 800cb6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb70:	9201      	str	r2, [sp, #4]
 800cb72:	f002 ff45 	bl	800fa00 <sqrtf>
 800cb76:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800cb7a:	9903      	ldr	r1, [sp, #12]
 800cb7c:	e7a2      	b.n	800cac4 <arm_cmplx_mag_f32+0x170>
 800cb7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb82:	9201      	str	r2, [sp, #4]
 800cb84:	f002 ff3c 	bl	800fa00 <sqrtf>
 800cb88:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800cb8c:	9903      	ldr	r1, [sp, #12]
 800cb8e:	e77c      	b.n	800ca8a <arm_cmplx_mag_f32+0x136>
 800cb90:	9101      	str	r1, [sp, #4]
 800cb92:	f002 ff35 	bl	800fa00 <sqrtf>
 800cb96:	9901      	ldr	r1, [sp, #4]
 800cb98:	e7af      	b.n	800cafa <arm_cmplx_mag_f32+0x1a6>
 800cb9a:	bf00      	nop

0800cb9c <arm_mult_f32>:
 800cb9c:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800cba0:	b4f0      	push	{r4, r5, r6, r7}
 800cba2:	d033      	beq.n	800cc0c <arm_mult_f32+0x70>
 800cba4:	f100 0610 	add.w	r6, r0, #16
 800cba8:	f101 0510 	add.w	r5, r1, #16
 800cbac:	f102 0410 	add.w	r4, r2, #16
 800cbb0:	4667      	mov	r7, ip
 800cbb2:	ed15 7a04 	vldr	s14, [r5, #-16]
 800cbb6:	ed56 7a04 	vldr	s15, [r6, #-16]
 800cbba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cbbe:	3f01      	subs	r7, #1
 800cbc0:	ed44 7a04 	vstr	s15, [r4, #-16]
 800cbc4:	ed15 7a03 	vldr	s14, [r5, #-12]
 800cbc8:	ed56 7a03 	vldr	s15, [r6, #-12]
 800cbcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cbd0:	f106 0610 	add.w	r6, r6, #16
 800cbd4:	ed44 7a03 	vstr	s15, [r4, #-12]
 800cbd8:	ed15 7a02 	vldr	s14, [r5, #-8]
 800cbdc:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800cbe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cbe4:	f105 0510 	add.w	r5, r5, #16
 800cbe8:	ed44 7a02 	vstr	s15, [r4, #-8]
 800cbec:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800cbf0:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 800cbf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cbf8:	f104 0410 	add.w	r4, r4, #16
 800cbfc:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800cc00:	d1d7      	bne.n	800cbb2 <arm_mult_f32+0x16>
 800cc02:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800cc06:	4420      	add	r0, r4
 800cc08:	4421      	add	r1, r4
 800cc0a:	4422      	add	r2, r4
 800cc0c:	f013 0303 	ands.w	r3, r3, #3
 800cc10:	d01b      	beq.n	800cc4a <arm_mult_f32+0xae>
 800cc12:	edd1 7a00 	vldr	s15, [r1]
 800cc16:	ed90 7a00 	vldr	s14, [r0]
 800cc1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cc1e:	3b01      	subs	r3, #1
 800cc20:	edc2 7a00 	vstr	s15, [r2]
 800cc24:	d011      	beq.n	800cc4a <arm_mult_f32+0xae>
 800cc26:	edd0 7a01 	vldr	s15, [r0, #4]
 800cc2a:	ed91 7a01 	vldr	s14, [r1, #4]
 800cc2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	edc2 7a01 	vstr	s15, [r2, #4]
 800cc38:	d007      	beq.n	800cc4a <arm_mult_f32+0xae>
 800cc3a:	edd0 7a02 	vldr	s15, [r0, #8]
 800cc3e:	ed91 7a02 	vldr	s14, [r1, #8]
 800cc42:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cc46:	edc2 7a02 	vstr	s15, [r2, #8]
 800cc4a:	bcf0      	pop	{r4, r5, r6, r7}
 800cc4c:	4770      	bx	lr
 800cc4e:	bf00      	nop

0800cc50 <__errno>:
 800cc50:	4b01      	ldr	r3, [pc, #4]	; (800cc58 <__errno+0x8>)
 800cc52:	6818      	ldr	r0, [r3, #0]
 800cc54:	4770      	bx	lr
 800cc56:	bf00      	nop
 800cc58:	20000124 	.word	0x20000124

0800cc5c <__libc_init_array>:
 800cc5c:	b570      	push	{r4, r5, r6, lr}
 800cc5e:	4d0d      	ldr	r5, [pc, #52]	; (800cc94 <__libc_init_array+0x38>)
 800cc60:	4c0d      	ldr	r4, [pc, #52]	; (800cc98 <__libc_init_array+0x3c>)
 800cc62:	1b64      	subs	r4, r4, r5
 800cc64:	10a4      	asrs	r4, r4, #2
 800cc66:	2600      	movs	r6, #0
 800cc68:	42a6      	cmp	r6, r4
 800cc6a:	d109      	bne.n	800cc80 <__libc_init_array+0x24>
 800cc6c:	4d0b      	ldr	r5, [pc, #44]	; (800cc9c <__libc_init_array+0x40>)
 800cc6e:	4c0c      	ldr	r4, [pc, #48]	; (800cca0 <__libc_init_array+0x44>)
 800cc70:	f004 fa8e 	bl	8011190 <_init>
 800cc74:	1b64      	subs	r4, r4, r5
 800cc76:	10a4      	asrs	r4, r4, #2
 800cc78:	2600      	movs	r6, #0
 800cc7a:	42a6      	cmp	r6, r4
 800cc7c:	d105      	bne.n	800cc8a <__libc_init_array+0x2e>
 800cc7e:	bd70      	pop	{r4, r5, r6, pc}
 800cc80:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc84:	4798      	blx	r3
 800cc86:	3601      	adds	r6, #1
 800cc88:	e7ee      	b.n	800cc68 <__libc_init_array+0xc>
 800cc8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc8e:	4798      	blx	r3
 800cc90:	3601      	adds	r6, #1
 800cc92:	e7f2      	b.n	800cc7a <__libc_init_array+0x1e>
 800cc94:	0801a450 	.word	0x0801a450
 800cc98:	0801a450 	.word	0x0801a450
 800cc9c:	0801a450 	.word	0x0801a450
 800cca0:	0801a454 	.word	0x0801a454

0800cca4 <memset>:
 800cca4:	4402      	add	r2, r0
 800cca6:	4603      	mov	r3, r0
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d100      	bne.n	800ccae <memset+0xa>
 800ccac:	4770      	bx	lr
 800ccae:	f803 1b01 	strb.w	r1, [r3], #1
 800ccb2:	e7f9      	b.n	800cca8 <memset+0x4>

0800ccb4 <__cvt>:
 800ccb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ccb8:	ec55 4b10 	vmov	r4, r5, d0
 800ccbc:	2d00      	cmp	r5, #0
 800ccbe:	460e      	mov	r6, r1
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	462b      	mov	r3, r5
 800ccc4:	bfbb      	ittet	lt
 800ccc6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ccca:	461d      	movlt	r5, r3
 800cccc:	2300      	movge	r3, #0
 800ccce:	232d      	movlt	r3, #45	; 0x2d
 800ccd0:	700b      	strb	r3, [r1, #0]
 800ccd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ccd4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ccd8:	4691      	mov	r9, r2
 800ccda:	f023 0820 	bic.w	r8, r3, #32
 800ccde:	bfbc      	itt	lt
 800cce0:	4622      	movlt	r2, r4
 800cce2:	4614      	movlt	r4, r2
 800cce4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cce8:	d005      	beq.n	800ccf6 <__cvt+0x42>
 800ccea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ccee:	d100      	bne.n	800ccf2 <__cvt+0x3e>
 800ccf0:	3601      	adds	r6, #1
 800ccf2:	2102      	movs	r1, #2
 800ccf4:	e000      	b.n	800ccf8 <__cvt+0x44>
 800ccf6:	2103      	movs	r1, #3
 800ccf8:	ab03      	add	r3, sp, #12
 800ccfa:	9301      	str	r3, [sp, #4]
 800ccfc:	ab02      	add	r3, sp, #8
 800ccfe:	9300      	str	r3, [sp, #0]
 800cd00:	ec45 4b10 	vmov	d0, r4, r5
 800cd04:	4653      	mov	r3, sl
 800cd06:	4632      	mov	r2, r6
 800cd08:	f000 fdb6 	bl	800d878 <_dtoa_r>
 800cd0c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cd10:	4607      	mov	r7, r0
 800cd12:	d102      	bne.n	800cd1a <__cvt+0x66>
 800cd14:	f019 0f01 	tst.w	r9, #1
 800cd18:	d022      	beq.n	800cd60 <__cvt+0xac>
 800cd1a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cd1e:	eb07 0906 	add.w	r9, r7, r6
 800cd22:	d110      	bne.n	800cd46 <__cvt+0x92>
 800cd24:	783b      	ldrb	r3, [r7, #0]
 800cd26:	2b30      	cmp	r3, #48	; 0x30
 800cd28:	d10a      	bne.n	800cd40 <__cvt+0x8c>
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	4620      	mov	r0, r4
 800cd30:	4629      	mov	r1, r5
 800cd32:	f7f3 fed1 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd36:	b918      	cbnz	r0, 800cd40 <__cvt+0x8c>
 800cd38:	f1c6 0601 	rsb	r6, r6, #1
 800cd3c:	f8ca 6000 	str.w	r6, [sl]
 800cd40:	f8da 3000 	ldr.w	r3, [sl]
 800cd44:	4499      	add	r9, r3
 800cd46:	2200      	movs	r2, #0
 800cd48:	2300      	movs	r3, #0
 800cd4a:	4620      	mov	r0, r4
 800cd4c:	4629      	mov	r1, r5
 800cd4e:	f7f3 fec3 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd52:	b108      	cbz	r0, 800cd58 <__cvt+0xa4>
 800cd54:	f8cd 900c 	str.w	r9, [sp, #12]
 800cd58:	2230      	movs	r2, #48	; 0x30
 800cd5a:	9b03      	ldr	r3, [sp, #12]
 800cd5c:	454b      	cmp	r3, r9
 800cd5e:	d307      	bcc.n	800cd70 <__cvt+0xbc>
 800cd60:	9b03      	ldr	r3, [sp, #12]
 800cd62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd64:	1bdb      	subs	r3, r3, r7
 800cd66:	4638      	mov	r0, r7
 800cd68:	6013      	str	r3, [r2, #0]
 800cd6a:	b004      	add	sp, #16
 800cd6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd70:	1c59      	adds	r1, r3, #1
 800cd72:	9103      	str	r1, [sp, #12]
 800cd74:	701a      	strb	r2, [r3, #0]
 800cd76:	e7f0      	b.n	800cd5a <__cvt+0xa6>

0800cd78 <__exponent>:
 800cd78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	2900      	cmp	r1, #0
 800cd7e:	bfb8      	it	lt
 800cd80:	4249      	neglt	r1, r1
 800cd82:	f803 2b02 	strb.w	r2, [r3], #2
 800cd86:	bfb4      	ite	lt
 800cd88:	222d      	movlt	r2, #45	; 0x2d
 800cd8a:	222b      	movge	r2, #43	; 0x2b
 800cd8c:	2909      	cmp	r1, #9
 800cd8e:	7042      	strb	r2, [r0, #1]
 800cd90:	dd2a      	ble.n	800cde8 <__exponent+0x70>
 800cd92:	f10d 0407 	add.w	r4, sp, #7
 800cd96:	46a4      	mov	ip, r4
 800cd98:	270a      	movs	r7, #10
 800cd9a:	46a6      	mov	lr, r4
 800cd9c:	460a      	mov	r2, r1
 800cd9e:	fb91 f6f7 	sdiv	r6, r1, r7
 800cda2:	fb07 1516 	mls	r5, r7, r6, r1
 800cda6:	3530      	adds	r5, #48	; 0x30
 800cda8:	2a63      	cmp	r2, #99	; 0x63
 800cdaa:	f104 34ff 	add.w	r4, r4, #4294967295
 800cdae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cdb2:	4631      	mov	r1, r6
 800cdb4:	dcf1      	bgt.n	800cd9a <__exponent+0x22>
 800cdb6:	3130      	adds	r1, #48	; 0x30
 800cdb8:	f1ae 0502 	sub.w	r5, lr, #2
 800cdbc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cdc0:	1c44      	adds	r4, r0, #1
 800cdc2:	4629      	mov	r1, r5
 800cdc4:	4561      	cmp	r1, ip
 800cdc6:	d30a      	bcc.n	800cdde <__exponent+0x66>
 800cdc8:	f10d 0209 	add.w	r2, sp, #9
 800cdcc:	eba2 020e 	sub.w	r2, r2, lr
 800cdd0:	4565      	cmp	r5, ip
 800cdd2:	bf88      	it	hi
 800cdd4:	2200      	movhi	r2, #0
 800cdd6:	4413      	add	r3, r2
 800cdd8:	1a18      	subs	r0, r3, r0
 800cdda:	b003      	add	sp, #12
 800cddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdde:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cde2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cde6:	e7ed      	b.n	800cdc4 <__exponent+0x4c>
 800cde8:	2330      	movs	r3, #48	; 0x30
 800cdea:	3130      	adds	r1, #48	; 0x30
 800cdec:	7083      	strb	r3, [r0, #2]
 800cdee:	70c1      	strb	r1, [r0, #3]
 800cdf0:	1d03      	adds	r3, r0, #4
 800cdf2:	e7f1      	b.n	800cdd8 <__exponent+0x60>

0800cdf4 <_printf_float>:
 800cdf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf8:	ed2d 8b02 	vpush	{d8}
 800cdfc:	b08d      	sub	sp, #52	; 0x34
 800cdfe:	460c      	mov	r4, r1
 800ce00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ce04:	4616      	mov	r6, r2
 800ce06:	461f      	mov	r7, r3
 800ce08:	4605      	mov	r5, r0
 800ce0a:	f001 fcd9 	bl	800e7c0 <_localeconv_r>
 800ce0e:	f8d0 a000 	ldr.w	sl, [r0]
 800ce12:	4650      	mov	r0, sl
 800ce14:	f7f3 f9e4 	bl	80001e0 <strlen>
 800ce18:	2300      	movs	r3, #0
 800ce1a:	930a      	str	r3, [sp, #40]	; 0x28
 800ce1c:	6823      	ldr	r3, [r4, #0]
 800ce1e:	9305      	str	r3, [sp, #20]
 800ce20:	f8d8 3000 	ldr.w	r3, [r8]
 800ce24:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ce28:	3307      	adds	r3, #7
 800ce2a:	f023 0307 	bic.w	r3, r3, #7
 800ce2e:	f103 0208 	add.w	r2, r3, #8
 800ce32:	f8c8 2000 	str.w	r2, [r8]
 800ce36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce3a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ce3e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ce42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ce46:	9307      	str	r3, [sp, #28]
 800ce48:	f8cd 8018 	str.w	r8, [sp, #24]
 800ce4c:	ee08 0a10 	vmov	s16, r0
 800ce50:	4b9f      	ldr	r3, [pc, #636]	; (800d0d0 <_printf_float+0x2dc>)
 800ce52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce56:	f04f 32ff 	mov.w	r2, #4294967295
 800ce5a:	f7f3 fe6f 	bl	8000b3c <__aeabi_dcmpun>
 800ce5e:	bb88      	cbnz	r0, 800cec4 <_printf_float+0xd0>
 800ce60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce64:	4b9a      	ldr	r3, [pc, #616]	; (800d0d0 <_printf_float+0x2dc>)
 800ce66:	f04f 32ff 	mov.w	r2, #4294967295
 800ce6a:	f7f3 fe49 	bl	8000b00 <__aeabi_dcmple>
 800ce6e:	bb48      	cbnz	r0, 800cec4 <_printf_float+0xd0>
 800ce70:	2200      	movs	r2, #0
 800ce72:	2300      	movs	r3, #0
 800ce74:	4640      	mov	r0, r8
 800ce76:	4649      	mov	r1, r9
 800ce78:	f7f3 fe38 	bl	8000aec <__aeabi_dcmplt>
 800ce7c:	b110      	cbz	r0, 800ce84 <_printf_float+0x90>
 800ce7e:	232d      	movs	r3, #45	; 0x2d
 800ce80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce84:	4b93      	ldr	r3, [pc, #588]	; (800d0d4 <_printf_float+0x2e0>)
 800ce86:	4894      	ldr	r0, [pc, #592]	; (800d0d8 <_printf_float+0x2e4>)
 800ce88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ce8c:	bf94      	ite	ls
 800ce8e:	4698      	movls	r8, r3
 800ce90:	4680      	movhi	r8, r0
 800ce92:	2303      	movs	r3, #3
 800ce94:	6123      	str	r3, [r4, #16]
 800ce96:	9b05      	ldr	r3, [sp, #20]
 800ce98:	f023 0204 	bic.w	r2, r3, #4
 800ce9c:	6022      	str	r2, [r4, #0]
 800ce9e:	f04f 0900 	mov.w	r9, #0
 800cea2:	9700      	str	r7, [sp, #0]
 800cea4:	4633      	mov	r3, r6
 800cea6:	aa0b      	add	r2, sp, #44	; 0x2c
 800cea8:	4621      	mov	r1, r4
 800ceaa:	4628      	mov	r0, r5
 800ceac:	f000 f9d8 	bl	800d260 <_printf_common>
 800ceb0:	3001      	adds	r0, #1
 800ceb2:	f040 8090 	bne.w	800cfd6 <_printf_float+0x1e2>
 800ceb6:	f04f 30ff 	mov.w	r0, #4294967295
 800ceba:	b00d      	add	sp, #52	; 0x34
 800cebc:	ecbd 8b02 	vpop	{d8}
 800cec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cec4:	4642      	mov	r2, r8
 800cec6:	464b      	mov	r3, r9
 800cec8:	4640      	mov	r0, r8
 800ceca:	4649      	mov	r1, r9
 800cecc:	f7f3 fe36 	bl	8000b3c <__aeabi_dcmpun>
 800ced0:	b140      	cbz	r0, 800cee4 <_printf_float+0xf0>
 800ced2:	464b      	mov	r3, r9
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	bfbc      	itt	lt
 800ced8:	232d      	movlt	r3, #45	; 0x2d
 800ceda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cede:	487f      	ldr	r0, [pc, #508]	; (800d0dc <_printf_float+0x2e8>)
 800cee0:	4b7f      	ldr	r3, [pc, #508]	; (800d0e0 <_printf_float+0x2ec>)
 800cee2:	e7d1      	b.n	800ce88 <_printf_float+0x94>
 800cee4:	6863      	ldr	r3, [r4, #4]
 800cee6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ceea:	9206      	str	r2, [sp, #24]
 800ceec:	1c5a      	adds	r2, r3, #1
 800ceee:	d13f      	bne.n	800cf70 <_printf_float+0x17c>
 800cef0:	2306      	movs	r3, #6
 800cef2:	6063      	str	r3, [r4, #4]
 800cef4:	9b05      	ldr	r3, [sp, #20]
 800cef6:	6861      	ldr	r1, [r4, #4]
 800cef8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cefc:	2300      	movs	r3, #0
 800cefe:	9303      	str	r3, [sp, #12]
 800cf00:	ab0a      	add	r3, sp, #40	; 0x28
 800cf02:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cf06:	ab09      	add	r3, sp, #36	; 0x24
 800cf08:	ec49 8b10 	vmov	d0, r8, r9
 800cf0c:	9300      	str	r3, [sp, #0]
 800cf0e:	6022      	str	r2, [r4, #0]
 800cf10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cf14:	4628      	mov	r0, r5
 800cf16:	f7ff fecd 	bl	800ccb4 <__cvt>
 800cf1a:	9b06      	ldr	r3, [sp, #24]
 800cf1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf1e:	2b47      	cmp	r3, #71	; 0x47
 800cf20:	4680      	mov	r8, r0
 800cf22:	d108      	bne.n	800cf36 <_printf_float+0x142>
 800cf24:	1cc8      	adds	r0, r1, #3
 800cf26:	db02      	blt.n	800cf2e <_printf_float+0x13a>
 800cf28:	6863      	ldr	r3, [r4, #4]
 800cf2a:	4299      	cmp	r1, r3
 800cf2c:	dd41      	ble.n	800cfb2 <_printf_float+0x1be>
 800cf2e:	f1ab 0b02 	sub.w	fp, fp, #2
 800cf32:	fa5f fb8b 	uxtb.w	fp, fp
 800cf36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cf3a:	d820      	bhi.n	800cf7e <_printf_float+0x18a>
 800cf3c:	3901      	subs	r1, #1
 800cf3e:	465a      	mov	r2, fp
 800cf40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cf44:	9109      	str	r1, [sp, #36]	; 0x24
 800cf46:	f7ff ff17 	bl	800cd78 <__exponent>
 800cf4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf4c:	1813      	adds	r3, r2, r0
 800cf4e:	2a01      	cmp	r2, #1
 800cf50:	4681      	mov	r9, r0
 800cf52:	6123      	str	r3, [r4, #16]
 800cf54:	dc02      	bgt.n	800cf5c <_printf_float+0x168>
 800cf56:	6822      	ldr	r2, [r4, #0]
 800cf58:	07d2      	lsls	r2, r2, #31
 800cf5a:	d501      	bpl.n	800cf60 <_printf_float+0x16c>
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	6123      	str	r3, [r4, #16]
 800cf60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d09c      	beq.n	800cea2 <_printf_float+0xae>
 800cf68:	232d      	movs	r3, #45	; 0x2d
 800cf6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf6e:	e798      	b.n	800cea2 <_printf_float+0xae>
 800cf70:	9a06      	ldr	r2, [sp, #24]
 800cf72:	2a47      	cmp	r2, #71	; 0x47
 800cf74:	d1be      	bne.n	800cef4 <_printf_float+0x100>
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d1bc      	bne.n	800cef4 <_printf_float+0x100>
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	e7b9      	b.n	800cef2 <_printf_float+0xfe>
 800cf7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cf82:	d118      	bne.n	800cfb6 <_printf_float+0x1c2>
 800cf84:	2900      	cmp	r1, #0
 800cf86:	6863      	ldr	r3, [r4, #4]
 800cf88:	dd0b      	ble.n	800cfa2 <_printf_float+0x1ae>
 800cf8a:	6121      	str	r1, [r4, #16]
 800cf8c:	b913      	cbnz	r3, 800cf94 <_printf_float+0x1a0>
 800cf8e:	6822      	ldr	r2, [r4, #0]
 800cf90:	07d0      	lsls	r0, r2, #31
 800cf92:	d502      	bpl.n	800cf9a <_printf_float+0x1a6>
 800cf94:	3301      	adds	r3, #1
 800cf96:	440b      	add	r3, r1
 800cf98:	6123      	str	r3, [r4, #16]
 800cf9a:	65a1      	str	r1, [r4, #88]	; 0x58
 800cf9c:	f04f 0900 	mov.w	r9, #0
 800cfa0:	e7de      	b.n	800cf60 <_printf_float+0x16c>
 800cfa2:	b913      	cbnz	r3, 800cfaa <_printf_float+0x1b6>
 800cfa4:	6822      	ldr	r2, [r4, #0]
 800cfa6:	07d2      	lsls	r2, r2, #31
 800cfa8:	d501      	bpl.n	800cfae <_printf_float+0x1ba>
 800cfaa:	3302      	adds	r3, #2
 800cfac:	e7f4      	b.n	800cf98 <_printf_float+0x1a4>
 800cfae:	2301      	movs	r3, #1
 800cfb0:	e7f2      	b.n	800cf98 <_printf_float+0x1a4>
 800cfb2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cfb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfb8:	4299      	cmp	r1, r3
 800cfba:	db05      	blt.n	800cfc8 <_printf_float+0x1d4>
 800cfbc:	6823      	ldr	r3, [r4, #0]
 800cfbe:	6121      	str	r1, [r4, #16]
 800cfc0:	07d8      	lsls	r0, r3, #31
 800cfc2:	d5ea      	bpl.n	800cf9a <_printf_float+0x1a6>
 800cfc4:	1c4b      	adds	r3, r1, #1
 800cfc6:	e7e7      	b.n	800cf98 <_printf_float+0x1a4>
 800cfc8:	2900      	cmp	r1, #0
 800cfca:	bfd4      	ite	le
 800cfcc:	f1c1 0202 	rsble	r2, r1, #2
 800cfd0:	2201      	movgt	r2, #1
 800cfd2:	4413      	add	r3, r2
 800cfd4:	e7e0      	b.n	800cf98 <_printf_float+0x1a4>
 800cfd6:	6823      	ldr	r3, [r4, #0]
 800cfd8:	055a      	lsls	r2, r3, #21
 800cfda:	d407      	bmi.n	800cfec <_printf_float+0x1f8>
 800cfdc:	6923      	ldr	r3, [r4, #16]
 800cfde:	4642      	mov	r2, r8
 800cfe0:	4631      	mov	r1, r6
 800cfe2:	4628      	mov	r0, r5
 800cfe4:	47b8      	blx	r7
 800cfe6:	3001      	adds	r0, #1
 800cfe8:	d12c      	bne.n	800d044 <_printf_float+0x250>
 800cfea:	e764      	b.n	800ceb6 <_printf_float+0xc2>
 800cfec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cff0:	f240 80e0 	bls.w	800d1b4 <_printf_float+0x3c0>
 800cff4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cff8:	2200      	movs	r2, #0
 800cffa:	2300      	movs	r3, #0
 800cffc:	f7f3 fd6c 	bl	8000ad8 <__aeabi_dcmpeq>
 800d000:	2800      	cmp	r0, #0
 800d002:	d034      	beq.n	800d06e <_printf_float+0x27a>
 800d004:	4a37      	ldr	r2, [pc, #220]	; (800d0e4 <_printf_float+0x2f0>)
 800d006:	2301      	movs	r3, #1
 800d008:	4631      	mov	r1, r6
 800d00a:	4628      	mov	r0, r5
 800d00c:	47b8      	blx	r7
 800d00e:	3001      	adds	r0, #1
 800d010:	f43f af51 	beq.w	800ceb6 <_printf_float+0xc2>
 800d014:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d018:	429a      	cmp	r2, r3
 800d01a:	db02      	blt.n	800d022 <_printf_float+0x22e>
 800d01c:	6823      	ldr	r3, [r4, #0]
 800d01e:	07d8      	lsls	r0, r3, #31
 800d020:	d510      	bpl.n	800d044 <_printf_float+0x250>
 800d022:	ee18 3a10 	vmov	r3, s16
 800d026:	4652      	mov	r2, sl
 800d028:	4631      	mov	r1, r6
 800d02a:	4628      	mov	r0, r5
 800d02c:	47b8      	blx	r7
 800d02e:	3001      	adds	r0, #1
 800d030:	f43f af41 	beq.w	800ceb6 <_printf_float+0xc2>
 800d034:	f04f 0800 	mov.w	r8, #0
 800d038:	f104 091a 	add.w	r9, r4, #26
 800d03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d03e:	3b01      	subs	r3, #1
 800d040:	4543      	cmp	r3, r8
 800d042:	dc09      	bgt.n	800d058 <_printf_float+0x264>
 800d044:	6823      	ldr	r3, [r4, #0]
 800d046:	079b      	lsls	r3, r3, #30
 800d048:	f100 8105 	bmi.w	800d256 <_printf_float+0x462>
 800d04c:	68e0      	ldr	r0, [r4, #12]
 800d04e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d050:	4298      	cmp	r0, r3
 800d052:	bfb8      	it	lt
 800d054:	4618      	movlt	r0, r3
 800d056:	e730      	b.n	800ceba <_printf_float+0xc6>
 800d058:	2301      	movs	r3, #1
 800d05a:	464a      	mov	r2, r9
 800d05c:	4631      	mov	r1, r6
 800d05e:	4628      	mov	r0, r5
 800d060:	47b8      	blx	r7
 800d062:	3001      	adds	r0, #1
 800d064:	f43f af27 	beq.w	800ceb6 <_printf_float+0xc2>
 800d068:	f108 0801 	add.w	r8, r8, #1
 800d06c:	e7e6      	b.n	800d03c <_printf_float+0x248>
 800d06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d070:	2b00      	cmp	r3, #0
 800d072:	dc39      	bgt.n	800d0e8 <_printf_float+0x2f4>
 800d074:	4a1b      	ldr	r2, [pc, #108]	; (800d0e4 <_printf_float+0x2f0>)
 800d076:	2301      	movs	r3, #1
 800d078:	4631      	mov	r1, r6
 800d07a:	4628      	mov	r0, r5
 800d07c:	47b8      	blx	r7
 800d07e:	3001      	adds	r0, #1
 800d080:	f43f af19 	beq.w	800ceb6 <_printf_float+0xc2>
 800d084:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d088:	4313      	orrs	r3, r2
 800d08a:	d102      	bne.n	800d092 <_printf_float+0x29e>
 800d08c:	6823      	ldr	r3, [r4, #0]
 800d08e:	07d9      	lsls	r1, r3, #31
 800d090:	d5d8      	bpl.n	800d044 <_printf_float+0x250>
 800d092:	ee18 3a10 	vmov	r3, s16
 800d096:	4652      	mov	r2, sl
 800d098:	4631      	mov	r1, r6
 800d09a:	4628      	mov	r0, r5
 800d09c:	47b8      	blx	r7
 800d09e:	3001      	adds	r0, #1
 800d0a0:	f43f af09 	beq.w	800ceb6 <_printf_float+0xc2>
 800d0a4:	f04f 0900 	mov.w	r9, #0
 800d0a8:	f104 0a1a 	add.w	sl, r4, #26
 800d0ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0ae:	425b      	negs	r3, r3
 800d0b0:	454b      	cmp	r3, r9
 800d0b2:	dc01      	bgt.n	800d0b8 <_printf_float+0x2c4>
 800d0b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0b6:	e792      	b.n	800cfde <_printf_float+0x1ea>
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	4652      	mov	r2, sl
 800d0bc:	4631      	mov	r1, r6
 800d0be:	4628      	mov	r0, r5
 800d0c0:	47b8      	blx	r7
 800d0c2:	3001      	adds	r0, #1
 800d0c4:	f43f aef7 	beq.w	800ceb6 <_printf_float+0xc2>
 800d0c8:	f109 0901 	add.w	r9, r9, #1
 800d0cc:	e7ee      	b.n	800d0ac <_printf_float+0x2b8>
 800d0ce:	bf00      	nop
 800d0d0:	7fefffff 	.word	0x7fefffff
 800d0d4:	08019e70 	.word	0x08019e70
 800d0d8:	08019e74 	.word	0x08019e74
 800d0dc:	08019e7c 	.word	0x08019e7c
 800d0e0:	08019e78 	.word	0x08019e78
 800d0e4:	08019e80 	.word	0x08019e80
 800d0e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	bfa8      	it	ge
 800d0f0:	461a      	movge	r2, r3
 800d0f2:	2a00      	cmp	r2, #0
 800d0f4:	4691      	mov	r9, r2
 800d0f6:	dc37      	bgt.n	800d168 <_printf_float+0x374>
 800d0f8:	f04f 0b00 	mov.w	fp, #0
 800d0fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d100:	f104 021a 	add.w	r2, r4, #26
 800d104:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d106:	9305      	str	r3, [sp, #20]
 800d108:	eba3 0309 	sub.w	r3, r3, r9
 800d10c:	455b      	cmp	r3, fp
 800d10e:	dc33      	bgt.n	800d178 <_printf_float+0x384>
 800d110:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d114:	429a      	cmp	r2, r3
 800d116:	db3b      	blt.n	800d190 <_printf_float+0x39c>
 800d118:	6823      	ldr	r3, [r4, #0]
 800d11a:	07da      	lsls	r2, r3, #31
 800d11c:	d438      	bmi.n	800d190 <_printf_float+0x39c>
 800d11e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d120:	9b05      	ldr	r3, [sp, #20]
 800d122:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d124:	1ad3      	subs	r3, r2, r3
 800d126:	eba2 0901 	sub.w	r9, r2, r1
 800d12a:	4599      	cmp	r9, r3
 800d12c:	bfa8      	it	ge
 800d12e:	4699      	movge	r9, r3
 800d130:	f1b9 0f00 	cmp.w	r9, #0
 800d134:	dc35      	bgt.n	800d1a2 <_printf_float+0x3ae>
 800d136:	f04f 0800 	mov.w	r8, #0
 800d13a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d13e:	f104 0a1a 	add.w	sl, r4, #26
 800d142:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d146:	1a9b      	subs	r3, r3, r2
 800d148:	eba3 0309 	sub.w	r3, r3, r9
 800d14c:	4543      	cmp	r3, r8
 800d14e:	f77f af79 	ble.w	800d044 <_printf_float+0x250>
 800d152:	2301      	movs	r3, #1
 800d154:	4652      	mov	r2, sl
 800d156:	4631      	mov	r1, r6
 800d158:	4628      	mov	r0, r5
 800d15a:	47b8      	blx	r7
 800d15c:	3001      	adds	r0, #1
 800d15e:	f43f aeaa 	beq.w	800ceb6 <_printf_float+0xc2>
 800d162:	f108 0801 	add.w	r8, r8, #1
 800d166:	e7ec      	b.n	800d142 <_printf_float+0x34e>
 800d168:	4613      	mov	r3, r2
 800d16a:	4631      	mov	r1, r6
 800d16c:	4642      	mov	r2, r8
 800d16e:	4628      	mov	r0, r5
 800d170:	47b8      	blx	r7
 800d172:	3001      	adds	r0, #1
 800d174:	d1c0      	bne.n	800d0f8 <_printf_float+0x304>
 800d176:	e69e      	b.n	800ceb6 <_printf_float+0xc2>
 800d178:	2301      	movs	r3, #1
 800d17a:	4631      	mov	r1, r6
 800d17c:	4628      	mov	r0, r5
 800d17e:	9205      	str	r2, [sp, #20]
 800d180:	47b8      	blx	r7
 800d182:	3001      	adds	r0, #1
 800d184:	f43f ae97 	beq.w	800ceb6 <_printf_float+0xc2>
 800d188:	9a05      	ldr	r2, [sp, #20]
 800d18a:	f10b 0b01 	add.w	fp, fp, #1
 800d18e:	e7b9      	b.n	800d104 <_printf_float+0x310>
 800d190:	ee18 3a10 	vmov	r3, s16
 800d194:	4652      	mov	r2, sl
 800d196:	4631      	mov	r1, r6
 800d198:	4628      	mov	r0, r5
 800d19a:	47b8      	blx	r7
 800d19c:	3001      	adds	r0, #1
 800d19e:	d1be      	bne.n	800d11e <_printf_float+0x32a>
 800d1a0:	e689      	b.n	800ceb6 <_printf_float+0xc2>
 800d1a2:	9a05      	ldr	r2, [sp, #20]
 800d1a4:	464b      	mov	r3, r9
 800d1a6:	4442      	add	r2, r8
 800d1a8:	4631      	mov	r1, r6
 800d1aa:	4628      	mov	r0, r5
 800d1ac:	47b8      	blx	r7
 800d1ae:	3001      	adds	r0, #1
 800d1b0:	d1c1      	bne.n	800d136 <_printf_float+0x342>
 800d1b2:	e680      	b.n	800ceb6 <_printf_float+0xc2>
 800d1b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1b6:	2a01      	cmp	r2, #1
 800d1b8:	dc01      	bgt.n	800d1be <_printf_float+0x3ca>
 800d1ba:	07db      	lsls	r3, r3, #31
 800d1bc:	d538      	bpl.n	800d230 <_printf_float+0x43c>
 800d1be:	2301      	movs	r3, #1
 800d1c0:	4642      	mov	r2, r8
 800d1c2:	4631      	mov	r1, r6
 800d1c4:	4628      	mov	r0, r5
 800d1c6:	47b8      	blx	r7
 800d1c8:	3001      	adds	r0, #1
 800d1ca:	f43f ae74 	beq.w	800ceb6 <_printf_float+0xc2>
 800d1ce:	ee18 3a10 	vmov	r3, s16
 800d1d2:	4652      	mov	r2, sl
 800d1d4:	4631      	mov	r1, r6
 800d1d6:	4628      	mov	r0, r5
 800d1d8:	47b8      	blx	r7
 800d1da:	3001      	adds	r0, #1
 800d1dc:	f43f ae6b 	beq.w	800ceb6 <_printf_float+0xc2>
 800d1e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	f7f3 fc76 	bl	8000ad8 <__aeabi_dcmpeq>
 800d1ec:	b9d8      	cbnz	r0, 800d226 <_printf_float+0x432>
 800d1ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1f0:	f108 0201 	add.w	r2, r8, #1
 800d1f4:	3b01      	subs	r3, #1
 800d1f6:	4631      	mov	r1, r6
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	47b8      	blx	r7
 800d1fc:	3001      	adds	r0, #1
 800d1fe:	d10e      	bne.n	800d21e <_printf_float+0x42a>
 800d200:	e659      	b.n	800ceb6 <_printf_float+0xc2>
 800d202:	2301      	movs	r3, #1
 800d204:	4652      	mov	r2, sl
 800d206:	4631      	mov	r1, r6
 800d208:	4628      	mov	r0, r5
 800d20a:	47b8      	blx	r7
 800d20c:	3001      	adds	r0, #1
 800d20e:	f43f ae52 	beq.w	800ceb6 <_printf_float+0xc2>
 800d212:	f108 0801 	add.w	r8, r8, #1
 800d216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d218:	3b01      	subs	r3, #1
 800d21a:	4543      	cmp	r3, r8
 800d21c:	dcf1      	bgt.n	800d202 <_printf_float+0x40e>
 800d21e:	464b      	mov	r3, r9
 800d220:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d224:	e6dc      	b.n	800cfe0 <_printf_float+0x1ec>
 800d226:	f04f 0800 	mov.w	r8, #0
 800d22a:	f104 0a1a 	add.w	sl, r4, #26
 800d22e:	e7f2      	b.n	800d216 <_printf_float+0x422>
 800d230:	2301      	movs	r3, #1
 800d232:	4642      	mov	r2, r8
 800d234:	e7df      	b.n	800d1f6 <_printf_float+0x402>
 800d236:	2301      	movs	r3, #1
 800d238:	464a      	mov	r2, r9
 800d23a:	4631      	mov	r1, r6
 800d23c:	4628      	mov	r0, r5
 800d23e:	47b8      	blx	r7
 800d240:	3001      	adds	r0, #1
 800d242:	f43f ae38 	beq.w	800ceb6 <_printf_float+0xc2>
 800d246:	f108 0801 	add.w	r8, r8, #1
 800d24a:	68e3      	ldr	r3, [r4, #12]
 800d24c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d24e:	1a5b      	subs	r3, r3, r1
 800d250:	4543      	cmp	r3, r8
 800d252:	dcf0      	bgt.n	800d236 <_printf_float+0x442>
 800d254:	e6fa      	b.n	800d04c <_printf_float+0x258>
 800d256:	f04f 0800 	mov.w	r8, #0
 800d25a:	f104 0919 	add.w	r9, r4, #25
 800d25e:	e7f4      	b.n	800d24a <_printf_float+0x456>

0800d260 <_printf_common>:
 800d260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d264:	4616      	mov	r6, r2
 800d266:	4699      	mov	r9, r3
 800d268:	688a      	ldr	r2, [r1, #8]
 800d26a:	690b      	ldr	r3, [r1, #16]
 800d26c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d270:	4293      	cmp	r3, r2
 800d272:	bfb8      	it	lt
 800d274:	4613      	movlt	r3, r2
 800d276:	6033      	str	r3, [r6, #0]
 800d278:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d27c:	4607      	mov	r7, r0
 800d27e:	460c      	mov	r4, r1
 800d280:	b10a      	cbz	r2, 800d286 <_printf_common+0x26>
 800d282:	3301      	adds	r3, #1
 800d284:	6033      	str	r3, [r6, #0]
 800d286:	6823      	ldr	r3, [r4, #0]
 800d288:	0699      	lsls	r1, r3, #26
 800d28a:	bf42      	ittt	mi
 800d28c:	6833      	ldrmi	r3, [r6, #0]
 800d28e:	3302      	addmi	r3, #2
 800d290:	6033      	strmi	r3, [r6, #0]
 800d292:	6825      	ldr	r5, [r4, #0]
 800d294:	f015 0506 	ands.w	r5, r5, #6
 800d298:	d106      	bne.n	800d2a8 <_printf_common+0x48>
 800d29a:	f104 0a19 	add.w	sl, r4, #25
 800d29e:	68e3      	ldr	r3, [r4, #12]
 800d2a0:	6832      	ldr	r2, [r6, #0]
 800d2a2:	1a9b      	subs	r3, r3, r2
 800d2a4:	42ab      	cmp	r3, r5
 800d2a6:	dc26      	bgt.n	800d2f6 <_printf_common+0x96>
 800d2a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d2ac:	1e13      	subs	r3, r2, #0
 800d2ae:	6822      	ldr	r2, [r4, #0]
 800d2b0:	bf18      	it	ne
 800d2b2:	2301      	movne	r3, #1
 800d2b4:	0692      	lsls	r2, r2, #26
 800d2b6:	d42b      	bmi.n	800d310 <_printf_common+0xb0>
 800d2b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d2bc:	4649      	mov	r1, r9
 800d2be:	4638      	mov	r0, r7
 800d2c0:	47c0      	blx	r8
 800d2c2:	3001      	adds	r0, #1
 800d2c4:	d01e      	beq.n	800d304 <_printf_common+0xa4>
 800d2c6:	6823      	ldr	r3, [r4, #0]
 800d2c8:	68e5      	ldr	r5, [r4, #12]
 800d2ca:	6832      	ldr	r2, [r6, #0]
 800d2cc:	f003 0306 	and.w	r3, r3, #6
 800d2d0:	2b04      	cmp	r3, #4
 800d2d2:	bf08      	it	eq
 800d2d4:	1aad      	subeq	r5, r5, r2
 800d2d6:	68a3      	ldr	r3, [r4, #8]
 800d2d8:	6922      	ldr	r2, [r4, #16]
 800d2da:	bf0c      	ite	eq
 800d2dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d2e0:	2500      	movne	r5, #0
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	bfc4      	itt	gt
 800d2e6:	1a9b      	subgt	r3, r3, r2
 800d2e8:	18ed      	addgt	r5, r5, r3
 800d2ea:	2600      	movs	r6, #0
 800d2ec:	341a      	adds	r4, #26
 800d2ee:	42b5      	cmp	r5, r6
 800d2f0:	d11a      	bne.n	800d328 <_printf_common+0xc8>
 800d2f2:	2000      	movs	r0, #0
 800d2f4:	e008      	b.n	800d308 <_printf_common+0xa8>
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	4652      	mov	r2, sl
 800d2fa:	4649      	mov	r1, r9
 800d2fc:	4638      	mov	r0, r7
 800d2fe:	47c0      	blx	r8
 800d300:	3001      	adds	r0, #1
 800d302:	d103      	bne.n	800d30c <_printf_common+0xac>
 800d304:	f04f 30ff 	mov.w	r0, #4294967295
 800d308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d30c:	3501      	adds	r5, #1
 800d30e:	e7c6      	b.n	800d29e <_printf_common+0x3e>
 800d310:	18e1      	adds	r1, r4, r3
 800d312:	1c5a      	adds	r2, r3, #1
 800d314:	2030      	movs	r0, #48	; 0x30
 800d316:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d31a:	4422      	add	r2, r4
 800d31c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d320:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d324:	3302      	adds	r3, #2
 800d326:	e7c7      	b.n	800d2b8 <_printf_common+0x58>
 800d328:	2301      	movs	r3, #1
 800d32a:	4622      	mov	r2, r4
 800d32c:	4649      	mov	r1, r9
 800d32e:	4638      	mov	r0, r7
 800d330:	47c0      	blx	r8
 800d332:	3001      	adds	r0, #1
 800d334:	d0e6      	beq.n	800d304 <_printf_common+0xa4>
 800d336:	3601      	adds	r6, #1
 800d338:	e7d9      	b.n	800d2ee <_printf_common+0x8e>
	...

0800d33c <_printf_i>:
 800d33c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d340:	460c      	mov	r4, r1
 800d342:	4691      	mov	r9, r2
 800d344:	7e27      	ldrb	r7, [r4, #24]
 800d346:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d348:	2f78      	cmp	r7, #120	; 0x78
 800d34a:	4680      	mov	r8, r0
 800d34c:	469a      	mov	sl, r3
 800d34e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d352:	d807      	bhi.n	800d364 <_printf_i+0x28>
 800d354:	2f62      	cmp	r7, #98	; 0x62
 800d356:	d80a      	bhi.n	800d36e <_printf_i+0x32>
 800d358:	2f00      	cmp	r7, #0
 800d35a:	f000 80d8 	beq.w	800d50e <_printf_i+0x1d2>
 800d35e:	2f58      	cmp	r7, #88	; 0x58
 800d360:	f000 80a3 	beq.w	800d4aa <_printf_i+0x16e>
 800d364:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d368:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d36c:	e03a      	b.n	800d3e4 <_printf_i+0xa8>
 800d36e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d372:	2b15      	cmp	r3, #21
 800d374:	d8f6      	bhi.n	800d364 <_printf_i+0x28>
 800d376:	a001      	add	r0, pc, #4	; (adr r0, 800d37c <_printf_i+0x40>)
 800d378:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d37c:	0800d3d5 	.word	0x0800d3d5
 800d380:	0800d3e9 	.word	0x0800d3e9
 800d384:	0800d365 	.word	0x0800d365
 800d388:	0800d365 	.word	0x0800d365
 800d38c:	0800d365 	.word	0x0800d365
 800d390:	0800d365 	.word	0x0800d365
 800d394:	0800d3e9 	.word	0x0800d3e9
 800d398:	0800d365 	.word	0x0800d365
 800d39c:	0800d365 	.word	0x0800d365
 800d3a0:	0800d365 	.word	0x0800d365
 800d3a4:	0800d365 	.word	0x0800d365
 800d3a8:	0800d4f5 	.word	0x0800d4f5
 800d3ac:	0800d419 	.word	0x0800d419
 800d3b0:	0800d4d7 	.word	0x0800d4d7
 800d3b4:	0800d365 	.word	0x0800d365
 800d3b8:	0800d365 	.word	0x0800d365
 800d3bc:	0800d517 	.word	0x0800d517
 800d3c0:	0800d365 	.word	0x0800d365
 800d3c4:	0800d419 	.word	0x0800d419
 800d3c8:	0800d365 	.word	0x0800d365
 800d3cc:	0800d365 	.word	0x0800d365
 800d3d0:	0800d4df 	.word	0x0800d4df
 800d3d4:	680b      	ldr	r3, [r1, #0]
 800d3d6:	1d1a      	adds	r2, r3, #4
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	600a      	str	r2, [r1, #0]
 800d3dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d3e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	e0a3      	b.n	800d530 <_printf_i+0x1f4>
 800d3e8:	6825      	ldr	r5, [r4, #0]
 800d3ea:	6808      	ldr	r0, [r1, #0]
 800d3ec:	062e      	lsls	r6, r5, #24
 800d3ee:	f100 0304 	add.w	r3, r0, #4
 800d3f2:	d50a      	bpl.n	800d40a <_printf_i+0xce>
 800d3f4:	6805      	ldr	r5, [r0, #0]
 800d3f6:	600b      	str	r3, [r1, #0]
 800d3f8:	2d00      	cmp	r5, #0
 800d3fa:	da03      	bge.n	800d404 <_printf_i+0xc8>
 800d3fc:	232d      	movs	r3, #45	; 0x2d
 800d3fe:	426d      	negs	r5, r5
 800d400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d404:	485e      	ldr	r0, [pc, #376]	; (800d580 <_printf_i+0x244>)
 800d406:	230a      	movs	r3, #10
 800d408:	e019      	b.n	800d43e <_printf_i+0x102>
 800d40a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d40e:	6805      	ldr	r5, [r0, #0]
 800d410:	600b      	str	r3, [r1, #0]
 800d412:	bf18      	it	ne
 800d414:	b22d      	sxthne	r5, r5
 800d416:	e7ef      	b.n	800d3f8 <_printf_i+0xbc>
 800d418:	680b      	ldr	r3, [r1, #0]
 800d41a:	6825      	ldr	r5, [r4, #0]
 800d41c:	1d18      	adds	r0, r3, #4
 800d41e:	6008      	str	r0, [r1, #0]
 800d420:	0628      	lsls	r0, r5, #24
 800d422:	d501      	bpl.n	800d428 <_printf_i+0xec>
 800d424:	681d      	ldr	r5, [r3, #0]
 800d426:	e002      	b.n	800d42e <_printf_i+0xf2>
 800d428:	0669      	lsls	r1, r5, #25
 800d42a:	d5fb      	bpl.n	800d424 <_printf_i+0xe8>
 800d42c:	881d      	ldrh	r5, [r3, #0]
 800d42e:	4854      	ldr	r0, [pc, #336]	; (800d580 <_printf_i+0x244>)
 800d430:	2f6f      	cmp	r7, #111	; 0x6f
 800d432:	bf0c      	ite	eq
 800d434:	2308      	moveq	r3, #8
 800d436:	230a      	movne	r3, #10
 800d438:	2100      	movs	r1, #0
 800d43a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d43e:	6866      	ldr	r6, [r4, #4]
 800d440:	60a6      	str	r6, [r4, #8]
 800d442:	2e00      	cmp	r6, #0
 800d444:	bfa2      	ittt	ge
 800d446:	6821      	ldrge	r1, [r4, #0]
 800d448:	f021 0104 	bicge.w	r1, r1, #4
 800d44c:	6021      	strge	r1, [r4, #0]
 800d44e:	b90d      	cbnz	r5, 800d454 <_printf_i+0x118>
 800d450:	2e00      	cmp	r6, #0
 800d452:	d04d      	beq.n	800d4f0 <_printf_i+0x1b4>
 800d454:	4616      	mov	r6, r2
 800d456:	fbb5 f1f3 	udiv	r1, r5, r3
 800d45a:	fb03 5711 	mls	r7, r3, r1, r5
 800d45e:	5dc7      	ldrb	r7, [r0, r7]
 800d460:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d464:	462f      	mov	r7, r5
 800d466:	42bb      	cmp	r3, r7
 800d468:	460d      	mov	r5, r1
 800d46a:	d9f4      	bls.n	800d456 <_printf_i+0x11a>
 800d46c:	2b08      	cmp	r3, #8
 800d46e:	d10b      	bne.n	800d488 <_printf_i+0x14c>
 800d470:	6823      	ldr	r3, [r4, #0]
 800d472:	07df      	lsls	r7, r3, #31
 800d474:	d508      	bpl.n	800d488 <_printf_i+0x14c>
 800d476:	6923      	ldr	r3, [r4, #16]
 800d478:	6861      	ldr	r1, [r4, #4]
 800d47a:	4299      	cmp	r1, r3
 800d47c:	bfde      	ittt	le
 800d47e:	2330      	movle	r3, #48	; 0x30
 800d480:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d484:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d488:	1b92      	subs	r2, r2, r6
 800d48a:	6122      	str	r2, [r4, #16]
 800d48c:	f8cd a000 	str.w	sl, [sp]
 800d490:	464b      	mov	r3, r9
 800d492:	aa03      	add	r2, sp, #12
 800d494:	4621      	mov	r1, r4
 800d496:	4640      	mov	r0, r8
 800d498:	f7ff fee2 	bl	800d260 <_printf_common>
 800d49c:	3001      	adds	r0, #1
 800d49e:	d14c      	bne.n	800d53a <_printf_i+0x1fe>
 800d4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4a4:	b004      	add	sp, #16
 800d4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4aa:	4835      	ldr	r0, [pc, #212]	; (800d580 <_printf_i+0x244>)
 800d4ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d4b0:	6823      	ldr	r3, [r4, #0]
 800d4b2:	680e      	ldr	r6, [r1, #0]
 800d4b4:	061f      	lsls	r7, r3, #24
 800d4b6:	f856 5b04 	ldr.w	r5, [r6], #4
 800d4ba:	600e      	str	r6, [r1, #0]
 800d4bc:	d514      	bpl.n	800d4e8 <_printf_i+0x1ac>
 800d4be:	07d9      	lsls	r1, r3, #31
 800d4c0:	bf44      	itt	mi
 800d4c2:	f043 0320 	orrmi.w	r3, r3, #32
 800d4c6:	6023      	strmi	r3, [r4, #0]
 800d4c8:	b91d      	cbnz	r5, 800d4d2 <_printf_i+0x196>
 800d4ca:	6823      	ldr	r3, [r4, #0]
 800d4cc:	f023 0320 	bic.w	r3, r3, #32
 800d4d0:	6023      	str	r3, [r4, #0]
 800d4d2:	2310      	movs	r3, #16
 800d4d4:	e7b0      	b.n	800d438 <_printf_i+0xfc>
 800d4d6:	6823      	ldr	r3, [r4, #0]
 800d4d8:	f043 0320 	orr.w	r3, r3, #32
 800d4dc:	6023      	str	r3, [r4, #0]
 800d4de:	2378      	movs	r3, #120	; 0x78
 800d4e0:	4828      	ldr	r0, [pc, #160]	; (800d584 <_printf_i+0x248>)
 800d4e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d4e6:	e7e3      	b.n	800d4b0 <_printf_i+0x174>
 800d4e8:	065e      	lsls	r6, r3, #25
 800d4ea:	bf48      	it	mi
 800d4ec:	b2ad      	uxthmi	r5, r5
 800d4ee:	e7e6      	b.n	800d4be <_printf_i+0x182>
 800d4f0:	4616      	mov	r6, r2
 800d4f2:	e7bb      	b.n	800d46c <_printf_i+0x130>
 800d4f4:	680b      	ldr	r3, [r1, #0]
 800d4f6:	6826      	ldr	r6, [r4, #0]
 800d4f8:	6960      	ldr	r0, [r4, #20]
 800d4fa:	1d1d      	adds	r5, r3, #4
 800d4fc:	600d      	str	r5, [r1, #0]
 800d4fe:	0635      	lsls	r5, r6, #24
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	d501      	bpl.n	800d508 <_printf_i+0x1cc>
 800d504:	6018      	str	r0, [r3, #0]
 800d506:	e002      	b.n	800d50e <_printf_i+0x1d2>
 800d508:	0671      	lsls	r1, r6, #25
 800d50a:	d5fb      	bpl.n	800d504 <_printf_i+0x1c8>
 800d50c:	8018      	strh	r0, [r3, #0]
 800d50e:	2300      	movs	r3, #0
 800d510:	6123      	str	r3, [r4, #16]
 800d512:	4616      	mov	r6, r2
 800d514:	e7ba      	b.n	800d48c <_printf_i+0x150>
 800d516:	680b      	ldr	r3, [r1, #0]
 800d518:	1d1a      	adds	r2, r3, #4
 800d51a:	600a      	str	r2, [r1, #0]
 800d51c:	681e      	ldr	r6, [r3, #0]
 800d51e:	6862      	ldr	r2, [r4, #4]
 800d520:	2100      	movs	r1, #0
 800d522:	4630      	mov	r0, r6
 800d524:	f7f2 fe64 	bl	80001f0 <memchr>
 800d528:	b108      	cbz	r0, 800d52e <_printf_i+0x1f2>
 800d52a:	1b80      	subs	r0, r0, r6
 800d52c:	6060      	str	r0, [r4, #4]
 800d52e:	6863      	ldr	r3, [r4, #4]
 800d530:	6123      	str	r3, [r4, #16]
 800d532:	2300      	movs	r3, #0
 800d534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d538:	e7a8      	b.n	800d48c <_printf_i+0x150>
 800d53a:	6923      	ldr	r3, [r4, #16]
 800d53c:	4632      	mov	r2, r6
 800d53e:	4649      	mov	r1, r9
 800d540:	4640      	mov	r0, r8
 800d542:	47d0      	blx	sl
 800d544:	3001      	adds	r0, #1
 800d546:	d0ab      	beq.n	800d4a0 <_printf_i+0x164>
 800d548:	6823      	ldr	r3, [r4, #0]
 800d54a:	079b      	lsls	r3, r3, #30
 800d54c:	d413      	bmi.n	800d576 <_printf_i+0x23a>
 800d54e:	68e0      	ldr	r0, [r4, #12]
 800d550:	9b03      	ldr	r3, [sp, #12]
 800d552:	4298      	cmp	r0, r3
 800d554:	bfb8      	it	lt
 800d556:	4618      	movlt	r0, r3
 800d558:	e7a4      	b.n	800d4a4 <_printf_i+0x168>
 800d55a:	2301      	movs	r3, #1
 800d55c:	4632      	mov	r2, r6
 800d55e:	4649      	mov	r1, r9
 800d560:	4640      	mov	r0, r8
 800d562:	47d0      	blx	sl
 800d564:	3001      	adds	r0, #1
 800d566:	d09b      	beq.n	800d4a0 <_printf_i+0x164>
 800d568:	3501      	adds	r5, #1
 800d56a:	68e3      	ldr	r3, [r4, #12]
 800d56c:	9903      	ldr	r1, [sp, #12]
 800d56e:	1a5b      	subs	r3, r3, r1
 800d570:	42ab      	cmp	r3, r5
 800d572:	dcf2      	bgt.n	800d55a <_printf_i+0x21e>
 800d574:	e7eb      	b.n	800d54e <_printf_i+0x212>
 800d576:	2500      	movs	r5, #0
 800d578:	f104 0619 	add.w	r6, r4, #25
 800d57c:	e7f5      	b.n	800d56a <_printf_i+0x22e>
 800d57e:	bf00      	nop
 800d580:	08019e82 	.word	0x08019e82
 800d584:	08019e93 	.word	0x08019e93

0800d588 <setvbuf>:
 800d588:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d58c:	461d      	mov	r5, r3
 800d58e:	4b5d      	ldr	r3, [pc, #372]	; (800d704 <setvbuf+0x17c>)
 800d590:	681f      	ldr	r7, [r3, #0]
 800d592:	4604      	mov	r4, r0
 800d594:	460e      	mov	r6, r1
 800d596:	4690      	mov	r8, r2
 800d598:	b127      	cbz	r7, 800d5a4 <setvbuf+0x1c>
 800d59a:	69bb      	ldr	r3, [r7, #24]
 800d59c:	b913      	cbnz	r3, 800d5a4 <setvbuf+0x1c>
 800d59e:	4638      	mov	r0, r7
 800d5a0:	f001 f870 	bl	800e684 <__sinit>
 800d5a4:	4b58      	ldr	r3, [pc, #352]	; (800d708 <setvbuf+0x180>)
 800d5a6:	429c      	cmp	r4, r3
 800d5a8:	d167      	bne.n	800d67a <setvbuf+0xf2>
 800d5aa:	687c      	ldr	r4, [r7, #4]
 800d5ac:	f1b8 0f02 	cmp.w	r8, #2
 800d5b0:	d006      	beq.n	800d5c0 <setvbuf+0x38>
 800d5b2:	f1b8 0f01 	cmp.w	r8, #1
 800d5b6:	f200 809f 	bhi.w	800d6f8 <setvbuf+0x170>
 800d5ba:	2d00      	cmp	r5, #0
 800d5bc:	f2c0 809c 	blt.w	800d6f8 <setvbuf+0x170>
 800d5c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5c2:	07db      	lsls	r3, r3, #31
 800d5c4:	d405      	bmi.n	800d5d2 <setvbuf+0x4a>
 800d5c6:	89a3      	ldrh	r3, [r4, #12]
 800d5c8:	0598      	lsls	r0, r3, #22
 800d5ca:	d402      	bmi.n	800d5d2 <setvbuf+0x4a>
 800d5cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5ce:	f001 f8fc 	bl	800e7ca <__retarget_lock_acquire_recursive>
 800d5d2:	4621      	mov	r1, r4
 800d5d4:	4638      	mov	r0, r7
 800d5d6:	f000 ffc1 	bl	800e55c <_fflush_r>
 800d5da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5dc:	b141      	cbz	r1, 800d5f0 <setvbuf+0x68>
 800d5de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5e2:	4299      	cmp	r1, r3
 800d5e4:	d002      	beq.n	800d5ec <setvbuf+0x64>
 800d5e6:	4638      	mov	r0, r7
 800d5e8:	f001 fcfa 	bl	800efe0 <_free_r>
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	6363      	str	r3, [r4, #52]	; 0x34
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	61a3      	str	r3, [r4, #24]
 800d5f4:	6063      	str	r3, [r4, #4]
 800d5f6:	89a3      	ldrh	r3, [r4, #12]
 800d5f8:	0619      	lsls	r1, r3, #24
 800d5fa:	d503      	bpl.n	800d604 <setvbuf+0x7c>
 800d5fc:	6921      	ldr	r1, [r4, #16]
 800d5fe:	4638      	mov	r0, r7
 800d600:	f001 fcee 	bl	800efe0 <_free_r>
 800d604:	89a3      	ldrh	r3, [r4, #12]
 800d606:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800d60a:	f023 0303 	bic.w	r3, r3, #3
 800d60e:	f1b8 0f02 	cmp.w	r8, #2
 800d612:	81a3      	strh	r3, [r4, #12]
 800d614:	d06c      	beq.n	800d6f0 <setvbuf+0x168>
 800d616:	ab01      	add	r3, sp, #4
 800d618:	466a      	mov	r2, sp
 800d61a:	4621      	mov	r1, r4
 800d61c:	4638      	mov	r0, r7
 800d61e:	f001 f8d6 	bl	800e7ce <__swhatbuf_r>
 800d622:	89a3      	ldrh	r3, [r4, #12]
 800d624:	4318      	orrs	r0, r3
 800d626:	81a0      	strh	r0, [r4, #12]
 800d628:	2d00      	cmp	r5, #0
 800d62a:	d130      	bne.n	800d68e <setvbuf+0x106>
 800d62c:	9d00      	ldr	r5, [sp, #0]
 800d62e:	4628      	mov	r0, r5
 800d630:	f001 f932 	bl	800e898 <malloc>
 800d634:	4606      	mov	r6, r0
 800d636:	2800      	cmp	r0, #0
 800d638:	d155      	bne.n	800d6e6 <setvbuf+0x15e>
 800d63a:	f8dd 9000 	ldr.w	r9, [sp]
 800d63e:	45a9      	cmp	r9, r5
 800d640:	d14a      	bne.n	800d6d8 <setvbuf+0x150>
 800d642:	f04f 35ff 	mov.w	r5, #4294967295
 800d646:	2200      	movs	r2, #0
 800d648:	60a2      	str	r2, [r4, #8]
 800d64a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800d64e:	6022      	str	r2, [r4, #0]
 800d650:	6122      	str	r2, [r4, #16]
 800d652:	2201      	movs	r2, #1
 800d654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d658:	6162      	str	r2, [r4, #20]
 800d65a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d65c:	f043 0302 	orr.w	r3, r3, #2
 800d660:	07d2      	lsls	r2, r2, #31
 800d662:	81a3      	strh	r3, [r4, #12]
 800d664:	d405      	bmi.n	800d672 <setvbuf+0xea>
 800d666:	f413 7f00 	tst.w	r3, #512	; 0x200
 800d66a:	d102      	bne.n	800d672 <setvbuf+0xea>
 800d66c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d66e:	f001 f8ad 	bl	800e7cc <__retarget_lock_release_recursive>
 800d672:	4628      	mov	r0, r5
 800d674:	b003      	add	sp, #12
 800d676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d67a:	4b24      	ldr	r3, [pc, #144]	; (800d70c <setvbuf+0x184>)
 800d67c:	429c      	cmp	r4, r3
 800d67e:	d101      	bne.n	800d684 <setvbuf+0xfc>
 800d680:	68bc      	ldr	r4, [r7, #8]
 800d682:	e793      	b.n	800d5ac <setvbuf+0x24>
 800d684:	4b22      	ldr	r3, [pc, #136]	; (800d710 <setvbuf+0x188>)
 800d686:	429c      	cmp	r4, r3
 800d688:	bf08      	it	eq
 800d68a:	68fc      	ldreq	r4, [r7, #12]
 800d68c:	e78e      	b.n	800d5ac <setvbuf+0x24>
 800d68e:	2e00      	cmp	r6, #0
 800d690:	d0cd      	beq.n	800d62e <setvbuf+0xa6>
 800d692:	69bb      	ldr	r3, [r7, #24]
 800d694:	b913      	cbnz	r3, 800d69c <setvbuf+0x114>
 800d696:	4638      	mov	r0, r7
 800d698:	f000 fff4 	bl	800e684 <__sinit>
 800d69c:	f1b8 0f01 	cmp.w	r8, #1
 800d6a0:	bf08      	it	eq
 800d6a2:	89a3      	ldrheq	r3, [r4, #12]
 800d6a4:	6026      	str	r6, [r4, #0]
 800d6a6:	bf04      	itt	eq
 800d6a8:	f043 0301 	orreq.w	r3, r3, #1
 800d6ac:	81a3      	strheq	r3, [r4, #12]
 800d6ae:	89a2      	ldrh	r2, [r4, #12]
 800d6b0:	f012 0308 	ands.w	r3, r2, #8
 800d6b4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800d6b8:	d01c      	beq.n	800d6f4 <setvbuf+0x16c>
 800d6ba:	07d3      	lsls	r3, r2, #31
 800d6bc:	bf41      	itttt	mi
 800d6be:	2300      	movmi	r3, #0
 800d6c0:	426d      	negmi	r5, r5
 800d6c2:	60a3      	strmi	r3, [r4, #8]
 800d6c4:	61a5      	strmi	r5, [r4, #24]
 800d6c6:	bf58      	it	pl
 800d6c8:	60a5      	strpl	r5, [r4, #8]
 800d6ca:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800d6cc:	f015 0501 	ands.w	r5, r5, #1
 800d6d0:	d115      	bne.n	800d6fe <setvbuf+0x176>
 800d6d2:	f412 7f00 	tst.w	r2, #512	; 0x200
 800d6d6:	e7c8      	b.n	800d66a <setvbuf+0xe2>
 800d6d8:	4648      	mov	r0, r9
 800d6da:	f001 f8dd 	bl	800e898 <malloc>
 800d6de:	4606      	mov	r6, r0
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	d0ae      	beq.n	800d642 <setvbuf+0xba>
 800d6e4:	464d      	mov	r5, r9
 800d6e6:	89a3      	ldrh	r3, [r4, #12]
 800d6e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6ec:	81a3      	strh	r3, [r4, #12]
 800d6ee:	e7d0      	b.n	800d692 <setvbuf+0x10a>
 800d6f0:	2500      	movs	r5, #0
 800d6f2:	e7a8      	b.n	800d646 <setvbuf+0xbe>
 800d6f4:	60a3      	str	r3, [r4, #8]
 800d6f6:	e7e8      	b.n	800d6ca <setvbuf+0x142>
 800d6f8:	f04f 35ff 	mov.w	r5, #4294967295
 800d6fc:	e7b9      	b.n	800d672 <setvbuf+0xea>
 800d6fe:	2500      	movs	r5, #0
 800d700:	e7b7      	b.n	800d672 <setvbuf+0xea>
 800d702:	bf00      	nop
 800d704:	20000124 	.word	0x20000124
 800d708:	08019f58 	.word	0x08019f58
 800d70c:	08019f78 	.word	0x08019f78
 800d710:	08019f38 	.word	0x08019f38

0800d714 <strchr>:
 800d714:	b2c9      	uxtb	r1, r1
 800d716:	4603      	mov	r3, r0
 800d718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d71c:	b11a      	cbz	r2, 800d726 <strchr+0x12>
 800d71e:	428a      	cmp	r2, r1
 800d720:	d1f9      	bne.n	800d716 <strchr+0x2>
 800d722:	4618      	mov	r0, r3
 800d724:	4770      	bx	lr
 800d726:	2900      	cmp	r1, #0
 800d728:	bf18      	it	ne
 800d72a:	2300      	movne	r3, #0
 800d72c:	e7f9      	b.n	800d722 <strchr+0xe>

0800d72e <strcpy>:
 800d72e:	4603      	mov	r3, r0
 800d730:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d734:	f803 2b01 	strb.w	r2, [r3], #1
 800d738:	2a00      	cmp	r2, #0
 800d73a:	d1f9      	bne.n	800d730 <strcpy+0x2>
 800d73c:	4770      	bx	lr

0800d73e <strncmp>:
 800d73e:	b510      	push	{r4, lr}
 800d740:	b16a      	cbz	r2, 800d75e <strncmp+0x20>
 800d742:	3901      	subs	r1, #1
 800d744:	1884      	adds	r4, r0, r2
 800d746:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d74a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d74e:	4293      	cmp	r3, r2
 800d750:	d103      	bne.n	800d75a <strncmp+0x1c>
 800d752:	42a0      	cmp	r0, r4
 800d754:	d001      	beq.n	800d75a <strncmp+0x1c>
 800d756:	2b00      	cmp	r3, #0
 800d758:	d1f5      	bne.n	800d746 <strncmp+0x8>
 800d75a:	1a98      	subs	r0, r3, r2
 800d75c:	bd10      	pop	{r4, pc}
 800d75e:	4610      	mov	r0, r2
 800d760:	e7fc      	b.n	800d75c <strncmp+0x1e>

0800d762 <quorem>:
 800d762:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d766:	6903      	ldr	r3, [r0, #16]
 800d768:	690c      	ldr	r4, [r1, #16]
 800d76a:	42a3      	cmp	r3, r4
 800d76c:	4607      	mov	r7, r0
 800d76e:	f2c0 8081 	blt.w	800d874 <quorem+0x112>
 800d772:	3c01      	subs	r4, #1
 800d774:	f101 0814 	add.w	r8, r1, #20
 800d778:	f100 0514 	add.w	r5, r0, #20
 800d77c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d780:	9301      	str	r3, [sp, #4]
 800d782:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d786:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d78a:	3301      	adds	r3, #1
 800d78c:	429a      	cmp	r2, r3
 800d78e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d792:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d796:	fbb2 f6f3 	udiv	r6, r2, r3
 800d79a:	d331      	bcc.n	800d800 <quorem+0x9e>
 800d79c:	f04f 0e00 	mov.w	lr, #0
 800d7a0:	4640      	mov	r0, r8
 800d7a2:	46ac      	mov	ip, r5
 800d7a4:	46f2      	mov	sl, lr
 800d7a6:	f850 2b04 	ldr.w	r2, [r0], #4
 800d7aa:	b293      	uxth	r3, r2
 800d7ac:	fb06 e303 	mla	r3, r6, r3, lr
 800d7b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	ebaa 0303 	sub.w	r3, sl, r3
 800d7ba:	0c12      	lsrs	r2, r2, #16
 800d7bc:	f8dc a000 	ldr.w	sl, [ip]
 800d7c0:	fb06 e202 	mla	r2, r6, r2, lr
 800d7c4:	fa13 f38a 	uxtah	r3, r3, sl
 800d7c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d7cc:	fa1f fa82 	uxth.w	sl, r2
 800d7d0:	f8dc 2000 	ldr.w	r2, [ip]
 800d7d4:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d7d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d7dc:	b29b      	uxth	r3, r3
 800d7de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d7e2:	4581      	cmp	r9, r0
 800d7e4:	f84c 3b04 	str.w	r3, [ip], #4
 800d7e8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d7ec:	d2db      	bcs.n	800d7a6 <quorem+0x44>
 800d7ee:	f855 300b 	ldr.w	r3, [r5, fp]
 800d7f2:	b92b      	cbnz	r3, 800d800 <quorem+0x9e>
 800d7f4:	9b01      	ldr	r3, [sp, #4]
 800d7f6:	3b04      	subs	r3, #4
 800d7f8:	429d      	cmp	r5, r3
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	d32e      	bcc.n	800d85c <quorem+0xfa>
 800d7fe:	613c      	str	r4, [r7, #16]
 800d800:	4638      	mov	r0, r7
 800d802:	f001 fadd 	bl	800edc0 <__mcmp>
 800d806:	2800      	cmp	r0, #0
 800d808:	db24      	blt.n	800d854 <quorem+0xf2>
 800d80a:	3601      	adds	r6, #1
 800d80c:	4628      	mov	r0, r5
 800d80e:	f04f 0c00 	mov.w	ip, #0
 800d812:	f858 2b04 	ldr.w	r2, [r8], #4
 800d816:	f8d0 e000 	ldr.w	lr, [r0]
 800d81a:	b293      	uxth	r3, r2
 800d81c:	ebac 0303 	sub.w	r3, ip, r3
 800d820:	0c12      	lsrs	r2, r2, #16
 800d822:	fa13 f38e 	uxtah	r3, r3, lr
 800d826:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d82a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d82e:	b29b      	uxth	r3, r3
 800d830:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d834:	45c1      	cmp	r9, r8
 800d836:	f840 3b04 	str.w	r3, [r0], #4
 800d83a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d83e:	d2e8      	bcs.n	800d812 <quorem+0xb0>
 800d840:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d844:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d848:	b922      	cbnz	r2, 800d854 <quorem+0xf2>
 800d84a:	3b04      	subs	r3, #4
 800d84c:	429d      	cmp	r5, r3
 800d84e:	461a      	mov	r2, r3
 800d850:	d30a      	bcc.n	800d868 <quorem+0x106>
 800d852:	613c      	str	r4, [r7, #16]
 800d854:	4630      	mov	r0, r6
 800d856:	b003      	add	sp, #12
 800d858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d85c:	6812      	ldr	r2, [r2, #0]
 800d85e:	3b04      	subs	r3, #4
 800d860:	2a00      	cmp	r2, #0
 800d862:	d1cc      	bne.n	800d7fe <quorem+0x9c>
 800d864:	3c01      	subs	r4, #1
 800d866:	e7c7      	b.n	800d7f8 <quorem+0x96>
 800d868:	6812      	ldr	r2, [r2, #0]
 800d86a:	3b04      	subs	r3, #4
 800d86c:	2a00      	cmp	r2, #0
 800d86e:	d1f0      	bne.n	800d852 <quorem+0xf0>
 800d870:	3c01      	subs	r4, #1
 800d872:	e7eb      	b.n	800d84c <quorem+0xea>
 800d874:	2000      	movs	r0, #0
 800d876:	e7ee      	b.n	800d856 <quorem+0xf4>

0800d878 <_dtoa_r>:
 800d878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d87c:	ed2d 8b02 	vpush	{d8}
 800d880:	ec57 6b10 	vmov	r6, r7, d0
 800d884:	b095      	sub	sp, #84	; 0x54
 800d886:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d888:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d88c:	9105      	str	r1, [sp, #20]
 800d88e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d892:	4604      	mov	r4, r0
 800d894:	9209      	str	r2, [sp, #36]	; 0x24
 800d896:	930f      	str	r3, [sp, #60]	; 0x3c
 800d898:	b975      	cbnz	r5, 800d8b8 <_dtoa_r+0x40>
 800d89a:	2010      	movs	r0, #16
 800d89c:	f000 fffc 	bl	800e898 <malloc>
 800d8a0:	4602      	mov	r2, r0
 800d8a2:	6260      	str	r0, [r4, #36]	; 0x24
 800d8a4:	b920      	cbnz	r0, 800d8b0 <_dtoa_r+0x38>
 800d8a6:	4bb2      	ldr	r3, [pc, #712]	; (800db70 <_dtoa_r+0x2f8>)
 800d8a8:	21ea      	movs	r1, #234	; 0xea
 800d8aa:	48b2      	ldr	r0, [pc, #712]	; (800db74 <_dtoa_r+0x2fc>)
 800d8ac:	f001 fca8 	bl	800f200 <__assert_func>
 800d8b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d8b4:	6005      	str	r5, [r0, #0]
 800d8b6:	60c5      	str	r5, [r0, #12]
 800d8b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8ba:	6819      	ldr	r1, [r3, #0]
 800d8bc:	b151      	cbz	r1, 800d8d4 <_dtoa_r+0x5c>
 800d8be:	685a      	ldr	r2, [r3, #4]
 800d8c0:	604a      	str	r2, [r1, #4]
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	4093      	lsls	r3, r2
 800d8c6:	608b      	str	r3, [r1, #8]
 800d8c8:	4620      	mov	r0, r4
 800d8ca:	f001 f83b 	bl	800e944 <_Bfree>
 800d8ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	601a      	str	r2, [r3, #0]
 800d8d4:	1e3b      	subs	r3, r7, #0
 800d8d6:	bfb9      	ittee	lt
 800d8d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d8dc:	9303      	strlt	r3, [sp, #12]
 800d8de:	2300      	movge	r3, #0
 800d8e0:	f8c8 3000 	strge.w	r3, [r8]
 800d8e4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d8e8:	4ba3      	ldr	r3, [pc, #652]	; (800db78 <_dtoa_r+0x300>)
 800d8ea:	bfbc      	itt	lt
 800d8ec:	2201      	movlt	r2, #1
 800d8ee:	f8c8 2000 	strlt.w	r2, [r8]
 800d8f2:	ea33 0309 	bics.w	r3, r3, r9
 800d8f6:	d11b      	bne.n	800d930 <_dtoa_r+0xb8>
 800d8f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d8fa:	f242 730f 	movw	r3, #9999	; 0x270f
 800d8fe:	6013      	str	r3, [r2, #0]
 800d900:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d904:	4333      	orrs	r3, r6
 800d906:	f000 857a 	beq.w	800e3fe <_dtoa_r+0xb86>
 800d90a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d90c:	b963      	cbnz	r3, 800d928 <_dtoa_r+0xb0>
 800d90e:	4b9b      	ldr	r3, [pc, #620]	; (800db7c <_dtoa_r+0x304>)
 800d910:	e024      	b.n	800d95c <_dtoa_r+0xe4>
 800d912:	4b9b      	ldr	r3, [pc, #620]	; (800db80 <_dtoa_r+0x308>)
 800d914:	9300      	str	r3, [sp, #0]
 800d916:	3308      	adds	r3, #8
 800d918:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d91a:	6013      	str	r3, [r2, #0]
 800d91c:	9800      	ldr	r0, [sp, #0]
 800d91e:	b015      	add	sp, #84	; 0x54
 800d920:	ecbd 8b02 	vpop	{d8}
 800d924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d928:	4b94      	ldr	r3, [pc, #592]	; (800db7c <_dtoa_r+0x304>)
 800d92a:	9300      	str	r3, [sp, #0]
 800d92c:	3303      	adds	r3, #3
 800d92e:	e7f3      	b.n	800d918 <_dtoa_r+0xa0>
 800d930:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d934:	2200      	movs	r2, #0
 800d936:	ec51 0b17 	vmov	r0, r1, d7
 800d93a:	2300      	movs	r3, #0
 800d93c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d940:	f7f3 f8ca 	bl	8000ad8 <__aeabi_dcmpeq>
 800d944:	4680      	mov	r8, r0
 800d946:	b158      	cbz	r0, 800d960 <_dtoa_r+0xe8>
 800d948:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d94a:	2301      	movs	r3, #1
 800d94c:	6013      	str	r3, [r2, #0]
 800d94e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d950:	2b00      	cmp	r3, #0
 800d952:	f000 8551 	beq.w	800e3f8 <_dtoa_r+0xb80>
 800d956:	488b      	ldr	r0, [pc, #556]	; (800db84 <_dtoa_r+0x30c>)
 800d958:	6018      	str	r0, [r3, #0]
 800d95a:	1e43      	subs	r3, r0, #1
 800d95c:	9300      	str	r3, [sp, #0]
 800d95e:	e7dd      	b.n	800d91c <_dtoa_r+0xa4>
 800d960:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d964:	aa12      	add	r2, sp, #72	; 0x48
 800d966:	a913      	add	r1, sp, #76	; 0x4c
 800d968:	4620      	mov	r0, r4
 800d96a:	f001 facd 	bl	800ef08 <__d2b>
 800d96e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d972:	4683      	mov	fp, r0
 800d974:	2d00      	cmp	r5, #0
 800d976:	d07c      	beq.n	800da72 <_dtoa_r+0x1fa>
 800d978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d97a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800d97e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d982:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800d986:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d98a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d98e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d992:	4b7d      	ldr	r3, [pc, #500]	; (800db88 <_dtoa_r+0x310>)
 800d994:	2200      	movs	r2, #0
 800d996:	4630      	mov	r0, r6
 800d998:	4639      	mov	r1, r7
 800d99a:	f7f2 fc7d 	bl	8000298 <__aeabi_dsub>
 800d99e:	a36e      	add	r3, pc, #440	; (adr r3, 800db58 <_dtoa_r+0x2e0>)
 800d9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a4:	f7f2 fe30 	bl	8000608 <__aeabi_dmul>
 800d9a8:	a36d      	add	r3, pc, #436	; (adr r3, 800db60 <_dtoa_r+0x2e8>)
 800d9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ae:	f7f2 fc75 	bl	800029c <__adddf3>
 800d9b2:	4606      	mov	r6, r0
 800d9b4:	4628      	mov	r0, r5
 800d9b6:	460f      	mov	r7, r1
 800d9b8:	f7f2 fdbc 	bl	8000534 <__aeabi_i2d>
 800d9bc:	a36a      	add	r3, pc, #424	; (adr r3, 800db68 <_dtoa_r+0x2f0>)
 800d9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c2:	f7f2 fe21 	bl	8000608 <__aeabi_dmul>
 800d9c6:	4602      	mov	r2, r0
 800d9c8:	460b      	mov	r3, r1
 800d9ca:	4630      	mov	r0, r6
 800d9cc:	4639      	mov	r1, r7
 800d9ce:	f7f2 fc65 	bl	800029c <__adddf3>
 800d9d2:	4606      	mov	r6, r0
 800d9d4:	460f      	mov	r7, r1
 800d9d6:	f7f3 f8c7 	bl	8000b68 <__aeabi_d2iz>
 800d9da:	2200      	movs	r2, #0
 800d9dc:	4682      	mov	sl, r0
 800d9de:	2300      	movs	r3, #0
 800d9e0:	4630      	mov	r0, r6
 800d9e2:	4639      	mov	r1, r7
 800d9e4:	f7f3 f882 	bl	8000aec <__aeabi_dcmplt>
 800d9e8:	b148      	cbz	r0, 800d9fe <_dtoa_r+0x186>
 800d9ea:	4650      	mov	r0, sl
 800d9ec:	f7f2 fda2 	bl	8000534 <__aeabi_i2d>
 800d9f0:	4632      	mov	r2, r6
 800d9f2:	463b      	mov	r3, r7
 800d9f4:	f7f3 f870 	bl	8000ad8 <__aeabi_dcmpeq>
 800d9f8:	b908      	cbnz	r0, 800d9fe <_dtoa_r+0x186>
 800d9fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d9fe:	f1ba 0f16 	cmp.w	sl, #22
 800da02:	d854      	bhi.n	800daae <_dtoa_r+0x236>
 800da04:	4b61      	ldr	r3, [pc, #388]	; (800db8c <_dtoa_r+0x314>)
 800da06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800da0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800da12:	f7f3 f86b 	bl	8000aec <__aeabi_dcmplt>
 800da16:	2800      	cmp	r0, #0
 800da18:	d04b      	beq.n	800dab2 <_dtoa_r+0x23a>
 800da1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da1e:	2300      	movs	r3, #0
 800da20:	930e      	str	r3, [sp, #56]	; 0x38
 800da22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800da24:	1b5d      	subs	r5, r3, r5
 800da26:	1e6b      	subs	r3, r5, #1
 800da28:	9304      	str	r3, [sp, #16]
 800da2a:	bf43      	ittte	mi
 800da2c:	2300      	movmi	r3, #0
 800da2e:	f1c5 0801 	rsbmi	r8, r5, #1
 800da32:	9304      	strmi	r3, [sp, #16]
 800da34:	f04f 0800 	movpl.w	r8, #0
 800da38:	f1ba 0f00 	cmp.w	sl, #0
 800da3c:	db3b      	blt.n	800dab6 <_dtoa_r+0x23e>
 800da3e:	9b04      	ldr	r3, [sp, #16]
 800da40:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800da44:	4453      	add	r3, sl
 800da46:	9304      	str	r3, [sp, #16]
 800da48:	2300      	movs	r3, #0
 800da4a:	9306      	str	r3, [sp, #24]
 800da4c:	9b05      	ldr	r3, [sp, #20]
 800da4e:	2b09      	cmp	r3, #9
 800da50:	d869      	bhi.n	800db26 <_dtoa_r+0x2ae>
 800da52:	2b05      	cmp	r3, #5
 800da54:	bfc4      	itt	gt
 800da56:	3b04      	subgt	r3, #4
 800da58:	9305      	strgt	r3, [sp, #20]
 800da5a:	9b05      	ldr	r3, [sp, #20]
 800da5c:	f1a3 0302 	sub.w	r3, r3, #2
 800da60:	bfcc      	ite	gt
 800da62:	2500      	movgt	r5, #0
 800da64:	2501      	movle	r5, #1
 800da66:	2b03      	cmp	r3, #3
 800da68:	d869      	bhi.n	800db3e <_dtoa_r+0x2c6>
 800da6a:	e8df f003 	tbb	[pc, r3]
 800da6e:	4e2c      	.short	0x4e2c
 800da70:	5a4c      	.short	0x5a4c
 800da72:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800da76:	441d      	add	r5, r3
 800da78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800da7c:	2b20      	cmp	r3, #32
 800da7e:	bfc1      	itttt	gt
 800da80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800da84:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800da88:	fa09 f303 	lslgt.w	r3, r9, r3
 800da8c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800da90:	bfda      	itte	le
 800da92:	f1c3 0320 	rsble	r3, r3, #32
 800da96:	fa06 f003 	lslle.w	r0, r6, r3
 800da9a:	4318      	orrgt	r0, r3
 800da9c:	f7f2 fd3a 	bl	8000514 <__aeabi_ui2d>
 800daa0:	2301      	movs	r3, #1
 800daa2:	4606      	mov	r6, r0
 800daa4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800daa8:	3d01      	subs	r5, #1
 800daaa:	9310      	str	r3, [sp, #64]	; 0x40
 800daac:	e771      	b.n	800d992 <_dtoa_r+0x11a>
 800daae:	2301      	movs	r3, #1
 800dab0:	e7b6      	b.n	800da20 <_dtoa_r+0x1a8>
 800dab2:	900e      	str	r0, [sp, #56]	; 0x38
 800dab4:	e7b5      	b.n	800da22 <_dtoa_r+0x1aa>
 800dab6:	f1ca 0300 	rsb	r3, sl, #0
 800daba:	9306      	str	r3, [sp, #24]
 800dabc:	2300      	movs	r3, #0
 800dabe:	eba8 080a 	sub.w	r8, r8, sl
 800dac2:	930d      	str	r3, [sp, #52]	; 0x34
 800dac4:	e7c2      	b.n	800da4c <_dtoa_r+0x1d4>
 800dac6:	2300      	movs	r3, #0
 800dac8:	9308      	str	r3, [sp, #32]
 800daca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dacc:	2b00      	cmp	r3, #0
 800dace:	dc39      	bgt.n	800db44 <_dtoa_r+0x2cc>
 800dad0:	f04f 0901 	mov.w	r9, #1
 800dad4:	f8cd 9004 	str.w	r9, [sp, #4]
 800dad8:	464b      	mov	r3, r9
 800dada:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800dade:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dae0:	2200      	movs	r2, #0
 800dae2:	6042      	str	r2, [r0, #4]
 800dae4:	2204      	movs	r2, #4
 800dae6:	f102 0614 	add.w	r6, r2, #20
 800daea:	429e      	cmp	r6, r3
 800daec:	6841      	ldr	r1, [r0, #4]
 800daee:	d92f      	bls.n	800db50 <_dtoa_r+0x2d8>
 800daf0:	4620      	mov	r0, r4
 800daf2:	f000 fee7 	bl	800e8c4 <_Balloc>
 800daf6:	9000      	str	r0, [sp, #0]
 800daf8:	2800      	cmp	r0, #0
 800dafa:	d14b      	bne.n	800db94 <_dtoa_r+0x31c>
 800dafc:	4b24      	ldr	r3, [pc, #144]	; (800db90 <_dtoa_r+0x318>)
 800dafe:	4602      	mov	r2, r0
 800db00:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800db04:	e6d1      	b.n	800d8aa <_dtoa_r+0x32>
 800db06:	2301      	movs	r3, #1
 800db08:	e7de      	b.n	800dac8 <_dtoa_r+0x250>
 800db0a:	2300      	movs	r3, #0
 800db0c:	9308      	str	r3, [sp, #32]
 800db0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db10:	eb0a 0903 	add.w	r9, sl, r3
 800db14:	f109 0301 	add.w	r3, r9, #1
 800db18:	2b01      	cmp	r3, #1
 800db1a:	9301      	str	r3, [sp, #4]
 800db1c:	bfb8      	it	lt
 800db1e:	2301      	movlt	r3, #1
 800db20:	e7dd      	b.n	800dade <_dtoa_r+0x266>
 800db22:	2301      	movs	r3, #1
 800db24:	e7f2      	b.n	800db0c <_dtoa_r+0x294>
 800db26:	2501      	movs	r5, #1
 800db28:	2300      	movs	r3, #0
 800db2a:	9305      	str	r3, [sp, #20]
 800db2c:	9508      	str	r5, [sp, #32]
 800db2e:	f04f 39ff 	mov.w	r9, #4294967295
 800db32:	2200      	movs	r2, #0
 800db34:	f8cd 9004 	str.w	r9, [sp, #4]
 800db38:	2312      	movs	r3, #18
 800db3a:	9209      	str	r2, [sp, #36]	; 0x24
 800db3c:	e7cf      	b.n	800dade <_dtoa_r+0x266>
 800db3e:	2301      	movs	r3, #1
 800db40:	9308      	str	r3, [sp, #32]
 800db42:	e7f4      	b.n	800db2e <_dtoa_r+0x2b6>
 800db44:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800db48:	f8cd 9004 	str.w	r9, [sp, #4]
 800db4c:	464b      	mov	r3, r9
 800db4e:	e7c6      	b.n	800dade <_dtoa_r+0x266>
 800db50:	3101      	adds	r1, #1
 800db52:	6041      	str	r1, [r0, #4]
 800db54:	0052      	lsls	r2, r2, #1
 800db56:	e7c6      	b.n	800dae6 <_dtoa_r+0x26e>
 800db58:	636f4361 	.word	0x636f4361
 800db5c:	3fd287a7 	.word	0x3fd287a7
 800db60:	8b60c8b3 	.word	0x8b60c8b3
 800db64:	3fc68a28 	.word	0x3fc68a28
 800db68:	509f79fb 	.word	0x509f79fb
 800db6c:	3fd34413 	.word	0x3fd34413
 800db70:	08019eb1 	.word	0x08019eb1
 800db74:	08019ec8 	.word	0x08019ec8
 800db78:	7ff00000 	.word	0x7ff00000
 800db7c:	08019ead 	.word	0x08019ead
 800db80:	08019ea4 	.word	0x08019ea4
 800db84:	08019e81 	.word	0x08019e81
 800db88:	3ff80000 	.word	0x3ff80000
 800db8c:	0801a020 	.word	0x0801a020
 800db90:	08019f27 	.word	0x08019f27
 800db94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db96:	9a00      	ldr	r2, [sp, #0]
 800db98:	601a      	str	r2, [r3, #0]
 800db9a:	9b01      	ldr	r3, [sp, #4]
 800db9c:	2b0e      	cmp	r3, #14
 800db9e:	f200 80ad 	bhi.w	800dcfc <_dtoa_r+0x484>
 800dba2:	2d00      	cmp	r5, #0
 800dba4:	f000 80aa 	beq.w	800dcfc <_dtoa_r+0x484>
 800dba8:	f1ba 0f00 	cmp.w	sl, #0
 800dbac:	dd36      	ble.n	800dc1c <_dtoa_r+0x3a4>
 800dbae:	4ac3      	ldr	r2, [pc, #780]	; (800debc <_dtoa_r+0x644>)
 800dbb0:	f00a 030f 	and.w	r3, sl, #15
 800dbb4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dbb8:	ed93 7b00 	vldr	d7, [r3]
 800dbbc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800dbc0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800dbc4:	eeb0 8a47 	vmov.f32	s16, s14
 800dbc8:	eef0 8a67 	vmov.f32	s17, s15
 800dbcc:	d016      	beq.n	800dbfc <_dtoa_r+0x384>
 800dbce:	4bbc      	ldr	r3, [pc, #752]	; (800dec0 <_dtoa_r+0x648>)
 800dbd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dbd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dbd8:	f7f2 fe40 	bl	800085c <__aeabi_ddiv>
 800dbdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbe0:	f007 070f 	and.w	r7, r7, #15
 800dbe4:	2503      	movs	r5, #3
 800dbe6:	4eb6      	ldr	r6, [pc, #728]	; (800dec0 <_dtoa_r+0x648>)
 800dbe8:	b957      	cbnz	r7, 800dc00 <_dtoa_r+0x388>
 800dbea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbee:	ec53 2b18 	vmov	r2, r3, d8
 800dbf2:	f7f2 fe33 	bl	800085c <__aeabi_ddiv>
 800dbf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbfa:	e029      	b.n	800dc50 <_dtoa_r+0x3d8>
 800dbfc:	2502      	movs	r5, #2
 800dbfe:	e7f2      	b.n	800dbe6 <_dtoa_r+0x36e>
 800dc00:	07f9      	lsls	r1, r7, #31
 800dc02:	d508      	bpl.n	800dc16 <_dtoa_r+0x39e>
 800dc04:	ec51 0b18 	vmov	r0, r1, d8
 800dc08:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dc0c:	f7f2 fcfc 	bl	8000608 <__aeabi_dmul>
 800dc10:	ec41 0b18 	vmov	d8, r0, r1
 800dc14:	3501      	adds	r5, #1
 800dc16:	107f      	asrs	r7, r7, #1
 800dc18:	3608      	adds	r6, #8
 800dc1a:	e7e5      	b.n	800dbe8 <_dtoa_r+0x370>
 800dc1c:	f000 80a6 	beq.w	800dd6c <_dtoa_r+0x4f4>
 800dc20:	f1ca 0600 	rsb	r6, sl, #0
 800dc24:	4ba5      	ldr	r3, [pc, #660]	; (800debc <_dtoa_r+0x644>)
 800dc26:	4fa6      	ldr	r7, [pc, #664]	; (800dec0 <_dtoa_r+0x648>)
 800dc28:	f006 020f 	and.w	r2, r6, #15
 800dc2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc34:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dc38:	f7f2 fce6 	bl	8000608 <__aeabi_dmul>
 800dc3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc40:	1136      	asrs	r6, r6, #4
 800dc42:	2300      	movs	r3, #0
 800dc44:	2502      	movs	r5, #2
 800dc46:	2e00      	cmp	r6, #0
 800dc48:	f040 8085 	bne.w	800dd56 <_dtoa_r+0x4de>
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d1d2      	bne.n	800dbf6 <_dtoa_r+0x37e>
 800dc50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	f000 808c 	beq.w	800dd70 <_dtoa_r+0x4f8>
 800dc58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dc5c:	4b99      	ldr	r3, [pc, #612]	; (800dec4 <_dtoa_r+0x64c>)
 800dc5e:	2200      	movs	r2, #0
 800dc60:	4630      	mov	r0, r6
 800dc62:	4639      	mov	r1, r7
 800dc64:	f7f2 ff42 	bl	8000aec <__aeabi_dcmplt>
 800dc68:	2800      	cmp	r0, #0
 800dc6a:	f000 8081 	beq.w	800dd70 <_dtoa_r+0x4f8>
 800dc6e:	9b01      	ldr	r3, [sp, #4]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d07d      	beq.n	800dd70 <_dtoa_r+0x4f8>
 800dc74:	f1b9 0f00 	cmp.w	r9, #0
 800dc78:	dd3c      	ble.n	800dcf4 <_dtoa_r+0x47c>
 800dc7a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800dc7e:	9307      	str	r3, [sp, #28]
 800dc80:	2200      	movs	r2, #0
 800dc82:	4b91      	ldr	r3, [pc, #580]	; (800dec8 <_dtoa_r+0x650>)
 800dc84:	4630      	mov	r0, r6
 800dc86:	4639      	mov	r1, r7
 800dc88:	f7f2 fcbe 	bl	8000608 <__aeabi_dmul>
 800dc8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc90:	3501      	adds	r5, #1
 800dc92:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800dc96:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dc9a:	4628      	mov	r0, r5
 800dc9c:	f7f2 fc4a 	bl	8000534 <__aeabi_i2d>
 800dca0:	4632      	mov	r2, r6
 800dca2:	463b      	mov	r3, r7
 800dca4:	f7f2 fcb0 	bl	8000608 <__aeabi_dmul>
 800dca8:	4b88      	ldr	r3, [pc, #544]	; (800decc <_dtoa_r+0x654>)
 800dcaa:	2200      	movs	r2, #0
 800dcac:	f7f2 faf6 	bl	800029c <__adddf3>
 800dcb0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800dcb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcb8:	9303      	str	r3, [sp, #12]
 800dcba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d15c      	bne.n	800dd7a <_dtoa_r+0x502>
 800dcc0:	4b83      	ldr	r3, [pc, #524]	; (800ded0 <_dtoa_r+0x658>)
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	4630      	mov	r0, r6
 800dcc6:	4639      	mov	r1, r7
 800dcc8:	f7f2 fae6 	bl	8000298 <__aeabi_dsub>
 800dccc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dcd0:	4606      	mov	r6, r0
 800dcd2:	460f      	mov	r7, r1
 800dcd4:	f7f2 ff28 	bl	8000b28 <__aeabi_dcmpgt>
 800dcd8:	2800      	cmp	r0, #0
 800dcda:	f040 8296 	bne.w	800e20a <_dtoa_r+0x992>
 800dcde:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dce2:	4630      	mov	r0, r6
 800dce4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dce8:	4639      	mov	r1, r7
 800dcea:	f7f2 feff 	bl	8000aec <__aeabi_dcmplt>
 800dcee:	2800      	cmp	r0, #0
 800dcf0:	f040 8288 	bne.w	800e204 <_dtoa_r+0x98c>
 800dcf4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dcf8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dcfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	f2c0 8158 	blt.w	800dfb4 <_dtoa_r+0x73c>
 800dd04:	f1ba 0f0e 	cmp.w	sl, #14
 800dd08:	f300 8154 	bgt.w	800dfb4 <_dtoa_r+0x73c>
 800dd0c:	4b6b      	ldr	r3, [pc, #428]	; (800debc <_dtoa_r+0x644>)
 800dd0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dd12:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dd16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	f280 80e3 	bge.w	800dee4 <_dtoa_r+0x66c>
 800dd1e:	9b01      	ldr	r3, [sp, #4]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	f300 80df 	bgt.w	800dee4 <_dtoa_r+0x66c>
 800dd26:	f040 826d 	bne.w	800e204 <_dtoa_r+0x98c>
 800dd2a:	4b69      	ldr	r3, [pc, #420]	; (800ded0 <_dtoa_r+0x658>)
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	4640      	mov	r0, r8
 800dd30:	4649      	mov	r1, r9
 800dd32:	f7f2 fc69 	bl	8000608 <__aeabi_dmul>
 800dd36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd3a:	f7f2 feeb 	bl	8000b14 <__aeabi_dcmpge>
 800dd3e:	9e01      	ldr	r6, [sp, #4]
 800dd40:	4637      	mov	r7, r6
 800dd42:	2800      	cmp	r0, #0
 800dd44:	f040 8243 	bne.w	800e1ce <_dtoa_r+0x956>
 800dd48:	9d00      	ldr	r5, [sp, #0]
 800dd4a:	2331      	movs	r3, #49	; 0x31
 800dd4c:	f805 3b01 	strb.w	r3, [r5], #1
 800dd50:	f10a 0a01 	add.w	sl, sl, #1
 800dd54:	e23f      	b.n	800e1d6 <_dtoa_r+0x95e>
 800dd56:	07f2      	lsls	r2, r6, #31
 800dd58:	d505      	bpl.n	800dd66 <_dtoa_r+0x4ee>
 800dd5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd5e:	f7f2 fc53 	bl	8000608 <__aeabi_dmul>
 800dd62:	3501      	adds	r5, #1
 800dd64:	2301      	movs	r3, #1
 800dd66:	1076      	asrs	r6, r6, #1
 800dd68:	3708      	adds	r7, #8
 800dd6a:	e76c      	b.n	800dc46 <_dtoa_r+0x3ce>
 800dd6c:	2502      	movs	r5, #2
 800dd6e:	e76f      	b.n	800dc50 <_dtoa_r+0x3d8>
 800dd70:	9b01      	ldr	r3, [sp, #4]
 800dd72:	f8cd a01c 	str.w	sl, [sp, #28]
 800dd76:	930c      	str	r3, [sp, #48]	; 0x30
 800dd78:	e78d      	b.n	800dc96 <_dtoa_r+0x41e>
 800dd7a:	9900      	ldr	r1, [sp, #0]
 800dd7c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800dd7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dd80:	4b4e      	ldr	r3, [pc, #312]	; (800debc <_dtoa_r+0x644>)
 800dd82:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dd86:	4401      	add	r1, r0
 800dd88:	9102      	str	r1, [sp, #8]
 800dd8a:	9908      	ldr	r1, [sp, #32]
 800dd8c:	eeb0 8a47 	vmov.f32	s16, s14
 800dd90:	eef0 8a67 	vmov.f32	s17, s15
 800dd94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dd9c:	2900      	cmp	r1, #0
 800dd9e:	d045      	beq.n	800de2c <_dtoa_r+0x5b4>
 800dda0:	494c      	ldr	r1, [pc, #304]	; (800ded4 <_dtoa_r+0x65c>)
 800dda2:	2000      	movs	r0, #0
 800dda4:	f7f2 fd5a 	bl	800085c <__aeabi_ddiv>
 800dda8:	ec53 2b18 	vmov	r2, r3, d8
 800ddac:	f7f2 fa74 	bl	8000298 <__aeabi_dsub>
 800ddb0:	9d00      	ldr	r5, [sp, #0]
 800ddb2:	ec41 0b18 	vmov	d8, r0, r1
 800ddb6:	4639      	mov	r1, r7
 800ddb8:	4630      	mov	r0, r6
 800ddba:	f7f2 fed5 	bl	8000b68 <__aeabi_d2iz>
 800ddbe:	900c      	str	r0, [sp, #48]	; 0x30
 800ddc0:	f7f2 fbb8 	bl	8000534 <__aeabi_i2d>
 800ddc4:	4602      	mov	r2, r0
 800ddc6:	460b      	mov	r3, r1
 800ddc8:	4630      	mov	r0, r6
 800ddca:	4639      	mov	r1, r7
 800ddcc:	f7f2 fa64 	bl	8000298 <__aeabi_dsub>
 800ddd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ddd2:	3330      	adds	r3, #48	; 0x30
 800ddd4:	f805 3b01 	strb.w	r3, [r5], #1
 800ddd8:	ec53 2b18 	vmov	r2, r3, d8
 800dddc:	4606      	mov	r6, r0
 800ddde:	460f      	mov	r7, r1
 800dde0:	f7f2 fe84 	bl	8000aec <__aeabi_dcmplt>
 800dde4:	2800      	cmp	r0, #0
 800dde6:	d165      	bne.n	800deb4 <_dtoa_r+0x63c>
 800dde8:	4632      	mov	r2, r6
 800ddea:	463b      	mov	r3, r7
 800ddec:	4935      	ldr	r1, [pc, #212]	; (800dec4 <_dtoa_r+0x64c>)
 800ddee:	2000      	movs	r0, #0
 800ddf0:	f7f2 fa52 	bl	8000298 <__aeabi_dsub>
 800ddf4:	ec53 2b18 	vmov	r2, r3, d8
 800ddf8:	f7f2 fe78 	bl	8000aec <__aeabi_dcmplt>
 800ddfc:	2800      	cmp	r0, #0
 800ddfe:	f040 80b9 	bne.w	800df74 <_dtoa_r+0x6fc>
 800de02:	9b02      	ldr	r3, [sp, #8]
 800de04:	429d      	cmp	r5, r3
 800de06:	f43f af75 	beq.w	800dcf4 <_dtoa_r+0x47c>
 800de0a:	4b2f      	ldr	r3, [pc, #188]	; (800dec8 <_dtoa_r+0x650>)
 800de0c:	ec51 0b18 	vmov	r0, r1, d8
 800de10:	2200      	movs	r2, #0
 800de12:	f7f2 fbf9 	bl	8000608 <__aeabi_dmul>
 800de16:	4b2c      	ldr	r3, [pc, #176]	; (800dec8 <_dtoa_r+0x650>)
 800de18:	ec41 0b18 	vmov	d8, r0, r1
 800de1c:	2200      	movs	r2, #0
 800de1e:	4630      	mov	r0, r6
 800de20:	4639      	mov	r1, r7
 800de22:	f7f2 fbf1 	bl	8000608 <__aeabi_dmul>
 800de26:	4606      	mov	r6, r0
 800de28:	460f      	mov	r7, r1
 800de2a:	e7c4      	b.n	800ddb6 <_dtoa_r+0x53e>
 800de2c:	ec51 0b17 	vmov	r0, r1, d7
 800de30:	f7f2 fbea 	bl	8000608 <__aeabi_dmul>
 800de34:	9b02      	ldr	r3, [sp, #8]
 800de36:	9d00      	ldr	r5, [sp, #0]
 800de38:	930c      	str	r3, [sp, #48]	; 0x30
 800de3a:	ec41 0b18 	vmov	d8, r0, r1
 800de3e:	4639      	mov	r1, r7
 800de40:	4630      	mov	r0, r6
 800de42:	f7f2 fe91 	bl	8000b68 <__aeabi_d2iz>
 800de46:	9011      	str	r0, [sp, #68]	; 0x44
 800de48:	f7f2 fb74 	bl	8000534 <__aeabi_i2d>
 800de4c:	4602      	mov	r2, r0
 800de4e:	460b      	mov	r3, r1
 800de50:	4630      	mov	r0, r6
 800de52:	4639      	mov	r1, r7
 800de54:	f7f2 fa20 	bl	8000298 <__aeabi_dsub>
 800de58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de5a:	3330      	adds	r3, #48	; 0x30
 800de5c:	f805 3b01 	strb.w	r3, [r5], #1
 800de60:	9b02      	ldr	r3, [sp, #8]
 800de62:	429d      	cmp	r5, r3
 800de64:	4606      	mov	r6, r0
 800de66:	460f      	mov	r7, r1
 800de68:	f04f 0200 	mov.w	r2, #0
 800de6c:	d134      	bne.n	800ded8 <_dtoa_r+0x660>
 800de6e:	4b19      	ldr	r3, [pc, #100]	; (800ded4 <_dtoa_r+0x65c>)
 800de70:	ec51 0b18 	vmov	r0, r1, d8
 800de74:	f7f2 fa12 	bl	800029c <__adddf3>
 800de78:	4602      	mov	r2, r0
 800de7a:	460b      	mov	r3, r1
 800de7c:	4630      	mov	r0, r6
 800de7e:	4639      	mov	r1, r7
 800de80:	f7f2 fe52 	bl	8000b28 <__aeabi_dcmpgt>
 800de84:	2800      	cmp	r0, #0
 800de86:	d175      	bne.n	800df74 <_dtoa_r+0x6fc>
 800de88:	ec53 2b18 	vmov	r2, r3, d8
 800de8c:	4911      	ldr	r1, [pc, #68]	; (800ded4 <_dtoa_r+0x65c>)
 800de8e:	2000      	movs	r0, #0
 800de90:	f7f2 fa02 	bl	8000298 <__aeabi_dsub>
 800de94:	4602      	mov	r2, r0
 800de96:	460b      	mov	r3, r1
 800de98:	4630      	mov	r0, r6
 800de9a:	4639      	mov	r1, r7
 800de9c:	f7f2 fe26 	bl	8000aec <__aeabi_dcmplt>
 800dea0:	2800      	cmp	r0, #0
 800dea2:	f43f af27 	beq.w	800dcf4 <_dtoa_r+0x47c>
 800dea6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dea8:	1e6b      	subs	r3, r5, #1
 800deaa:	930c      	str	r3, [sp, #48]	; 0x30
 800deac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800deb0:	2b30      	cmp	r3, #48	; 0x30
 800deb2:	d0f8      	beq.n	800dea6 <_dtoa_r+0x62e>
 800deb4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800deb8:	e04a      	b.n	800df50 <_dtoa_r+0x6d8>
 800deba:	bf00      	nop
 800debc:	0801a020 	.word	0x0801a020
 800dec0:	08019ff8 	.word	0x08019ff8
 800dec4:	3ff00000 	.word	0x3ff00000
 800dec8:	40240000 	.word	0x40240000
 800decc:	401c0000 	.word	0x401c0000
 800ded0:	40140000 	.word	0x40140000
 800ded4:	3fe00000 	.word	0x3fe00000
 800ded8:	4baf      	ldr	r3, [pc, #700]	; (800e198 <_dtoa_r+0x920>)
 800deda:	f7f2 fb95 	bl	8000608 <__aeabi_dmul>
 800dede:	4606      	mov	r6, r0
 800dee0:	460f      	mov	r7, r1
 800dee2:	e7ac      	b.n	800de3e <_dtoa_r+0x5c6>
 800dee4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dee8:	9d00      	ldr	r5, [sp, #0]
 800deea:	4642      	mov	r2, r8
 800deec:	464b      	mov	r3, r9
 800deee:	4630      	mov	r0, r6
 800def0:	4639      	mov	r1, r7
 800def2:	f7f2 fcb3 	bl	800085c <__aeabi_ddiv>
 800def6:	f7f2 fe37 	bl	8000b68 <__aeabi_d2iz>
 800defa:	9002      	str	r0, [sp, #8]
 800defc:	f7f2 fb1a 	bl	8000534 <__aeabi_i2d>
 800df00:	4642      	mov	r2, r8
 800df02:	464b      	mov	r3, r9
 800df04:	f7f2 fb80 	bl	8000608 <__aeabi_dmul>
 800df08:	4602      	mov	r2, r0
 800df0a:	460b      	mov	r3, r1
 800df0c:	4630      	mov	r0, r6
 800df0e:	4639      	mov	r1, r7
 800df10:	f7f2 f9c2 	bl	8000298 <__aeabi_dsub>
 800df14:	9e02      	ldr	r6, [sp, #8]
 800df16:	9f01      	ldr	r7, [sp, #4]
 800df18:	3630      	adds	r6, #48	; 0x30
 800df1a:	f805 6b01 	strb.w	r6, [r5], #1
 800df1e:	9e00      	ldr	r6, [sp, #0]
 800df20:	1bae      	subs	r6, r5, r6
 800df22:	42b7      	cmp	r7, r6
 800df24:	4602      	mov	r2, r0
 800df26:	460b      	mov	r3, r1
 800df28:	d137      	bne.n	800df9a <_dtoa_r+0x722>
 800df2a:	f7f2 f9b7 	bl	800029c <__adddf3>
 800df2e:	4642      	mov	r2, r8
 800df30:	464b      	mov	r3, r9
 800df32:	4606      	mov	r6, r0
 800df34:	460f      	mov	r7, r1
 800df36:	f7f2 fdf7 	bl	8000b28 <__aeabi_dcmpgt>
 800df3a:	b9c8      	cbnz	r0, 800df70 <_dtoa_r+0x6f8>
 800df3c:	4642      	mov	r2, r8
 800df3e:	464b      	mov	r3, r9
 800df40:	4630      	mov	r0, r6
 800df42:	4639      	mov	r1, r7
 800df44:	f7f2 fdc8 	bl	8000ad8 <__aeabi_dcmpeq>
 800df48:	b110      	cbz	r0, 800df50 <_dtoa_r+0x6d8>
 800df4a:	9b02      	ldr	r3, [sp, #8]
 800df4c:	07d9      	lsls	r1, r3, #31
 800df4e:	d40f      	bmi.n	800df70 <_dtoa_r+0x6f8>
 800df50:	4620      	mov	r0, r4
 800df52:	4659      	mov	r1, fp
 800df54:	f000 fcf6 	bl	800e944 <_Bfree>
 800df58:	2300      	movs	r3, #0
 800df5a:	702b      	strb	r3, [r5, #0]
 800df5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df5e:	f10a 0001 	add.w	r0, sl, #1
 800df62:	6018      	str	r0, [r3, #0]
 800df64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df66:	2b00      	cmp	r3, #0
 800df68:	f43f acd8 	beq.w	800d91c <_dtoa_r+0xa4>
 800df6c:	601d      	str	r5, [r3, #0]
 800df6e:	e4d5      	b.n	800d91c <_dtoa_r+0xa4>
 800df70:	f8cd a01c 	str.w	sl, [sp, #28]
 800df74:	462b      	mov	r3, r5
 800df76:	461d      	mov	r5, r3
 800df78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df7c:	2a39      	cmp	r2, #57	; 0x39
 800df7e:	d108      	bne.n	800df92 <_dtoa_r+0x71a>
 800df80:	9a00      	ldr	r2, [sp, #0]
 800df82:	429a      	cmp	r2, r3
 800df84:	d1f7      	bne.n	800df76 <_dtoa_r+0x6fe>
 800df86:	9a07      	ldr	r2, [sp, #28]
 800df88:	9900      	ldr	r1, [sp, #0]
 800df8a:	3201      	adds	r2, #1
 800df8c:	9207      	str	r2, [sp, #28]
 800df8e:	2230      	movs	r2, #48	; 0x30
 800df90:	700a      	strb	r2, [r1, #0]
 800df92:	781a      	ldrb	r2, [r3, #0]
 800df94:	3201      	adds	r2, #1
 800df96:	701a      	strb	r2, [r3, #0]
 800df98:	e78c      	b.n	800deb4 <_dtoa_r+0x63c>
 800df9a:	4b7f      	ldr	r3, [pc, #508]	; (800e198 <_dtoa_r+0x920>)
 800df9c:	2200      	movs	r2, #0
 800df9e:	f7f2 fb33 	bl	8000608 <__aeabi_dmul>
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	4606      	mov	r6, r0
 800dfa8:	460f      	mov	r7, r1
 800dfaa:	f7f2 fd95 	bl	8000ad8 <__aeabi_dcmpeq>
 800dfae:	2800      	cmp	r0, #0
 800dfb0:	d09b      	beq.n	800deea <_dtoa_r+0x672>
 800dfb2:	e7cd      	b.n	800df50 <_dtoa_r+0x6d8>
 800dfb4:	9a08      	ldr	r2, [sp, #32]
 800dfb6:	2a00      	cmp	r2, #0
 800dfb8:	f000 80c4 	beq.w	800e144 <_dtoa_r+0x8cc>
 800dfbc:	9a05      	ldr	r2, [sp, #20]
 800dfbe:	2a01      	cmp	r2, #1
 800dfc0:	f300 80a8 	bgt.w	800e114 <_dtoa_r+0x89c>
 800dfc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dfc6:	2a00      	cmp	r2, #0
 800dfc8:	f000 80a0 	beq.w	800e10c <_dtoa_r+0x894>
 800dfcc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dfd0:	9e06      	ldr	r6, [sp, #24]
 800dfd2:	4645      	mov	r5, r8
 800dfd4:	9a04      	ldr	r2, [sp, #16]
 800dfd6:	2101      	movs	r1, #1
 800dfd8:	441a      	add	r2, r3
 800dfda:	4620      	mov	r0, r4
 800dfdc:	4498      	add	r8, r3
 800dfde:	9204      	str	r2, [sp, #16]
 800dfe0:	f000 fd6c 	bl	800eabc <__i2b>
 800dfe4:	4607      	mov	r7, r0
 800dfe6:	2d00      	cmp	r5, #0
 800dfe8:	dd0b      	ble.n	800e002 <_dtoa_r+0x78a>
 800dfea:	9b04      	ldr	r3, [sp, #16]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	dd08      	ble.n	800e002 <_dtoa_r+0x78a>
 800dff0:	42ab      	cmp	r3, r5
 800dff2:	9a04      	ldr	r2, [sp, #16]
 800dff4:	bfa8      	it	ge
 800dff6:	462b      	movge	r3, r5
 800dff8:	eba8 0803 	sub.w	r8, r8, r3
 800dffc:	1aed      	subs	r5, r5, r3
 800dffe:	1ad3      	subs	r3, r2, r3
 800e000:	9304      	str	r3, [sp, #16]
 800e002:	9b06      	ldr	r3, [sp, #24]
 800e004:	b1fb      	cbz	r3, 800e046 <_dtoa_r+0x7ce>
 800e006:	9b08      	ldr	r3, [sp, #32]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	f000 809f 	beq.w	800e14c <_dtoa_r+0x8d4>
 800e00e:	2e00      	cmp	r6, #0
 800e010:	dd11      	ble.n	800e036 <_dtoa_r+0x7be>
 800e012:	4639      	mov	r1, r7
 800e014:	4632      	mov	r2, r6
 800e016:	4620      	mov	r0, r4
 800e018:	f000 fe0c 	bl	800ec34 <__pow5mult>
 800e01c:	465a      	mov	r2, fp
 800e01e:	4601      	mov	r1, r0
 800e020:	4607      	mov	r7, r0
 800e022:	4620      	mov	r0, r4
 800e024:	f000 fd60 	bl	800eae8 <__multiply>
 800e028:	4659      	mov	r1, fp
 800e02a:	9007      	str	r0, [sp, #28]
 800e02c:	4620      	mov	r0, r4
 800e02e:	f000 fc89 	bl	800e944 <_Bfree>
 800e032:	9b07      	ldr	r3, [sp, #28]
 800e034:	469b      	mov	fp, r3
 800e036:	9b06      	ldr	r3, [sp, #24]
 800e038:	1b9a      	subs	r2, r3, r6
 800e03a:	d004      	beq.n	800e046 <_dtoa_r+0x7ce>
 800e03c:	4659      	mov	r1, fp
 800e03e:	4620      	mov	r0, r4
 800e040:	f000 fdf8 	bl	800ec34 <__pow5mult>
 800e044:	4683      	mov	fp, r0
 800e046:	2101      	movs	r1, #1
 800e048:	4620      	mov	r0, r4
 800e04a:	f000 fd37 	bl	800eabc <__i2b>
 800e04e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e050:	2b00      	cmp	r3, #0
 800e052:	4606      	mov	r6, r0
 800e054:	dd7c      	ble.n	800e150 <_dtoa_r+0x8d8>
 800e056:	461a      	mov	r2, r3
 800e058:	4601      	mov	r1, r0
 800e05a:	4620      	mov	r0, r4
 800e05c:	f000 fdea 	bl	800ec34 <__pow5mult>
 800e060:	9b05      	ldr	r3, [sp, #20]
 800e062:	2b01      	cmp	r3, #1
 800e064:	4606      	mov	r6, r0
 800e066:	dd76      	ble.n	800e156 <_dtoa_r+0x8de>
 800e068:	2300      	movs	r3, #0
 800e06a:	9306      	str	r3, [sp, #24]
 800e06c:	6933      	ldr	r3, [r6, #16]
 800e06e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e072:	6918      	ldr	r0, [r3, #16]
 800e074:	f000 fcd2 	bl	800ea1c <__hi0bits>
 800e078:	f1c0 0020 	rsb	r0, r0, #32
 800e07c:	9b04      	ldr	r3, [sp, #16]
 800e07e:	4418      	add	r0, r3
 800e080:	f010 001f 	ands.w	r0, r0, #31
 800e084:	f000 8086 	beq.w	800e194 <_dtoa_r+0x91c>
 800e088:	f1c0 0320 	rsb	r3, r0, #32
 800e08c:	2b04      	cmp	r3, #4
 800e08e:	dd7f      	ble.n	800e190 <_dtoa_r+0x918>
 800e090:	f1c0 001c 	rsb	r0, r0, #28
 800e094:	9b04      	ldr	r3, [sp, #16]
 800e096:	4403      	add	r3, r0
 800e098:	4480      	add	r8, r0
 800e09a:	4405      	add	r5, r0
 800e09c:	9304      	str	r3, [sp, #16]
 800e09e:	f1b8 0f00 	cmp.w	r8, #0
 800e0a2:	dd05      	ble.n	800e0b0 <_dtoa_r+0x838>
 800e0a4:	4659      	mov	r1, fp
 800e0a6:	4642      	mov	r2, r8
 800e0a8:	4620      	mov	r0, r4
 800e0aa:	f000 fe1d 	bl	800ece8 <__lshift>
 800e0ae:	4683      	mov	fp, r0
 800e0b0:	9b04      	ldr	r3, [sp, #16]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	dd05      	ble.n	800e0c2 <_dtoa_r+0x84a>
 800e0b6:	4631      	mov	r1, r6
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	f000 fe14 	bl	800ece8 <__lshift>
 800e0c0:	4606      	mov	r6, r0
 800e0c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d069      	beq.n	800e19c <_dtoa_r+0x924>
 800e0c8:	4631      	mov	r1, r6
 800e0ca:	4658      	mov	r0, fp
 800e0cc:	f000 fe78 	bl	800edc0 <__mcmp>
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	da63      	bge.n	800e19c <_dtoa_r+0x924>
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	4659      	mov	r1, fp
 800e0d8:	220a      	movs	r2, #10
 800e0da:	4620      	mov	r0, r4
 800e0dc:	f000 fc54 	bl	800e988 <__multadd>
 800e0e0:	9b08      	ldr	r3, [sp, #32]
 800e0e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e0e6:	4683      	mov	fp, r0
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	f000 818f 	beq.w	800e40c <_dtoa_r+0xb94>
 800e0ee:	4639      	mov	r1, r7
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	220a      	movs	r2, #10
 800e0f4:	4620      	mov	r0, r4
 800e0f6:	f000 fc47 	bl	800e988 <__multadd>
 800e0fa:	f1b9 0f00 	cmp.w	r9, #0
 800e0fe:	4607      	mov	r7, r0
 800e100:	f300 808e 	bgt.w	800e220 <_dtoa_r+0x9a8>
 800e104:	9b05      	ldr	r3, [sp, #20]
 800e106:	2b02      	cmp	r3, #2
 800e108:	dc50      	bgt.n	800e1ac <_dtoa_r+0x934>
 800e10a:	e089      	b.n	800e220 <_dtoa_r+0x9a8>
 800e10c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e10e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e112:	e75d      	b.n	800dfd0 <_dtoa_r+0x758>
 800e114:	9b01      	ldr	r3, [sp, #4]
 800e116:	1e5e      	subs	r6, r3, #1
 800e118:	9b06      	ldr	r3, [sp, #24]
 800e11a:	42b3      	cmp	r3, r6
 800e11c:	bfbf      	itttt	lt
 800e11e:	9b06      	ldrlt	r3, [sp, #24]
 800e120:	9606      	strlt	r6, [sp, #24]
 800e122:	1af2      	sublt	r2, r6, r3
 800e124:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e126:	bfb6      	itet	lt
 800e128:	189b      	addlt	r3, r3, r2
 800e12a:	1b9e      	subge	r6, r3, r6
 800e12c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e12e:	9b01      	ldr	r3, [sp, #4]
 800e130:	bfb8      	it	lt
 800e132:	2600      	movlt	r6, #0
 800e134:	2b00      	cmp	r3, #0
 800e136:	bfb5      	itete	lt
 800e138:	eba8 0503 	sublt.w	r5, r8, r3
 800e13c:	9b01      	ldrge	r3, [sp, #4]
 800e13e:	2300      	movlt	r3, #0
 800e140:	4645      	movge	r5, r8
 800e142:	e747      	b.n	800dfd4 <_dtoa_r+0x75c>
 800e144:	9e06      	ldr	r6, [sp, #24]
 800e146:	9f08      	ldr	r7, [sp, #32]
 800e148:	4645      	mov	r5, r8
 800e14a:	e74c      	b.n	800dfe6 <_dtoa_r+0x76e>
 800e14c:	9a06      	ldr	r2, [sp, #24]
 800e14e:	e775      	b.n	800e03c <_dtoa_r+0x7c4>
 800e150:	9b05      	ldr	r3, [sp, #20]
 800e152:	2b01      	cmp	r3, #1
 800e154:	dc18      	bgt.n	800e188 <_dtoa_r+0x910>
 800e156:	9b02      	ldr	r3, [sp, #8]
 800e158:	b9b3      	cbnz	r3, 800e188 <_dtoa_r+0x910>
 800e15a:	9b03      	ldr	r3, [sp, #12]
 800e15c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e160:	b9a3      	cbnz	r3, 800e18c <_dtoa_r+0x914>
 800e162:	9b03      	ldr	r3, [sp, #12]
 800e164:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e168:	0d1b      	lsrs	r3, r3, #20
 800e16a:	051b      	lsls	r3, r3, #20
 800e16c:	b12b      	cbz	r3, 800e17a <_dtoa_r+0x902>
 800e16e:	9b04      	ldr	r3, [sp, #16]
 800e170:	3301      	adds	r3, #1
 800e172:	9304      	str	r3, [sp, #16]
 800e174:	f108 0801 	add.w	r8, r8, #1
 800e178:	2301      	movs	r3, #1
 800e17a:	9306      	str	r3, [sp, #24]
 800e17c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e17e:	2b00      	cmp	r3, #0
 800e180:	f47f af74 	bne.w	800e06c <_dtoa_r+0x7f4>
 800e184:	2001      	movs	r0, #1
 800e186:	e779      	b.n	800e07c <_dtoa_r+0x804>
 800e188:	2300      	movs	r3, #0
 800e18a:	e7f6      	b.n	800e17a <_dtoa_r+0x902>
 800e18c:	9b02      	ldr	r3, [sp, #8]
 800e18e:	e7f4      	b.n	800e17a <_dtoa_r+0x902>
 800e190:	d085      	beq.n	800e09e <_dtoa_r+0x826>
 800e192:	4618      	mov	r0, r3
 800e194:	301c      	adds	r0, #28
 800e196:	e77d      	b.n	800e094 <_dtoa_r+0x81c>
 800e198:	40240000 	.word	0x40240000
 800e19c:	9b01      	ldr	r3, [sp, #4]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	dc38      	bgt.n	800e214 <_dtoa_r+0x99c>
 800e1a2:	9b05      	ldr	r3, [sp, #20]
 800e1a4:	2b02      	cmp	r3, #2
 800e1a6:	dd35      	ble.n	800e214 <_dtoa_r+0x99c>
 800e1a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e1ac:	f1b9 0f00 	cmp.w	r9, #0
 800e1b0:	d10d      	bne.n	800e1ce <_dtoa_r+0x956>
 800e1b2:	4631      	mov	r1, r6
 800e1b4:	464b      	mov	r3, r9
 800e1b6:	2205      	movs	r2, #5
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	f000 fbe5 	bl	800e988 <__multadd>
 800e1be:	4601      	mov	r1, r0
 800e1c0:	4606      	mov	r6, r0
 800e1c2:	4658      	mov	r0, fp
 800e1c4:	f000 fdfc 	bl	800edc0 <__mcmp>
 800e1c8:	2800      	cmp	r0, #0
 800e1ca:	f73f adbd 	bgt.w	800dd48 <_dtoa_r+0x4d0>
 800e1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1d0:	9d00      	ldr	r5, [sp, #0]
 800e1d2:	ea6f 0a03 	mvn.w	sl, r3
 800e1d6:	f04f 0800 	mov.w	r8, #0
 800e1da:	4631      	mov	r1, r6
 800e1dc:	4620      	mov	r0, r4
 800e1de:	f000 fbb1 	bl	800e944 <_Bfree>
 800e1e2:	2f00      	cmp	r7, #0
 800e1e4:	f43f aeb4 	beq.w	800df50 <_dtoa_r+0x6d8>
 800e1e8:	f1b8 0f00 	cmp.w	r8, #0
 800e1ec:	d005      	beq.n	800e1fa <_dtoa_r+0x982>
 800e1ee:	45b8      	cmp	r8, r7
 800e1f0:	d003      	beq.n	800e1fa <_dtoa_r+0x982>
 800e1f2:	4641      	mov	r1, r8
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	f000 fba5 	bl	800e944 <_Bfree>
 800e1fa:	4639      	mov	r1, r7
 800e1fc:	4620      	mov	r0, r4
 800e1fe:	f000 fba1 	bl	800e944 <_Bfree>
 800e202:	e6a5      	b.n	800df50 <_dtoa_r+0x6d8>
 800e204:	2600      	movs	r6, #0
 800e206:	4637      	mov	r7, r6
 800e208:	e7e1      	b.n	800e1ce <_dtoa_r+0x956>
 800e20a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e20c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e210:	4637      	mov	r7, r6
 800e212:	e599      	b.n	800dd48 <_dtoa_r+0x4d0>
 800e214:	9b08      	ldr	r3, [sp, #32]
 800e216:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	f000 80fd 	beq.w	800e41a <_dtoa_r+0xba2>
 800e220:	2d00      	cmp	r5, #0
 800e222:	dd05      	ble.n	800e230 <_dtoa_r+0x9b8>
 800e224:	4639      	mov	r1, r7
 800e226:	462a      	mov	r2, r5
 800e228:	4620      	mov	r0, r4
 800e22a:	f000 fd5d 	bl	800ece8 <__lshift>
 800e22e:	4607      	mov	r7, r0
 800e230:	9b06      	ldr	r3, [sp, #24]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d05c      	beq.n	800e2f0 <_dtoa_r+0xa78>
 800e236:	6879      	ldr	r1, [r7, #4]
 800e238:	4620      	mov	r0, r4
 800e23a:	f000 fb43 	bl	800e8c4 <_Balloc>
 800e23e:	4605      	mov	r5, r0
 800e240:	b928      	cbnz	r0, 800e24e <_dtoa_r+0x9d6>
 800e242:	4b80      	ldr	r3, [pc, #512]	; (800e444 <_dtoa_r+0xbcc>)
 800e244:	4602      	mov	r2, r0
 800e246:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e24a:	f7ff bb2e 	b.w	800d8aa <_dtoa_r+0x32>
 800e24e:	693a      	ldr	r2, [r7, #16]
 800e250:	3202      	adds	r2, #2
 800e252:	0092      	lsls	r2, r2, #2
 800e254:	f107 010c 	add.w	r1, r7, #12
 800e258:	300c      	adds	r0, #12
 800e25a:	f000 fb25 	bl	800e8a8 <memcpy>
 800e25e:	2201      	movs	r2, #1
 800e260:	4629      	mov	r1, r5
 800e262:	4620      	mov	r0, r4
 800e264:	f000 fd40 	bl	800ece8 <__lshift>
 800e268:	9b00      	ldr	r3, [sp, #0]
 800e26a:	3301      	adds	r3, #1
 800e26c:	9301      	str	r3, [sp, #4]
 800e26e:	9b00      	ldr	r3, [sp, #0]
 800e270:	444b      	add	r3, r9
 800e272:	9307      	str	r3, [sp, #28]
 800e274:	9b02      	ldr	r3, [sp, #8]
 800e276:	f003 0301 	and.w	r3, r3, #1
 800e27a:	46b8      	mov	r8, r7
 800e27c:	9306      	str	r3, [sp, #24]
 800e27e:	4607      	mov	r7, r0
 800e280:	9b01      	ldr	r3, [sp, #4]
 800e282:	4631      	mov	r1, r6
 800e284:	3b01      	subs	r3, #1
 800e286:	4658      	mov	r0, fp
 800e288:	9302      	str	r3, [sp, #8]
 800e28a:	f7ff fa6a 	bl	800d762 <quorem>
 800e28e:	4603      	mov	r3, r0
 800e290:	3330      	adds	r3, #48	; 0x30
 800e292:	9004      	str	r0, [sp, #16]
 800e294:	4641      	mov	r1, r8
 800e296:	4658      	mov	r0, fp
 800e298:	9308      	str	r3, [sp, #32]
 800e29a:	f000 fd91 	bl	800edc0 <__mcmp>
 800e29e:	463a      	mov	r2, r7
 800e2a0:	4681      	mov	r9, r0
 800e2a2:	4631      	mov	r1, r6
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	f000 fda7 	bl	800edf8 <__mdiff>
 800e2aa:	68c2      	ldr	r2, [r0, #12]
 800e2ac:	9b08      	ldr	r3, [sp, #32]
 800e2ae:	4605      	mov	r5, r0
 800e2b0:	bb02      	cbnz	r2, 800e2f4 <_dtoa_r+0xa7c>
 800e2b2:	4601      	mov	r1, r0
 800e2b4:	4658      	mov	r0, fp
 800e2b6:	f000 fd83 	bl	800edc0 <__mcmp>
 800e2ba:	9b08      	ldr	r3, [sp, #32]
 800e2bc:	4602      	mov	r2, r0
 800e2be:	4629      	mov	r1, r5
 800e2c0:	4620      	mov	r0, r4
 800e2c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e2c6:	f000 fb3d 	bl	800e944 <_Bfree>
 800e2ca:	9b05      	ldr	r3, [sp, #20]
 800e2cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2ce:	9d01      	ldr	r5, [sp, #4]
 800e2d0:	ea43 0102 	orr.w	r1, r3, r2
 800e2d4:	9b06      	ldr	r3, [sp, #24]
 800e2d6:	430b      	orrs	r3, r1
 800e2d8:	9b08      	ldr	r3, [sp, #32]
 800e2da:	d10d      	bne.n	800e2f8 <_dtoa_r+0xa80>
 800e2dc:	2b39      	cmp	r3, #57	; 0x39
 800e2de:	d029      	beq.n	800e334 <_dtoa_r+0xabc>
 800e2e0:	f1b9 0f00 	cmp.w	r9, #0
 800e2e4:	dd01      	ble.n	800e2ea <_dtoa_r+0xa72>
 800e2e6:	9b04      	ldr	r3, [sp, #16]
 800e2e8:	3331      	adds	r3, #49	; 0x31
 800e2ea:	9a02      	ldr	r2, [sp, #8]
 800e2ec:	7013      	strb	r3, [r2, #0]
 800e2ee:	e774      	b.n	800e1da <_dtoa_r+0x962>
 800e2f0:	4638      	mov	r0, r7
 800e2f2:	e7b9      	b.n	800e268 <_dtoa_r+0x9f0>
 800e2f4:	2201      	movs	r2, #1
 800e2f6:	e7e2      	b.n	800e2be <_dtoa_r+0xa46>
 800e2f8:	f1b9 0f00 	cmp.w	r9, #0
 800e2fc:	db06      	blt.n	800e30c <_dtoa_r+0xa94>
 800e2fe:	9905      	ldr	r1, [sp, #20]
 800e300:	ea41 0909 	orr.w	r9, r1, r9
 800e304:	9906      	ldr	r1, [sp, #24]
 800e306:	ea59 0101 	orrs.w	r1, r9, r1
 800e30a:	d120      	bne.n	800e34e <_dtoa_r+0xad6>
 800e30c:	2a00      	cmp	r2, #0
 800e30e:	ddec      	ble.n	800e2ea <_dtoa_r+0xa72>
 800e310:	4659      	mov	r1, fp
 800e312:	2201      	movs	r2, #1
 800e314:	4620      	mov	r0, r4
 800e316:	9301      	str	r3, [sp, #4]
 800e318:	f000 fce6 	bl	800ece8 <__lshift>
 800e31c:	4631      	mov	r1, r6
 800e31e:	4683      	mov	fp, r0
 800e320:	f000 fd4e 	bl	800edc0 <__mcmp>
 800e324:	2800      	cmp	r0, #0
 800e326:	9b01      	ldr	r3, [sp, #4]
 800e328:	dc02      	bgt.n	800e330 <_dtoa_r+0xab8>
 800e32a:	d1de      	bne.n	800e2ea <_dtoa_r+0xa72>
 800e32c:	07da      	lsls	r2, r3, #31
 800e32e:	d5dc      	bpl.n	800e2ea <_dtoa_r+0xa72>
 800e330:	2b39      	cmp	r3, #57	; 0x39
 800e332:	d1d8      	bne.n	800e2e6 <_dtoa_r+0xa6e>
 800e334:	9a02      	ldr	r2, [sp, #8]
 800e336:	2339      	movs	r3, #57	; 0x39
 800e338:	7013      	strb	r3, [r2, #0]
 800e33a:	462b      	mov	r3, r5
 800e33c:	461d      	mov	r5, r3
 800e33e:	3b01      	subs	r3, #1
 800e340:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e344:	2a39      	cmp	r2, #57	; 0x39
 800e346:	d050      	beq.n	800e3ea <_dtoa_r+0xb72>
 800e348:	3201      	adds	r2, #1
 800e34a:	701a      	strb	r2, [r3, #0]
 800e34c:	e745      	b.n	800e1da <_dtoa_r+0x962>
 800e34e:	2a00      	cmp	r2, #0
 800e350:	dd03      	ble.n	800e35a <_dtoa_r+0xae2>
 800e352:	2b39      	cmp	r3, #57	; 0x39
 800e354:	d0ee      	beq.n	800e334 <_dtoa_r+0xabc>
 800e356:	3301      	adds	r3, #1
 800e358:	e7c7      	b.n	800e2ea <_dtoa_r+0xa72>
 800e35a:	9a01      	ldr	r2, [sp, #4]
 800e35c:	9907      	ldr	r1, [sp, #28]
 800e35e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e362:	428a      	cmp	r2, r1
 800e364:	d02a      	beq.n	800e3bc <_dtoa_r+0xb44>
 800e366:	4659      	mov	r1, fp
 800e368:	2300      	movs	r3, #0
 800e36a:	220a      	movs	r2, #10
 800e36c:	4620      	mov	r0, r4
 800e36e:	f000 fb0b 	bl	800e988 <__multadd>
 800e372:	45b8      	cmp	r8, r7
 800e374:	4683      	mov	fp, r0
 800e376:	f04f 0300 	mov.w	r3, #0
 800e37a:	f04f 020a 	mov.w	r2, #10
 800e37e:	4641      	mov	r1, r8
 800e380:	4620      	mov	r0, r4
 800e382:	d107      	bne.n	800e394 <_dtoa_r+0xb1c>
 800e384:	f000 fb00 	bl	800e988 <__multadd>
 800e388:	4680      	mov	r8, r0
 800e38a:	4607      	mov	r7, r0
 800e38c:	9b01      	ldr	r3, [sp, #4]
 800e38e:	3301      	adds	r3, #1
 800e390:	9301      	str	r3, [sp, #4]
 800e392:	e775      	b.n	800e280 <_dtoa_r+0xa08>
 800e394:	f000 faf8 	bl	800e988 <__multadd>
 800e398:	4639      	mov	r1, r7
 800e39a:	4680      	mov	r8, r0
 800e39c:	2300      	movs	r3, #0
 800e39e:	220a      	movs	r2, #10
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	f000 faf1 	bl	800e988 <__multadd>
 800e3a6:	4607      	mov	r7, r0
 800e3a8:	e7f0      	b.n	800e38c <_dtoa_r+0xb14>
 800e3aa:	f1b9 0f00 	cmp.w	r9, #0
 800e3ae:	9a00      	ldr	r2, [sp, #0]
 800e3b0:	bfcc      	ite	gt
 800e3b2:	464d      	movgt	r5, r9
 800e3b4:	2501      	movle	r5, #1
 800e3b6:	4415      	add	r5, r2
 800e3b8:	f04f 0800 	mov.w	r8, #0
 800e3bc:	4659      	mov	r1, fp
 800e3be:	2201      	movs	r2, #1
 800e3c0:	4620      	mov	r0, r4
 800e3c2:	9301      	str	r3, [sp, #4]
 800e3c4:	f000 fc90 	bl	800ece8 <__lshift>
 800e3c8:	4631      	mov	r1, r6
 800e3ca:	4683      	mov	fp, r0
 800e3cc:	f000 fcf8 	bl	800edc0 <__mcmp>
 800e3d0:	2800      	cmp	r0, #0
 800e3d2:	dcb2      	bgt.n	800e33a <_dtoa_r+0xac2>
 800e3d4:	d102      	bne.n	800e3dc <_dtoa_r+0xb64>
 800e3d6:	9b01      	ldr	r3, [sp, #4]
 800e3d8:	07db      	lsls	r3, r3, #31
 800e3da:	d4ae      	bmi.n	800e33a <_dtoa_r+0xac2>
 800e3dc:	462b      	mov	r3, r5
 800e3de:	461d      	mov	r5, r3
 800e3e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e3e4:	2a30      	cmp	r2, #48	; 0x30
 800e3e6:	d0fa      	beq.n	800e3de <_dtoa_r+0xb66>
 800e3e8:	e6f7      	b.n	800e1da <_dtoa_r+0x962>
 800e3ea:	9a00      	ldr	r2, [sp, #0]
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d1a5      	bne.n	800e33c <_dtoa_r+0xac4>
 800e3f0:	f10a 0a01 	add.w	sl, sl, #1
 800e3f4:	2331      	movs	r3, #49	; 0x31
 800e3f6:	e779      	b.n	800e2ec <_dtoa_r+0xa74>
 800e3f8:	4b13      	ldr	r3, [pc, #76]	; (800e448 <_dtoa_r+0xbd0>)
 800e3fa:	f7ff baaf 	b.w	800d95c <_dtoa_r+0xe4>
 800e3fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e400:	2b00      	cmp	r3, #0
 800e402:	f47f aa86 	bne.w	800d912 <_dtoa_r+0x9a>
 800e406:	4b11      	ldr	r3, [pc, #68]	; (800e44c <_dtoa_r+0xbd4>)
 800e408:	f7ff baa8 	b.w	800d95c <_dtoa_r+0xe4>
 800e40c:	f1b9 0f00 	cmp.w	r9, #0
 800e410:	dc03      	bgt.n	800e41a <_dtoa_r+0xba2>
 800e412:	9b05      	ldr	r3, [sp, #20]
 800e414:	2b02      	cmp	r3, #2
 800e416:	f73f aec9 	bgt.w	800e1ac <_dtoa_r+0x934>
 800e41a:	9d00      	ldr	r5, [sp, #0]
 800e41c:	4631      	mov	r1, r6
 800e41e:	4658      	mov	r0, fp
 800e420:	f7ff f99f 	bl	800d762 <quorem>
 800e424:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e428:	f805 3b01 	strb.w	r3, [r5], #1
 800e42c:	9a00      	ldr	r2, [sp, #0]
 800e42e:	1aaa      	subs	r2, r5, r2
 800e430:	4591      	cmp	r9, r2
 800e432:	ddba      	ble.n	800e3aa <_dtoa_r+0xb32>
 800e434:	4659      	mov	r1, fp
 800e436:	2300      	movs	r3, #0
 800e438:	220a      	movs	r2, #10
 800e43a:	4620      	mov	r0, r4
 800e43c:	f000 faa4 	bl	800e988 <__multadd>
 800e440:	4683      	mov	fp, r0
 800e442:	e7eb      	b.n	800e41c <_dtoa_r+0xba4>
 800e444:	08019f27 	.word	0x08019f27
 800e448:	08019e80 	.word	0x08019e80
 800e44c:	08019ea4 	.word	0x08019ea4

0800e450 <__sflush_r>:
 800e450:	898a      	ldrh	r2, [r1, #12]
 800e452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e456:	4605      	mov	r5, r0
 800e458:	0710      	lsls	r0, r2, #28
 800e45a:	460c      	mov	r4, r1
 800e45c:	d458      	bmi.n	800e510 <__sflush_r+0xc0>
 800e45e:	684b      	ldr	r3, [r1, #4]
 800e460:	2b00      	cmp	r3, #0
 800e462:	dc05      	bgt.n	800e470 <__sflush_r+0x20>
 800e464:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e466:	2b00      	cmp	r3, #0
 800e468:	dc02      	bgt.n	800e470 <__sflush_r+0x20>
 800e46a:	2000      	movs	r0, #0
 800e46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e472:	2e00      	cmp	r6, #0
 800e474:	d0f9      	beq.n	800e46a <__sflush_r+0x1a>
 800e476:	2300      	movs	r3, #0
 800e478:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e47c:	682f      	ldr	r7, [r5, #0]
 800e47e:	602b      	str	r3, [r5, #0]
 800e480:	d032      	beq.n	800e4e8 <__sflush_r+0x98>
 800e482:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e484:	89a3      	ldrh	r3, [r4, #12]
 800e486:	075a      	lsls	r2, r3, #29
 800e488:	d505      	bpl.n	800e496 <__sflush_r+0x46>
 800e48a:	6863      	ldr	r3, [r4, #4]
 800e48c:	1ac0      	subs	r0, r0, r3
 800e48e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e490:	b10b      	cbz	r3, 800e496 <__sflush_r+0x46>
 800e492:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e494:	1ac0      	subs	r0, r0, r3
 800e496:	2300      	movs	r3, #0
 800e498:	4602      	mov	r2, r0
 800e49a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e49c:	6a21      	ldr	r1, [r4, #32]
 800e49e:	4628      	mov	r0, r5
 800e4a0:	47b0      	blx	r6
 800e4a2:	1c43      	adds	r3, r0, #1
 800e4a4:	89a3      	ldrh	r3, [r4, #12]
 800e4a6:	d106      	bne.n	800e4b6 <__sflush_r+0x66>
 800e4a8:	6829      	ldr	r1, [r5, #0]
 800e4aa:	291d      	cmp	r1, #29
 800e4ac:	d82c      	bhi.n	800e508 <__sflush_r+0xb8>
 800e4ae:	4a2a      	ldr	r2, [pc, #168]	; (800e558 <__sflush_r+0x108>)
 800e4b0:	40ca      	lsrs	r2, r1
 800e4b2:	07d6      	lsls	r6, r2, #31
 800e4b4:	d528      	bpl.n	800e508 <__sflush_r+0xb8>
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	6062      	str	r2, [r4, #4]
 800e4ba:	04d9      	lsls	r1, r3, #19
 800e4bc:	6922      	ldr	r2, [r4, #16]
 800e4be:	6022      	str	r2, [r4, #0]
 800e4c0:	d504      	bpl.n	800e4cc <__sflush_r+0x7c>
 800e4c2:	1c42      	adds	r2, r0, #1
 800e4c4:	d101      	bne.n	800e4ca <__sflush_r+0x7a>
 800e4c6:	682b      	ldr	r3, [r5, #0]
 800e4c8:	b903      	cbnz	r3, 800e4cc <__sflush_r+0x7c>
 800e4ca:	6560      	str	r0, [r4, #84]	; 0x54
 800e4cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4ce:	602f      	str	r7, [r5, #0]
 800e4d0:	2900      	cmp	r1, #0
 800e4d2:	d0ca      	beq.n	800e46a <__sflush_r+0x1a>
 800e4d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4d8:	4299      	cmp	r1, r3
 800e4da:	d002      	beq.n	800e4e2 <__sflush_r+0x92>
 800e4dc:	4628      	mov	r0, r5
 800e4de:	f000 fd7f 	bl	800efe0 <_free_r>
 800e4e2:	2000      	movs	r0, #0
 800e4e4:	6360      	str	r0, [r4, #52]	; 0x34
 800e4e6:	e7c1      	b.n	800e46c <__sflush_r+0x1c>
 800e4e8:	6a21      	ldr	r1, [r4, #32]
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	4628      	mov	r0, r5
 800e4ee:	47b0      	blx	r6
 800e4f0:	1c41      	adds	r1, r0, #1
 800e4f2:	d1c7      	bne.n	800e484 <__sflush_r+0x34>
 800e4f4:	682b      	ldr	r3, [r5, #0]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d0c4      	beq.n	800e484 <__sflush_r+0x34>
 800e4fa:	2b1d      	cmp	r3, #29
 800e4fc:	d001      	beq.n	800e502 <__sflush_r+0xb2>
 800e4fe:	2b16      	cmp	r3, #22
 800e500:	d101      	bne.n	800e506 <__sflush_r+0xb6>
 800e502:	602f      	str	r7, [r5, #0]
 800e504:	e7b1      	b.n	800e46a <__sflush_r+0x1a>
 800e506:	89a3      	ldrh	r3, [r4, #12]
 800e508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e50c:	81a3      	strh	r3, [r4, #12]
 800e50e:	e7ad      	b.n	800e46c <__sflush_r+0x1c>
 800e510:	690f      	ldr	r7, [r1, #16]
 800e512:	2f00      	cmp	r7, #0
 800e514:	d0a9      	beq.n	800e46a <__sflush_r+0x1a>
 800e516:	0793      	lsls	r3, r2, #30
 800e518:	680e      	ldr	r6, [r1, #0]
 800e51a:	bf08      	it	eq
 800e51c:	694b      	ldreq	r3, [r1, #20]
 800e51e:	600f      	str	r7, [r1, #0]
 800e520:	bf18      	it	ne
 800e522:	2300      	movne	r3, #0
 800e524:	eba6 0807 	sub.w	r8, r6, r7
 800e528:	608b      	str	r3, [r1, #8]
 800e52a:	f1b8 0f00 	cmp.w	r8, #0
 800e52e:	dd9c      	ble.n	800e46a <__sflush_r+0x1a>
 800e530:	6a21      	ldr	r1, [r4, #32]
 800e532:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e534:	4643      	mov	r3, r8
 800e536:	463a      	mov	r2, r7
 800e538:	4628      	mov	r0, r5
 800e53a:	47b0      	blx	r6
 800e53c:	2800      	cmp	r0, #0
 800e53e:	dc06      	bgt.n	800e54e <__sflush_r+0xfe>
 800e540:	89a3      	ldrh	r3, [r4, #12]
 800e542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e546:	81a3      	strh	r3, [r4, #12]
 800e548:	f04f 30ff 	mov.w	r0, #4294967295
 800e54c:	e78e      	b.n	800e46c <__sflush_r+0x1c>
 800e54e:	4407      	add	r7, r0
 800e550:	eba8 0800 	sub.w	r8, r8, r0
 800e554:	e7e9      	b.n	800e52a <__sflush_r+0xda>
 800e556:	bf00      	nop
 800e558:	20400001 	.word	0x20400001

0800e55c <_fflush_r>:
 800e55c:	b538      	push	{r3, r4, r5, lr}
 800e55e:	690b      	ldr	r3, [r1, #16]
 800e560:	4605      	mov	r5, r0
 800e562:	460c      	mov	r4, r1
 800e564:	b913      	cbnz	r3, 800e56c <_fflush_r+0x10>
 800e566:	2500      	movs	r5, #0
 800e568:	4628      	mov	r0, r5
 800e56a:	bd38      	pop	{r3, r4, r5, pc}
 800e56c:	b118      	cbz	r0, 800e576 <_fflush_r+0x1a>
 800e56e:	6983      	ldr	r3, [r0, #24]
 800e570:	b90b      	cbnz	r3, 800e576 <_fflush_r+0x1a>
 800e572:	f000 f887 	bl	800e684 <__sinit>
 800e576:	4b14      	ldr	r3, [pc, #80]	; (800e5c8 <_fflush_r+0x6c>)
 800e578:	429c      	cmp	r4, r3
 800e57a:	d11b      	bne.n	800e5b4 <_fflush_r+0x58>
 800e57c:	686c      	ldr	r4, [r5, #4]
 800e57e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d0ef      	beq.n	800e566 <_fflush_r+0xa>
 800e586:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e588:	07d0      	lsls	r0, r2, #31
 800e58a:	d404      	bmi.n	800e596 <_fflush_r+0x3a>
 800e58c:	0599      	lsls	r1, r3, #22
 800e58e:	d402      	bmi.n	800e596 <_fflush_r+0x3a>
 800e590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e592:	f000 f91a 	bl	800e7ca <__retarget_lock_acquire_recursive>
 800e596:	4628      	mov	r0, r5
 800e598:	4621      	mov	r1, r4
 800e59a:	f7ff ff59 	bl	800e450 <__sflush_r>
 800e59e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5a0:	07da      	lsls	r2, r3, #31
 800e5a2:	4605      	mov	r5, r0
 800e5a4:	d4e0      	bmi.n	800e568 <_fflush_r+0xc>
 800e5a6:	89a3      	ldrh	r3, [r4, #12]
 800e5a8:	059b      	lsls	r3, r3, #22
 800e5aa:	d4dd      	bmi.n	800e568 <_fflush_r+0xc>
 800e5ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5ae:	f000 f90d 	bl	800e7cc <__retarget_lock_release_recursive>
 800e5b2:	e7d9      	b.n	800e568 <_fflush_r+0xc>
 800e5b4:	4b05      	ldr	r3, [pc, #20]	; (800e5cc <_fflush_r+0x70>)
 800e5b6:	429c      	cmp	r4, r3
 800e5b8:	d101      	bne.n	800e5be <_fflush_r+0x62>
 800e5ba:	68ac      	ldr	r4, [r5, #8]
 800e5bc:	e7df      	b.n	800e57e <_fflush_r+0x22>
 800e5be:	4b04      	ldr	r3, [pc, #16]	; (800e5d0 <_fflush_r+0x74>)
 800e5c0:	429c      	cmp	r4, r3
 800e5c2:	bf08      	it	eq
 800e5c4:	68ec      	ldreq	r4, [r5, #12]
 800e5c6:	e7da      	b.n	800e57e <_fflush_r+0x22>
 800e5c8:	08019f58 	.word	0x08019f58
 800e5cc:	08019f78 	.word	0x08019f78
 800e5d0:	08019f38 	.word	0x08019f38

0800e5d4 <std>:
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	b510      	push	{r4, lr}
 800e5d8:	4604      	mov	r4, r0
 800e5da:	e9c0 3300 	strd	r3, r3, [r0]
 800e5de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e5e2:	6083      	str	r3, [r0, #8]
 800e5e4:	8181      	strh	r1, [r0, #12]
 800e5e6:	6643      	str	r3, [r0, #100]	; 0x64
 800e5e8:	81c2      	strh	r2, [r0, #14]
 800e5ea:	6183      	str	r3, [r0, #24]
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	2208      	movs	r2, #8
 800e5f0:	305c      	adds	r0, #92	; 0x5c
 800e5f2:	f7fe fb57 	bl	800cca4 <memset>
 800e5f6:	4b05      	ldr	r3, [pc, #20]	; (800e60c <std+0x38>)
 800e5f8:	6263      	str	r3, [r4, #36]	; 0x24
 800e5fa:	4b05      	ldr	r3, [pc, #20]	; (800e610 <std+0x3c>)
 800e5fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800e5fe:	4b05      	ldr	r3, [pc, #20]	; (800e614 <std+0x40>)
 800e600:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e602:	4b05      	ldr	r3, [pc, #20]	; (800e618 <std+0x44>)
 800e604:	6224      	str	r4, [r4, #32]
 800e606:	6323      	str	r3, [r4, #48]	; 0x30
 800e608:	bd10      	pop	{r4, pc}
 800e60a:	bf00      	nop
 800e60c:	0800f155 	.word	0x0800f155
 800e610:	0800f177 	.word	0x0800f177
 800e614:	0800f1af 	.word	0x0800f1af
 800e618:	0800f1d3 	.word	0x0800f1d3

0800e61c <_cleanup_r>:
 800e61c:	4901      	ldr	r1, [pc, #4]	; (800e624 <_cleanup_r+0x8>)
 800e61e:	f000 b8af 	b.w	800e780 <_fwalk_reent>
 800e622:	bf00      	nop
 800e624:	0800e55d 	.word	0x0800e55d

0800e628 <__sfmoreglue>:
 800e628:	b570      	push	{r4, r5, r6, lr}
 800e62a:	1e4a      	subs	r2, r1, #1
 800e62c:	2568      	movs	r5, #104	; 0x68
 800e62e:	4355      	muls	r5, r2
 800e630:	460e      	mov	r6, r1
 800e632:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e636:	f000 fd23 	bl	800f080 <_malloc_r>
 800e63a:	4604      	mov	r4, r0
 800e63c:	b140      	cbz	r0, 800e650 <__sfmoreglue+0x28>
 800e63e:	2100      	movs	r1, #0
 800e640:	e9c0 1600 	strd	r1, r6, [r0]
 800e644:	300c      	adds	r0, #12
 800e646:	60a0      	str	r0, [r4, #8]
 800e648:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e64c:	f7fe fb2a 	bl	800cca4 <memset>
 800e650:	4620      	mov	r0, r4
 800e652:	bd70      	pop	{r4, r5, r6, pc}

0800e654 <__sfp_lock_acquire>:
 800e654:	4801      	ldr	r0, [pc, #4]	; (800e65c <__sfp_lock_acquire+0x8>)
 800e656:	f000 b8b8 	b.w	800e7ca <__retarget_lock_acquire_recursive>
 800e65a:	bf00      	nop
 800e65c:	20012904 	.word	0x20012904

0800e660 <__sfp_lock_release>:
 800e660:	4801      	ldr	r0, [pc, #4]	; (800e668 <__sfp_lock_release+0x8>)
 800e662:	f000 b8b3 	b.w	800e7cc <__retarget_lock_release_recursive>
 800e666:	bf00      	nop
 800e668:	20012904 	.word	0x20012904

0800e66c <__sinit_lock_acquire>:
 800e66c:	4801      	ldr	r0, [pc, #4]	; (800e674 <__sinit_lock_acquire+0x8>)
 800e66e:	f000 b8ac 	b.w	800e7ca <__retarget_lock_acquire_recursive>
 800e672:	bf00      	nop
 800e674:	200128ff 	.word	0x200128ff

0800e678 <__sinit_lock_release>:
 800e678:	4801      	ldr	r0, [pc, #4]	; (800e680 <__sinit_lock_release+0x8>)
 800e67a:	f000 b8a7 	b.w	800e7cc <__retarget_lock_release_recursive>
 800e67e:	bf00      	nop
 800e680:	200128ff 	.word	0x200128ff

0800e684 <__sinit>:
 800e684:	b510      	push	{r4, lr}
 800e686:	4604      	mov	r4, r0
 800e688:	f7ff fff0 	bl	800e66c <__sinit_lock_acquire>
 800e68c:	69a3      	ldr	r3, [r4, #24]
 800e68e:	b11b      	cbz	r3, 800e698 <__sinit+0x14>
 800e690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e694:	f7ff bff0 	b.w	800e678 <__sinit_lock_release>
 800e698:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e69c:	6523      	str	r3, [r4, #80]	; 0x50
 800e69e:	4b13      	ldr	r3, [pc, #76]	; (800e6ec <__sinit+0x68>)
 800e6a0:	4a13      	ldr	r2, [pc, #76]	; (800e6f0 <__sinit+0x6c>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	62a2      	str	r2, [r4, #40]	; 0x28
 800e6a6:	42a3      	cmp	r3, r4
 800e6a8:	bf04      	itt	eq
 800e6aa:	2301      	moveq	r3, #1
 800e6ac:	61a3      	streq	r3, [r4, #24]
 800e6ae:	4620      	mov	r0, r4
 800e6b0:	f000 f820 	bl	800e6f4 <__sfp>
 800e6b4:	6060      	str	r0, [r4, #4]
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	f000 f81c 	bl	800e6f4 <__sfp>
 800e6bc:	60a0      	str	r0, [r4, #8]
 800e6be:	4620      	mov	r0, r4
 800e6c0:	f000 f818 	bl	800e6f4 <__sfp>
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	60e0      	str	r0, [r4, #12]
 800e6c8:	2104      	movs	r1, #4
 800e6ca:	6860      	ldr	r0, [r4, #4]
 800e6cc:	f7ff ff82 	bl	800e5d4 <std>
 800e6d0:	68a0      	ldr	r0, [r4, #8]
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	2109      	movs	r1, #9
 800e6d6:	f7ff ff7d 	bl	800e5d4 <std>
 800e6da:	68e0      	ldr	r0, [r4, #12]
 800e6dc:	2202      	movs	r2, #2
 800e6de:	2112      	movs	r1, #18
 800e6e0:	f7ff ff78 	bl	800e5d4 <std>
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	61a3      	str	r3, [r4, #24]
 800e6e8:	e7d2      	b.n	800e690 <__sinit+0xc>
 800e6ea:	bf00      	nop
 800e6ec:	08019e6c 	.word	0x08019e6c
 800e6f0:	0800e61d 	.word	0x0800e61d

0800e6f4 <__sfp>:
 800e6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6f6:	4607      	mov	r7, r0
 800e6f8:	f7ff ffac 	bl	800e654 <__sfp_lock_acquire>
 800e6fc:	4b1e      	ldr	r3, [pc, #120]	; (800e778 <__sfp+0x84>)
 800e6fe:	681e      	ldr	r6, [r3, #0]
 800e700:	69b3      	ldr	r3, [r6, #24]
 800e702:	b913      	cbnz	r3, 800e70a <__sfp+0x16>
 800e704:	4630      	mov	r0, r6
 800e706:	f7ff ffbd 	bl	800e684 <__sinit>
 800e70a:	3648      	adds	r6, #72	; 0x48
 800e70c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e710:	3b01      	subs	r3, #1
 800e712:	d503      	bpl.n	800e71c <__sfp+0x28>
 800e714:	6833      	ldr	r3, [r6, #0]
 800e716:	b30b      	cbz	r3, 800e75c <__sfp+0x68>
 800e718:	6836      	ldr	r6, [r6, #0]
 800e71a:	e7f7      	b.n	800e70c <__sfp+0x18>
 800e71c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e720:	b9d5      	cbnz	r5, 800e758 <__sfp+0x64>
 800e722:	4b16      	ldr	r3, [pc, #88]	; (800e77c <__sfp+0x88>)
 800e724:	60e3      	str	r3, [r4, #12]
 800e726:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e72a:	6665      	str	r5, [r4, #100]	; 0x64
 800e72c:	f000 f84c 	bl	800e7c8 <__retarget_lock_init_recursive>
 800e730:	f7ff ff96 	bl	800e660 <__sfp_lock_release>
 800e734:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e738:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e73c:	6025      	str	r5, [r4, #0]
 800e73e:	61a5      	str	r5, [r4, #24]
 800e740:	2208      	movs	r2, #8
 800e742:	4629      	mov	r1, r5
 800e744:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e748:	f7fe faac 	bl	800cca4 <memset>
 800e74c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e750:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e754:	4620      	mov	r0, r4
 800e756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e758:	3468      	adds	r4, #104	; 0x68
 800e75a:	e7d9      	b.n	800e710 <__sfp+0x1c>
 800e75c:	2104      	movs	r1, #4
 800e75e:	4638      	mov	r0, r7
 800e760:	f7ff ff62 	bl	800e628 <__sfmoreglue>
 800e764:	4604      	mov	r4, r0
 800e766:	6030      	str	r0, [r6, #0]
 800e768:	2800      	cmp	r0, #0
 800e76a:	d1d5      	bne.n	800e718 <__sfp+0x24>
 800e76c:	f7ff ff78 	bl	800e660 <__sfp_lock_release>
 800e770:	230c      	movs	r3, #12
 800e772:	603b      	str	r3, [r7, #0]
 800e774:	e7ee      	b.n	800e754 <__sfp+0x60>
 800e776:	bf00      	nop
 800e778:	08019e6c 	.word	0x08019e6c
 800e77c:	ffff0001 	.word	0xffff0001

0800e780 <_fwalk_reent>:
 800e780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e784:	4606      	mov	r6, r0
 800e786:	4688      	mov	r8, r1
 800e788:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e78c:	2700      	movs	r7, #0
 800e78e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e792:	f1b9 0901 	subs.w	r9, r9, #1
 800e796:	d505      	bpl.n	800e7a4 <_fwalk_reent+0x24>
 800e798:	6824      	ldr	r4, [r4, #0]
 800e79a:	2c00      	cmp	r4, #0
 800e79c:	d1f7      	bne.n	800e78e <_fwalk_reent+0xe>
 800e79e:	4638      	mov	r0, r7
 800e7a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7a4:	89ab      	ldrh	r3, [r5, #12]
 800e7a6:	2b01      	cmp	r3, #1
 800e7a8:	d907      	bls.n	800e7ba <_fwalk_reent+0x3a>
 800e7aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	d003      	beq.n	800e7ba <_fwalk_reent+0x3a>
 800e7b2:	4629      	mov	r1, r5
 800e7b4:	4630      	mov	r0, r6
 800e7b6:	47c0      	blx	r8
 800e7b8:	4307      	orrs	r7, r0
 800e7ba:	3568      	adds	r5, #104	; 0x68
 800e7bc:	e7e9      	b.n	800e792 <_fwalk_reent+0x12>
	...

0800e7c0 <_localeconv_r>:
 800e7c0:	4800      	ldr	r0, [pc, #0]	; (800e7c4 <_localeconv_r+0x4>)
 800e7c2:	4770      	bx	lr
 800e7c4:	20000278 	.word	0x20000278

0800e7c8 <__retarget_lock_init_recursive>:
 800e7c8:	4770      	bx	lr

0800e7ca <__retarget_lock_acquire_recursive>:
 800e7ca:	4770      	bx	lr

0800e7cc <__retarget_lock_release_recursive>:
 800e7cc:	4770      	bx	lr

0800e7ce <__swhatbuf_r>:
 800e7ce:	b570      	push	{r4, r5, r6, lr}
 800e7d0:	460e      	mov	r6, r1
 800e7d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7d6:	2900      	cmp	r1, #0
 800e7d8:	b096      	sub	sp, #88	; 0x58
 800e7da:	4614      	mov	r4, r2
 800e7dc:	461d      	mov	r5, r3
 800e7de:	da07      	bge.n	800e7f0 <__swhatbuf_r+0x22>
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	602b      	str	r3, [r5, #0]
 800e7e4:	89b3      	ldrh	r3, [r6, #12]
 800e7e6:	061a      	lsls	r2, r3, #24
 800e7e8:	d410      	bmi.n	800e80c <__swhatbuf_r+0x3e>
 800e7ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7ee:	e00e      	b.n	800e80e <__swhatbuf_r+0x40>
 800e7f0:	466a      	mov	r2, sp
 800e7f2:	f000 fd45 	bl	800f280 <_fstat_r>
 800e7f6:	2800      	cmp	r0, #0
 800e7f8:	dbf2      	blt.n	800e7e0 <__swhatbuf_r+0x12>
 800e7fa:	9a01      	ldr	r2, [sp, #4]
 800e7fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e800:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e804:	425a      	negs	r2, r3
 800e806:	415a      	adcs	r2, r3
 800e808:	602a      	str	r2, [r5, #0]
 800e80a:	e7ee      	b.n	800e7ea <__swhatbuf_r+0x1c>
 800e80c:	2340      	movs	r3, #64	; 0x40
 800e80e:	2000      	movs	r0, #0
 800e810:	6023      	str	r3, [r4, #0]
 800e812:	b016      	add	sp, #88	; 0x58
 800e814:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e818 <__smakebuf_r>:
 800e818:	898b      	ldrh	r3, [r1, #12]
 800e81a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e81c:	079d      	lsls	r5, r3, #30
 800e81e:	4606      	mov	r6, r0
 800e820:	460c      	mov	r4, r1
 800e822:	d507      	bpl.n	800e834 <__smakebuf_r+0x1c>
 800e824:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e828:	6023      	str	r3, [r4, #0]
 800e82a:	6123      	str	r3, [r4, #16]
 800e82c:	2301      	movs	r3, #1
 800e82e:	6163      	str	r3, [r4, #20]
 800e830:	b002      	add	sp, #8
 800e832:	bd70      	pop	{r4, r5, r6, pc}
 800e834:	ab01      	add	r3, sp, #4
 800e836:	466a      	mov	r2, sp
 800e838:	f7ff ffc9 	bl	800e7ce <__swhatbuf_r>
 800e83c:	9900      	ldr	r1, [sp, #0]
 800e83e:	4605      	mov	r5, r0
 800e840:	4630      	mov	r0, r6
 800e842:	f000 fc1d 	bl	800f080 <_malloc_r>
 800e846:	b948      	cbnz	r0, 800e85c <__smakebuf_r+0x44>
 800e848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e84c:	059a      	lsls	r2, r3, #22
 800e84e:	d4ef      	bmi.n	800e830 <__smakebuf_r+0x18>
 800e850:	f023 0303 	bic.w	r3, r3, #3
 800e854:	f043 0302 	orr.w	r3, r3, #2
 800e858:	81a3      	strh	r3, [r4, #12]
 800e85a:	e7e3      	b.n	800e824 <__smakebuf_r+0xc>
 800e85c:	4b0d      	ldr	r3, [pc, #52]	; (800e894 <__smakebuf_r+0x7c>)
 800e85e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e860:	89a3      	ldrh	r3, [r4, #12]
 800e862:	6020      	str	r0, [r4, #0]
 800e864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e868:	81a3      	strh	r3, [r4, #12]
 800e86a:	9b00      	ldr	r3, [sp, #0]
 800e86c:	6163      	str	r3, [r4, #20]
 800e86e:	9b01      	ldr	r3, [sp, #4]
 800e870:	6120      	str	r0, [r4, #16]
 800e872:	b15b      	cbz	r3, 800e88c <__smakebuf_r+0x74>
 800e874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e878:	4630      	mov	r0, r6
 800e87a:	f000 fd13 	bl	800f2a4 <_isatty_r>
 800e87e:	b128      	cbz	r0, 800e88c <__smakebuf_r+0x74>
 800e880:	89a3      	ldrh	r3, [r4, #12]
 800e882:	f023 0303 	bic.w	r3, r3, #3
 800e886:	f043 0301 	orr.w	r3, r3, #1
 800e88a:	81a3      	strh	r3, [r4, #12]
 800e88c:	89a0      	ldrh	r0, [r4, #12]
 800e88e:	4305      	orrs	r5, r0
 800e890:	81a5      	strh	r5, [r4, #12]
 800e892:	e7cd      	b.n	800e830 <__smakebuf_r+0x18>
 800e894:	0800e61d 	.word	0x0800e61d

0800e898 <malloc>:
 800e898:	4b02      	ldr	r3, [pc, #8]	; (800e8a4 <malloc+0xc>)
 800e89a:	4601      	mov	r1, r0
 800e89c:	6818      	ldr	r0, [r3, #0]
 800e89e:	f000 bbef 	b.w	800f080 <_malloc_r>
 800e8a2:	bf00      	nop
 800e8a4:	20000124 	.word	0x20000124

0800e8a8 <memcpy>:
 800e8a8:	440a      	add	r2, r1
 800e8aa:	4291      	cmp	r1, r2
 800e8ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800e8b0:	d100      	bne.n	800e8b4 <memcpy+0xc>
 800e8b2:	4770      	bx	lr
 800e8b4:	b510      	push	{r4, lr}
 800e8b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8be:	4291      	cmp	r1, r2
 800e8c0:	d1f9      	bne.n	800e8b6 <memcpy+0xe>
 800e8c2:	bd10      	pop	{r4, pc}

0800e8c4 <_Balloc>:
 800e8c4:	b570      	push	{r4, r5, r6, lr}
 800e8c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e8c8:	4604      	mov	r4, r0
 800e8ca:	460d      	mov	r5, r1
 800e8cc:	b976      	cbnz	r6, 800e8ec <_Balloc+0x28>
 800e8ce:	2010      	movs	r0, #16
 800e8d0:	f7ff ffe2 	bl	800e898 <malloc>
 800e8d4:	4602      	mov	r2, r0
 800e8d6:	6260      	str	r0, [r4, #36]	; 0x24
 800e8d8:	b920      	cbnz	r0, 800e8e4 <_Balloc+0x20>
 800e8da:	4b18      	ldr	r3, [pc, #96]	; (800e93c <_Balloc+0x78>)
 800e8dc:	4818      	ldr	r0, [pc, #96]	; (800e940 <_Balloc+0x7c>)
 800e8de:	2166      	movs	r1, #102	; 0x66
 800e8e0:	f000 fc8e 	bl	800f200 <__assert_func>
 800e8e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e8e8:	6006      	str	r6, [r0, #0]
 800e8ea:	60c6      	str	r6, [r0, #12]
 800e8ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e8ee:	68f3      	ldr	r3, [r6, #12]
 800e8f0:	b183      	cbz	r3, 800e914 <_Balloc+0x50>
 800e8f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8f4:	68db      	ldr	r3, [r3, #12]
 800e8f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e8fa:	b9b8      	cbnz	r0, 800e92c <_Balloc+0x68>
 800e8fc:	2101      	movs	r1, #1
 800e8fe:	fa01 f605 	lsl.w	r6, r1, r5
 800e902:	1d72      	adds	r2, r6, #5
 800e904:	0092      	lsls	r2, r2, #2
 800e906:	4620      	mov	r0, r4
 800e908:	f000 fb5a 	bl	800efc0 <_calloc_r>
 800e90c:	b160      	cbz	r0, 800e928 <_Balloc+0x64>
 800e90e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e912:	e00e      	b.n	800e932 <_Balloc+0x6e>
 800e914:	2221      	movs	r2, #33	; 0x21
 800e916:	2104      	movs	r1, #4
 800e918:	4620      	mov	r0, r4
 800e91a:	f000 fb51 	bl	800efc0 <_calloc_r>
 800e91e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e920:	60f0      	str	r0, [r6, #12]
 800e922:	68db      	ldr	r3, [r3, #12]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d1e4      	bne.n	800e8f2 <_Balloc+0x2e>
 800e928:	2000      	movs	r0, #0
 800e92a:	bd70      	pop	{r4, r5, r6, pc}
 800e92c:	6802      	ldr	r2, [r0, #0]
 800e92e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e932:	2300      	movs	r3, #0
 800e934:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e938:	e7f7      	b.n	800e92a <_Balloc+0x66>
 800e93a:	bf00      	nop
 800e93c:	08019eb1 	.word	0x08019eb1
 800e940:	08019f98 	.word	0x08019f98

0800e944 <_Bfree>:
 800e944:	b570      	push	{r4, r5, r6, lr}
 800e946:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e948:	4605      	mov	r5, r0
 800e94a:	460c      	mov	r4, r1
 800e94c:	b976      	cbnz	r6, 800e96c <_Bfree+0x28>
 800e94e:	2010      	movs	r0, #16
 800e950:	f7ff ffa2 	bl	800e898 <malloc>
 800e954:	4602      	mov	r2, r0
 800e956:	6268      	str	r0, [r5, #36]	; 0x24
 800e958:	b920      	cbnz	r0, 800e964 <_Bfree+0x20>
 800e95a:	4b09      	ldr	r3, [pc, #36]	; (800e980 <_Bfree+0x3c>)
 800e95c:	4809      	ldr	r0, [pc, #36]	; (800e984 <_Bfree+0x40>)
 800e95e:	218a      	movs	r1, #138	; 0x8a
 800e960:	f000 fc4e 	bl	800f200 <__assert_func>
 800e964:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e968:	6006      	str	r6, [r0, #0]
 800e96a:	60c6      	str	r6, [r0, #12]
 800e96c:	b13c      	cbz	r4, 800e97e <_Bfree+0x3a>
 800e96e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e970:	6862      	ldr	r2, [r4, #4]
 800e972:	68db      	ldr	r3, [r3, #12]
 800e974:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e978:	6021      	str	r1, [r4, #0]
 800e97a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e97e:	bd70      	pop	{r4, r5, r6, pc}
 800e980:	08019eb1 	.word	0x08019eb1
 800e984:	08019f98 	.word	0x08019f98

0800e988 <__multadd>:
 800e988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e98c:	690e      	ldr	r6, [r1, #16]
 800e98e:	4607      	mov	r7, r0
 800e990:	4698      	mov	r8, r3
 800e992:	460c      	mov	r4, r1
 800e994:	f101 0014 	add.w	r0, r1, #20
 800e998:	2300      	movs	r3, #0
 800e99a:	6805      	ldr	r5, [r0, #0]
 800e99c:	b2a9      	uxth	r1, r5
 800e99e:	fb02 8101 	mla	r1, r2, r1, r8
 800e9a2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e9a6:	0c2d      	lsrs	r5, r5, #16
 800e9a8:	fb02 c505 	mla	r5, r2, r5, ip
 800e9ac:	b289      	uxth	r1, r1
 800e9ae:	3301      	adds	r3, #1
 800e9b0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e9b4:	429e      	cmp	r6, r3
 800e9b6:	f840 1b04 	str.w	r1, [r0], #4
 800e9ba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e9be:	dcec      	bgt.n	800e99a <__multadd+0x12>
 800e9c0:	f1b8 0f00 	cmp.w	r8, #0
 800e9c4:	d022      	beq.n	800ea0c <__multadd+0x84>
 800e9c6:	68a3      	ldr	r3, [r4, #8]
 800e9c8:	42b3      	cmp	r3, r6
 800e9ca:	dc19      	bgt.n	800ea00 <__multadd+0x78>
 800e9cc:	6861      	ldr	r1, [r4, #4]
 800e9ce:	4638      	mov	r0, r7
 800e9d0:	3101      	adds	r1, #1
 800e9d2:	f7ff ff77 	bl	800e8c4 <_Balloc>
 800e9d6:	4605      	mov	r5, r0
 800e9d8:	b928      	cbnz	r0, 800e9e6 <__multadd+0x5e>
 800e9da:	4602      	mov	r2, r0
 800e9dc:	4b0d      	ldr	r3, [pc, #52]	; (800ea14 <__multadd+0x8c>)
 800e9de:	480e      	ldr	r0, [pc, #56]	; (800ea18 <__multadd+0x90>)
 800e9e0:	21b5      	movs	r1, #181	; 0xb5
 800e9e2:	f000 fc0d 	bl	800f200 <__assert_func>
 800e9e6:	6922      	ldr	r2, [r4, #16]
 800e9e8:	3202      	adds	r2, #2
 800e9ea:	f104 010c 	add.w	r1, r4, #12
 800e9ee:	0092      	lsls	r2, r2, #2
 800e9f0:	300c      	adds	r0, #12
 800e9f2:	f7ff ff59 	bl	800e8a8 <memcpy>
 800e9f6:	4621      	mov	r1, r4
 800e9f8:	4638      	mov	r0, r7
 800e9fa:	f7ff ffa3 	bl	800e944 <_Bfree>
 800e9fe:	462c      	mov	r4, r5
 800ea00:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ea04:	3601      	adds	r6, #1
 800ea06:	f8c3 8014 	str.w	r8, [r3, #20]
 800ea0a:	6126      	str	r6, [r4, #16]
 800ea0c:	4620      	mov	r0, r4
 800ea0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea12:	bf00      	nop
 800ea14:	08019f27 	.word	0x08019f27
 800ea18:	08019f98 	.word	0x08019f98

0800ea1c <__hi0bits>:
 800ea1c:	0c03      	lsrs	r3, r0, #16
 800ea1e:	041b      	lsls	r3, r3, #16
 800ea20:	b9d3      	cbnz	r3, 800ea58 <__hi0bits+0x3c>
 800ea22:	0400      	lsls	r0, r0, #16
 800ea24:	2310      	movs	r3, #16
 800ea26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ea2a:	bf04      	itt	eq
 800ea2c:	0200      	lsleq	r0, r0, #8
 800ea2e:	3308      	addeq	r3, #8
 800ea30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ea34:	bf04      	itt	eq
 800ea36:	0100      	lsleq	r0, r0, #4
 800ea38:	3304      	addeq	r3, #4
 800ea3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ea3e:	bf04      	itt	eq
 800ea40:	0080      	lsleq	r0, r0, #2
 800ea42:	3302      	addeq	r3, #2
 800ea44:	2800      	cmp	r0, #0
 800ea46:	db05      	blt.n	800ea54 <__hi0bits+0x38>
 800ea48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ea4c:	f103 0301 	add.w	r3, r3, #1
 800ea50:	bf08      	it	eq
 800ea52:	2320      	moveq	r3, #32
 800ea54:	4618      	mov	r0, r3
 800ea56:	4770      	bx	lr
 800ea58:	2300      	movs	r3, #0
 800ea5a:	e7e4      	b.n	800ea26 <__hi0bits+0xa>

0800ea5c <__lo0bits>:
 800ea5c:	6803      	ldr	r3, [r0, #0]
 800ea5e:	f013 0207 	ands.w	r2, r3, #7
 800ea62:	4601      	mov	r1, r0
 800ea64:	d00b      	beq.n	800ea7e <__lo0bits+0x22>
 800ea66:	07da      	lsls	r2, r3, #31
 800ea68:	d424      	bmi.n	800eab4 <__lo0bits+0x58>
 800ea6a:	0798      	lsls	r0, r3, #30
 800ea6c:	bf49      	itett	mi
 800ea6e:	085b      	lsrmi	r3, r3, #1
 800ea70:	089b      	lsrpl	r3, r3, #2
 800ea72:	2001      	movmi	r0, #1
 800ea74:	600b      	strmi	r3, [r1, #0]
 800ea76:	bf5c      	itt	pl
 800ea78:	600b      	strpl	r3, [r1, #0]
 800ea7a:	2002      	movpl	r0, #2
 800ea7c:	4770      	bx	lr
 800ea7e:	b298      	uxth	r0, r3
 800ea80:	b9b0      	cbnz	r0, 800eab0 <__lo0bits+0x54>
 800ea82:	0c1b      	lsrs	r3, r3, #16
 800ea84:	2010      	movs	r0, #16
 800ea86:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ea8a:	bf04      	itt	eq
 800ea8c:	0a1b      	lsreq	r3, r3, #8
 800ea8e:	3008      	addeq	r0, #8
 800ea90:	071a      	lsls	r2, r3, #28
 800ea92:	bf04      	itt	eq
 800ea94:	091b      	lsreq	r3, r3, #4
 800ea96:	3004      	addeq	r0, #4
 800ea98:	079a      	lsls	r2, r3, #30
 800ea9a:	bf04      	itt	eq
 800ea9c:	089b      	lsreq	r3, r3, #2
 800ea9e:	3002      	addeq	r0, #2
 800eaa0:	07da      	lsls	r2, r3, #31
 800eaa2:	d403      	bmi.n	800eaac <__lo0bits+0x50>
 800eaa4:	085b      	lsrs	r3, r3, #1
 800eaa6:	f100 0001 	add.w	r0, r0, #1
 800eaaa:	d005      	beq.n	800eab8 <__lo0bits+0x5c>
 800eaac:	600b      	str	r3, [r1, #0]
 800eaae:	4770      	bx	lr
 800eab0:	4610      	mov	r0, r2
 800eab2:	e7e8      	b.n	800ea86 <__lo0bits+0x2a>
 800eab4:	2000      	movs	r0, #0
 800eab6:	4770      	bx	lr
 800eab8:	2020      	movs	r0, #32
 800eaba:	4770      	bx	lr

0800eabc <__i2b>:
 800eabc:	b510      	push	{r4, lr}
 800eabe:	460c      	mov	r4, r1
 800eac0:	2101      	movs	r1, #1
 800eac2:	f7ff feff 	bl	800e8c4 <_Balloc>
 800eac6:	4602      	mov	r2, r0
 800eac8:	b928      	cbnz	r0, 800ead6 <__i2b+0x1a>
 800eaca:	4b05      	ldr	r3, [pc, #20]	; (800eae0 <__i2b+0x24>)
 800eacc:	4805      	ldr	r0, [pc, #20]	; (800eae4 <__i2b+0x28>)
 800eace:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ead2:	f000 fb95 	bl	800f200 <__assert_func>
 800ead6:	2301      	movs	r3, #1
 800ead8:	6144      	str	r4, [r0, #20]
 800eada:	6103      	str	r3, [r0, #16]
 800eadc:	bd10      	pop	{r4, pc}
 800eade:	bf00      	nop
 800eae0:	08019f27 	.word	0x08019f27
 800eae4:	08019f98 	.word	0x08019f98

0800eae8 <__multiply>:
 800eae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaec:	4614      	mov	r4, r2
 800eaee:	690a      	ldr	r2, [r1, #16]
 800eaf0:	6923      	ldr	r3, [r4, #16]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	bfb8      	it	lt
 800eaf6:	460b      	movlt	r3, r1
 800eaf8:	460d      	mov	r5, r1
 800eafa:	bfbc      	itt	lt
 800eafc:	4625      	movlt	r5, r4
 800eafe:	461c      	movlt	r4, r3
 800eb00:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800eb04:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800eb08:	68ab      	ldr	r3, [r5, #8]
 800eb0a:	6869      	ldr	r1, [r5, #4]
 800eb0c:	eb0a 0709 	add.w	r7, sl, r9
 800eb10:	42bb      	cmp	r3, r7
 800eb12:	b085      	sub	sp, #20
 800eb14:	bfb8      	it	lt
 800eb16:	3101      	addlt	r1, #1
 800eb18:	f7ff fed4 	bl	800e8c4 <_Balloc>
 800eb1c:	b930      	cbnz	r0, 800eb2c <__multiply+0x44>
 800eb1e:	4602      	mov	r2, r0
 800eb20:	4b42      	ldr	r3, [pc, #264]	; (800ec2c <__multiply+0x144>)
 800eb22:	4843      	ldr	r0, [pc, #268]	; (800ec30 <__multiply+0x148>)
 800eb24:	f240 115d 	movw	r1, #349	; 0x15d
 800eb28:	f000 fb6a 	bl	800f200 <__assert_func>
 800eb2c:	f100 0614 	add.w	r6, r0, #20
 800eb30:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800eb34:	4633      	mov	r3, r6
 800eb36:	2200      	movs	r2, #0
 800eb38:	4543      	cmp	r3, r8
 800eb3a:	d31e      	bcc.n	800eb7a <__multiply+0x92>
 800eb3c:	f105 0c14 	add.w	ip, r5, #20
 800eb40:	f104 0314 	add.w	r3, r4, #20
 800eb44:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800eb48:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800eb4c:	9202      	str	r2, [sp, #8]
 800eb4e:	ebac 0205 	sub.w	r2, ip, r5
 800eb52:	3a15      	subs	r2, #21
 800eb54:	f022 0203 	bic.w	r2, r2, #3
 800eb58:	3204      	adds	r2, #4
 800eb5a:	f105 0115 	add.w	r1, r5, #21
 800eb5e:	458c      	cmp	ip, r1
 800eb60:	bf38      	it	cc
 800eb62:	2204      	movcc	r2, #4
 800eb64:	9201      	str	r2, [sp, #4]
 800eb66:	9a02      	ldr	r2, [sp, #8]
 800eb68:	9303      	str	r3, [sp, #12]
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	d808      	bhi.n	800eb80 <__multiply+0x98>
 800eb6e:	2f00      	cmp	r7, #0
 800eb70:	dc55      	bgt.n	800ec1e <__multiply+0x136>
 800eb72:	6107      	str	r7, [r0, #16]
 800eb74:	b005      	add	sp, #20
 800eb76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb7a:	f843 2b04 	str.w	r2, [r3], #4
 800eb7e:	e7db      	b.n	800eb38 <__multiply+0x50>
 800eb80:	f8b3 a000 	ldrh.w	sl, [r3]
 800eb84:	f1ba 0f00 	cmp.w	sl, #0
 800eb88:	d020      	beq.n	800ebcc <__multiply+0xe4>
 800eb8a:	f105 0e14 	add.w	lr, r5, #20
 800eb8e:	46b1      	mov	r9, r6
 800eb90:	2200      	movs	r2, #0
 800eb92:	f85e 4b04 	ldr.w	r4, [lr], #4
 800eb96:	f8d9 b000 	ldr.w	fp, [r9]
 800eb9a:	b2a1      	uxth	r1, r4
 800eb9c:	fa1f fb8b 	uxth.w	fp, fp
 800eba0:	fb0a b101 	mla	r1, sl, r1, fp
 800eba4:	4411      	add	r1, r2
 800eba6:	f8d9 2000 	ldr.w	r2, [r9]
 800ebaa:	0c24      	lsrs	r4, r4, #16
 800ebac:	0c12      	lsrs	r2, r2, #16
 800ebae:	fb0a 2404 	mla	r4, sl, r4, r2
 800ebb2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ebb6:	b289      	uxth	r1, r1
 800ebb8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ebbc:	45f4      	cmp	ip, lr
 800ebbe:	f849 1b04 	str.w	r1, [r9], #4
 800ebc2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ebc6:	d8e4      	bhi.n	800eb92 <__multiply+0xaa>
 800ebc8:	9901      	ldr	r1, [sp, #4]
 800ebca:	5072      	str	r2, [r6, r1]
 800ebcc:	9a03      	ldr	r2, [sp, #12]
 800ebce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ebd2:	3304      	adds	r3, #4
 800ebd4:	f1b9 0f00 	cmp.w	r9, #0
 800ebd8:	d01f      	beq.n	800ec1a <__multiply+0x132>
 800ebda:	6834      	ldr	r4, [r6, #0]
 800ebdc:	f105 0114 	add.w	r1, r5, #20
 800ebe0:	46b6      	mov	lr, r6
 800ebe2:	f04f 0a00 	mov.w	sl, #0
 800ebe6:	880a      	ldrh	r2, [r1, #0]
 800ebe8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ebec:	fb09 b202 	mla	r2, r9, r2, fp
 800ebf0:	4492      	add	sl, r2
 800ebf2:	b2a4      	uxth	r4, r4
 800ebf4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ebf8:	f84e 4b04 	str.w	r4, [lr], #4
 800ebfc:	f851 4b04 	ldr.w	r4, [r1], #4
 800ec00:	f8be 2000 	ldrh.w	r2, [lr]
 800ec04:	0c24      	lsrs	r4, r4, #16
 800ec06:	fb09 2404 	mla	r4, r9, r4, r2
 800ec0a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ec0e:	458c      	cmp	ip, r1
 800ec10:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ec14:	d8e7      	bhi.n	800ebe6 <__multiply+0xfe>
 800ec16:	9a01      	ldr	r2, [sp, #4]
 800ec18:	50b4      	str	r4, [r6, r2]
 800ec1a:	3604      	adds	r6, #4
 800ec1c:	e7a3      	b.n	800eb66 <__multiply+0x7e>
 800ec1e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d1a5      	bne.n	800eb72 <__multiply+0x8a>
 800ec26:	3f01      	subs	r7, #1
 800ec28:	e7a1      	b.n	800eb6e <__multiply+0x86>
 800ec2a:	bf00      	nop
 800ec2c:	08019f27 	.word	0x08019f27
 800ec30:	08019f98 	.word	0x08019f98

0800ec34 <__pow5mult>:
 800ec34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec38:	4615      	mov	r5, r2
 800ec3a:	f012 0203 	ands.w	r2, r2, #3
 800ec3e:	4606      	mov	r6, r0
 800ec40:	460f      	mov	r7, r1
 800ec42:	d007      	beq.n	800ec54 <__pow5mult+0x20>
 800ec44:	4c25      	ldr	r4, [pc, #148]	; (800ecdc <__pow5mult+0xa8>)
 800ec46:	3a01      	subs	r2, #1
 800ec48:	2300      	movs	r3, #0
 800ec4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ec4e:	f7ff fe9b 	bl	800e988 <__multadd>
 800ec52:	4607      	mov	r7, r0
 800ec54:	10ad      	asrs	r5, r5, #2
 800ec56:	d03d      	beq.n	800ecd4 <__pow5mult+0xa0>
 800ec58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ec5a:	b97c      	cbnz	r4, 800ec7c <__pow5mult+0x48>
 800ec5c:	2010      	movs	r0, #16
 800ec5e:	f7ff fe1b 	bl	800e898 <malloc>
 800ec62:	4602      	mov	r2, r0
 800ec64:	6270      	str	r0, [r6, #36]	; 0x24
 800ec66:	b928      	cbnz	r0, 800ec74 <__pow5mult+0x40>
 800ec68:	4b1d      	ldr	r3, [pc, #116]	; (800ece0 <__pow5mult+0xac>)
 800ec6a:	481e      	ldr	r0, [pc, #120]	; (800ece4 <__pow5mult+0xb0>)
 800ec6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ec70:	f000 fac6 	bl	800f200 <__assert_func>
 800ec74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ec78:	6004      	str	r4, [r0, #0]
 800ec7a:	60c4      	str	r4, [r0, #12]
 800ec7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ec80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ec84:	b94c      	cbnz	r4, 800ec9a <__pow5mult+0x66>
 800ec86:	f240 2171 	movw	r1, #625	; 0x271
 800ec8a:	4630      	mov	r0, r6
 800ec8c:	f7ff ff16 	bl	800eabc <__i2b>
 800ec90:	2300      	movs	r3, #0
 800ec92:	f8c8 0008 	str.w	r0, [r8, #8]
 800ec96:	4604      	mov	r4, r0
 800ec98:	6003      	str	r3, [r0, #0]
 800ec9a:	f04f 0900 	mov.w	r9, #0
 800ec9e:	07eb      	lsls	r3, r5, #31
 800eca0:	d50a      	bpl.n	800ecb8 <__pow5mult+0x84>
 800eca2:	4639      	mov	r1, r7
 800eca4:	4622      	mov	r2, r4
 800eca6:	4630      	mov	r0, r6
 800eca8:	f7ff ff1e 	bl	800eae8 <__multiply>
 800ecac:	4639      	mov	r1, r7
 800ecae:	4680      	mov	r8, r0
 800ecb0:	4630      	mov	r0, r6
 800ecb2:	f7ff fe47 	bl	800e944 <_Bfree>
 800ecb6:	4647      	mov	r7, r8
 800ecb8:	106d      	asrs	r5, r5, #1
 800ecba:	d00b      	beq.n	800ecd4 <__pow5mult+0xa0>
 800ecbc:	6820      	ldr	r0, [r4, #0]
 800ecbe:	b938      	cbnz	r0, 800ecd0 <__pow5mult+0x9c>
 800ecc0:	4622      	mov	r2, r4
 800ecc2:	4621      	mov	r1, r4
 800ecc4:	4630      	mov	r0, r6
 800ecc6:	f7ff ff0f 	bl	800eae8 <__multiply>
 800ecca:	6020      	str	r0, [r4, #0]
 800eccc:	f8c0 9000 	str.w	r9, [r0]
 800ecd0:	4604      	mov	r4, r0
 800ecd2:	e7e4      	b.n	800ec9e <__pow5mult+0x6a>
 800ecd4:	4638      	mov	r0, r7
 800ecd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecda:	bf00      	nop
 800ecdc:	0801a0e8 	.word	0x0801a0e8
 800ece0:	08019eb1 	.word	0x08019eb1
 800ece4:	08019f98 	.word	0x08019f98

0800ece8 <__lshift>:
 800ece8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecec:	460c      	mov	r4, r1
 800ecee:	6849      	ldr	r1, [r1, #4]
 800ecf0:	6923      	ldr	r3, [r4, #16]
 800ecf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ecf6:	68a3      	ldr	r3, [r4, #8]
 800ecf8:	4607      	mov	r7, r0
 800ecfa:	4691      	mov	r9, r2
 800ecfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ed00:	f108 0601 	add.w	r6, r8, #1
 800ed04:	42b3      	cmp	r3, r6
 800ed06:	db0b      	blt.n	800ed20 <__lshift+0x38>
 800ed08:	4638      	mov	r0, r7
 800ed0a:	f7ff fddb 	bl	800e8c4 <_Balloc>
 800ed0e:	4605      	mov	r5, r0
 800ed10:	b948      	cbnz	r0, 800ed26 <__lshift+0x3e>
 800ed12:	4602      	mov	r2, r0
 800ed14:	4b28      	ldr	r3, [pc, #160]	; (800edb8 <__lshift+0xd0>)
 800ed16:	4829      	ldr	r0, [pc, #164]	; (800edbc <__lshift+0xd4>)
 800ed18:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ed1c:	f000 fa70 	bl	800f200 <__assert_func>
 800ed20:	3101      	adds	r1, #1
 800ed22:	005b      	lsls	r3, r3, #1
 800ed24:	e7ee      	b.n	800ed04 <__lshift+0x1c>
 800ed26:	2300      	movs	r3, #0
 800ed28:	f100 0114 	add.w	r1, r0, #20
 800ed2c:	f100 0210 	add.w	r2, r0, #16
 800ed30:	4618      	mov	r0, r3
 800ed32:	4553      	cmp	r3, sl
 800ed34:	db33      	blt.n	800ed9e <__lshift+0xb6>
 800ed36:	6920      	ldr	r0, [r4, #16]
 800ed38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ed3c:	f104 0314 	add.w	r3, r4, #20
 800ed40:	f019 091f 	ands.w	r9, r9, #31
 800ed44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ed48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ed4c:	d02b      	beq.n	800eda6 <__lshift+0xbe>
 800ed4e:	f1c9 0e20 	rsb	lr, r9, #32
 800ed52:	468a      	mov	sl, r1
 800ed54:	2200      	movs	r2, #0
 800ed56:	6818      	ldr	r0, [r3, #0]
 800ed58:	fa00 f009 	lsl.w	r0, r0, r9
 800ed5c:	4302      	orrs	r2, r0
 800ed5e:	f84a 2b04 	str.w	r2, [sl], #4
 800ed62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed66:	459c      	cmp	ip, r3
 800ed68:	fa22 f20e 	lsr.w	r2, r2, lr
 800ed6c:	d8f3      	bhi.n	800ed56 <__lshift+0x6e>
 800ed6e:	ebac 0304 	sub.w	r3, ip, r4
 800ed72:	3b15      	subs	r3, #21
 800ed74:	f023 0303 	bic.w	r3, r3, #3
 800ed78:	3304      	adds	r3, #4
 800ed7a:	f104 0015 	add.w	r0, r4, #21
 800ed7e:	4584      	cmp	ip, r0
 800ed80:	bf38      	it	cc
 800ed82:	2304      	movcc	r3, #4
 800ed84:	50ca      	str	r2, [r1, r3]
 800ed86:	b10a      	cbz	r2, 800ed8c <__lshift+0xa4>
 800ed88:	f108 0602 	add.w	r6, r8, #2
 800ed8c:	3e01      	subs	r6, #1
 800ed8e:	4638      	mov	r0, r7
 800ed90:	612e      	str	r6, [r5, #16]
 800ed92:	4621      	mov	r1, r4
 800ed94:	f7ff fdd6 	bl	800e944 <_Bfree>
 800ed98:	4628      	mov	r0, r5
 800ed9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed9e:	f842 0f04 	str.w	r0, [r2, #4]!
 800eda2:	3301      	adds	r3, #1
 800eda4:	e7c5      	b.n	800ed32 <__lshift+0x4a>
 800eda6:	3904      	subs	r1, #4
 800eda8:	f853 2b04 	ldr.w	r2, [r3], #4
 800edac:	f841 2f04 	str.w	r2, [r1, #4]!
 800edb0:	459c      	cmp	ip, r3
 800edb2:	d8f9      	bhi.n	800eda8 <__lshift+0xc0>
 800edb4:	e7ea      	b.n	800ed8c <__lshift+0xa4>
 800edb6:	bf00      	nop
 800edb8:	08019f27 	.word	0x08019f27
 800edbc:	08019f98 	.word	0x08019f98

0800edc0 <__mcmp>:
 800edc0:	b530      	push	{r4, r5, lr}
 800edc2:	6902      	ldr	r2, [r0, #16]
 800edc4:	690c      	ldr	r4, [r1, #16]
 800edc6:	1b12      	subs	r2, r2, r4
 800edc8:	d10e      	bne.n	800ede8 <__mcmp+0x28>
 800edca:	f100 0314 	add.w	r3, r0, #20
 800edce:	3114      	adds	r1, #20
 800edd0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800edd4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800edd8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eddc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ede0:	42a5      	cmp	r5, r4
 800ede2:	d003      	beq.n	800edec <__mcmp+0x2c>
 800ede4:	d305      	bcc.n	800edf2 <__mcmp+0x32>
 800ede6:	2201      	movs	r2, #1
 800ede8:	4610      	mov	r0, r2
 800edea:	bd30      	pop	{r4, r5, pc}
 800edec:	4283      	cmp	r3, r0
 800edee:	d3f3      	bcc.n	800edd8 <__mcmp+0x18>
 800edf0:	e7fa      	b.n	800ede8 <__mcmp+0x28>
 800edf2:	f04f 32ff 	mov.w	r2, #4294967295
 800edf6:	e7f7      	b.n	800ede8 <__mcmp+0x28>

0800edf8 <__mdiff>:
 800edf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edfc:	460c      	mov	r4, r1
 800edfe:	4606      	mov	r6, r0
 800ee00:	4611      	mov	r1, r2
 800ee02:	4620      	mov	r0, r4
 800ee04:	4617      	mov	r7, r2
 800ee06:	f7ff ffdb 	bl	800edc0 <__mcmp>
 800ee0a:	1e05      	subs	r5, r0, #0
 800ee0c:	d110      	bne.n	800ee30 <__mdiff+0x38>
 800ee0e:	4629      	mov	r1, r5
 800ee10:	4630      	mov	r0, r6
 800ee12:	f7ff fd57 	bl	800e8c4 <_Balloc>
 800ee16:	b930      	cbnz	r0, 800ee26 <__mdiff+0x2e>
 800ee18:	4b39      	ldr	r3, [pc, #228]	; (800ef00 <__mdiff+0x108>)
 800ee1a:	4602      	mov	r2, r0
 800ee1c:	f240 2132 	movw	r1, #562	; 0x232
 800ee20:	4838      	ldr	r0, [pc, #224]	; (800ef04 <__mdiff+0x10c>)
 800ee22:	f000 f9ed 	bl	800f200 <__assert_func>
 800ee26:	2301      	movs	r3, #1
 800ee28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ee2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee30:	bfa4      	itt	ge
 800ee32:	463b      	movge	r3, r7
 800ee34:	4627      	movge	r7, r4
 800ee36:	4630      	mov	r0, r6
 800ee38:	6879      	ldr	r1, [r7, #4]
 800ee3a:	bfa6      	itte	ge
 800ee3c:	461c      	movge	r4, r3
 800ee3e:	2500      	movge	r5, #0
 800ee40:	2501      	movlt	r5, #1
 800ee42:	f7ff fd3f 	bl	800e8c4 <_Balloc>
 800ee46:	b920      	cbnz	r0, 800ee52 <__mdiff+0x5a>
 800ee48:	4b2d      	ldr	r3, [pc, #180]	; (800ef00 <__mdiff+0x108>)
 800ee4a:	4602      	mov	r2, r0
 800ee4c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ee50:	e7e6      	b.n	800ee20 <__mdiff+0x28>
 800ee52:	693e      	ldr	r6, [r7, #16]
 800ee54:	60c5      	str	r5, [r0, #12]
 800ee56:	6925      	ldr	r5, [r4, #16]
 800ee58:	f107 0114 	add.w	r1, r7, #20
 800ee5c:	f104 0914 	add.w	r9, r4, #20
 800ee60:	f100 0e14 	add.w	lr, r0, #20
 800ee64:	f107 0210 	add.w	r2, r7, #16
 800ee68:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ee6c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ee70:	46f2      	mov	sl, lr
 800ee72:	2700      	movs	r7, #0
 800ee74:	f859 3b04 	ldr.w	r3, [r9], #4
 800ee78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ee7c:	fa1f f883 	uxth.w	r8, r3
 800ee80:	fa17 f78b 	uxtah	r7, r7, fp
 800ee84:	0c1b      	lsrs	r3, r3, #16
 800ee86:	eba7 0808 	sub.w	r8, r7, r8
 800ee8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ee8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ee92:	fa1f f888 	uxth.w	r8, r8
 800ee96:	141f      	asrs	r7, r3, #16
 800ee98:	454d      	cmp	r5, r9
 800ee9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ee9e:	f84a 3b04 	str.w	r3, [sl], #4
 800eea2:	d8e7      	bhi.n	800ee74 <__mdiff+0x7c>
 800eea4:	1b2b      	subs	r3, r5, r4
 800eea6:	3b15      	subs	r3, #21
 800eea8:	f023 0303 	bic.w	r3, r3, #3
 800eeac:	3304      	adds	r3, #4
 800eeae:	3415      	adds	r4, #21
 800eeb0:	42a5      	cmp	r5, r4
 800eeb2:	bf38      	it	cc
 800eeb4:	2304      	movcc	r3, #4
 800eeb6:	4419      	add	r1, r3
 800eeb8:	4473      	add	r3, lr
 800eeba:	469e      	mov	lr, r3
 800eebc:	460d      	mov	r5, r1
 800eebe:	4565      	cmp	r5, ip
 800eec0:	d30e      	bcc.n	800eee0 <__mdiff+0xe8>
 800eec2:	f10c 0203 	add.w	r2, ip, #3
 800eec6:	1a52      	subs	r2, r2, r1
 800eec8:	f022 0203 	bic.w	r2, r2, #3
 800eecc:	3903      	subs	r1, #3
 800eece:	458c      	cmp	ip, r1
 800eed0:	bf38      	it	cc
 800eed2:	2200      	movcc	r2, #0
 800eed4:	441a      	add	r2, r3
 800eed6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800eeda:	b17b      	cbz	r3, 800eefc <__mdiff+0x104>
 800eedc:	6106      	str	r6, [r0, #16]
 800eede:	e7a5      	b.n	800ee2c <__mdiff+0x34>
 800eee0:	f855 8b04 	ldr.w	r8, [r5], #4
 800eee4:	fa17 f488 	uxtah	r4, r7, r8
 800eee8:	1422      	asrs	r2, r4, #16
 800eeea:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800eeee:	b2a4      	uxth	r4, r4
 800eef0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800eef4:	f84e 4b04 	str.w	r4, [lr], #4
 800eef8:	1417      	asrs	r7, r2, #16
 800eefa:	e7e0      	b.n	800eebe <__mdiff+0xc6>
 800eefc:	3e01      	subs	r6, #1
 800eefe:	e7ea      	b.n	800eed6 <__mdiff+0xde>
 800ef00:	08019f27 	.word	0x08019f27
 800ef04:	08019f98 	.word	0x08019f98

0800ef08 <__d2b>:
 800ef08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ef0c:	4689      	mov	r9, r1
 800ef0e:	2101      	movs	r1, #1
 800ef10:	ec57 6b10 	vmov	r6, r7, d0
 800ef14:	4690      	mov	r8, r2
 800ef16:	f7ff fcd5 	bl	800e8c4 <_Balloc>
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	b930      	cbnz	r0, 800ef2c <__d2b+0x24>
 800ef1e:	4602      	mov	r2, r0
 800ef20:	4b25      	ldr	r3, [pc, #148]	; (800efb8 <__d2b+0xb0>)
 800ef22:	4826      	ldr	r0, [pc, #152]	; (800efbc <__d2b+0xb4>)
 800ef24:	f240 310a 	movw	r1, #778	; 0x30a
 800ef28:	f000 f96a 	bl	800f200 <__assert_func>
 800ef2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ef30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ef34:	bb35      	cbnz	r5, 800ef84 <__d2b+0x7c>
 800ef36:	2e00      	cmp	r6, #0
 800ef38:	9301      	str	r3, [sp, #4]
 800ef3a:	d028      	beq.n	800ef8e <__d2b+0x86>
 800ef3c:	4668      	mov	r0, sp
 800ef3e:	9600      	str	r6, [sp, #0]
 800ef40:	f7ff fd8c 	bl	800ea5c <__lo0bits>
 800ef44:	9900      	ldr	r1, [sp, #0]
 800ef46:	b300      	cbz	r0, 800ef8a <__d2b+0x82>
 800ef48:	9a01      	ldr	r2, [sp, #4]
 800ef4a:	f1c0 0320 	rsb	r3, r0, #32
 800ef4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ef52:	430b      	orrs	r3, r1
 800ef54:	40c2      	lsrs	r2, r0
 800ef56:	6163      	str	r3, [r4, #20]
 800ef58:	9201      	str	r2, [sp, #4]
 800ef5a:	9b01      	ldr	r3, [sp, #4]
 800ef5c:	61a3      	str	r3, [r4, #24]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	bf14      	ite	ne
 800ef62:	2202      	movne	r2, #2
 800ef64:	2201      	moveq	r2, #1
 800ef66:	6122      	str	r2, [r4, #16]
 800ef68:	b1d5      	cbz	r5, 800efa0 <__d2b+0x98>
 800ef6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ef6e:	4405      	add	r5, r0
 800ef70:	f8c9 5000 	str.w	r5, [r9]
 800ef74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ef78:	f8c8 0000 	str.w	r0, [r8]
 800ef7c:	4620      	mov	r0, r4
 800ef7e:	b003      	add	sp, #12
 800ef80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ef88:	e7d5      	b.n	800ef36 <__d2b+0x2e>
 800ef8a:	6161      	str	r1, [r4, #20]
 800ef8c:	e7e5      	b.n	800ef5a <__d2b+0x52>
 800ef8e:	a801      	add	r0, sp, #4
 800ef90:	f7ff fd64 	bl	800ea5c <__lo0bits>
 800ef94:	9b01      	ldr	r3, [sp, #4]
 800ef96:	6163      	str	r3, [r4, #20]
 800ef98:	2201      	movs	r2, #1
 800ef9a:	6122      	str	r2, [r4, #16]
 800ef9c:	3020      	adds	r0, #32
 800ef9e:	e7e3      	b.n	800ef68 <__d2b+0x60>
 800efa0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800efa4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800efa8:	f8c9 0000 	str.w	r0, [r9]
 800efac:	6918      	ldr	r0, [r3, #16]
 800efae:	f7ff fd35 	bl	800ea1c <__hi0bits>
 800efb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800efb6:	e7df      	b.n	800ef78 <__d2b+0x70>
 800efb8:	08019f27 	.word	0x08019f27
 800efbc:	08019f98 	.word	0x08019f98

0800efc0 <_calloc_r>:
 800efc0:	b513      	push	{r0, r1, r4, lr}
 800efc2:	434a      	muls	r2, r1
 800efc4:	4611      	mov	r1, r2
 800efc6:	9201      	str	r2, [sp, #4]
 800efc8:	f000 f85a 	bl	800f080 <_malloc_r>
 800efcc:	4604      	mov	r4, r0
 800efce:	b118      	cbz	r0, 800efd8 <_calloc_r+0x18>
 800efd0:	9a01      	ldr	r2, [sp, #4]
 800efd2:	2100      	movs	r1, #0
 800efd4:	f7fd fe66 	bl	800cca4 <memset>
 800efd8:	4620      	mov	r0, r4
 800efda:	b002      	add	sp, #8
 800efdc:	bd10      	pop	{r4, pc}
	...

0800efe0 <_free_r>:
 800efe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800efe2:	2900      	cmp	r1, #0
 800efe4:	d048      	beq.n	800f078 <_free_r+0x98>
 800efe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efea:	9001      	str	r0, [sp, #4]
 800efec:	2b00      	cmp	r3, #0
 800efee:	f1a1 0404 	sub.w	r4, r1, #4
 800eff2:	bfb8      	it	lt
 800eff4:	18e4      	addlt	r4, r4, r3
 800eff6:	f000 f989 	bl	800f30c <__malloc_lock>
 800effa:	4a20      	ldr	r2, [pc, #128]	; (800f07c <_free_r+0x9c>)
 800effc:	9801      	ldr	r0, [sp, #4]
 800effe:	6813      	ldr	r3, [r2, #0]
 800f000:	4615      	mov	r5, r2
 800f002:	b933      	cbnz	r3, 800f012 <_free_r+0x32>
 800f004:	6063      	str	r3, [r4, #4]
 800f006:	6014      	str	r4, [r2, #0]
 800f008:	b003      	add	sp, #12
 800f00a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f00e:	f000 b983 	b.w	800f318 <__malloc_unlock>
 800f012:	42a3      	cmp	r3, r4
 800f014:	d90b      	bls.n	800f02e <_free_r+0x4e>
 800f016:	6821      	ldr	r1, [r4, #0]
 800f018:	1862      	adds	r2, r4, r1
 800f01a:	4293      	cmp	r3, r2
 800f01c:	bf04      	itt	eq
 800f01e:	681a      	ldreq	r2, [r3, #0]
 800f020:	685b      	ldreq	r3, [r3, #4]
 800f022:	6063      	str	r3, [r4, #4]
 800f024:	bf04      	itt	eq
 800f026:	1852      	addeq	r2, r2, r1
 800f028:	6022      	streq	r2, [r4, #0]
 800f02a:	602c      	str	r4, [r5, #0]
 800f02c:	e7ec      	b.n	800f008 <_free_r+0x28>
 800f02e:	461a      	mov	r2, r3
 800f030:	685b      	ldr	r3, [r3, #4]
 800f032:	b10b      	cbz	r3, 800f038 <_free_r+0x58>
 800f034:	42a3      	cmp	r3, r4
 800f036:	d9fa      	bls.n	800f02e <_free_r+0x4e>
 800f038:	6811      	ldr	r1, [r2, #0]
 800f03a:	1855      	adds	r5, r2, r1
 800f03c:	42a5      	cmp	r5, r4
 800f03e:	d10b      	bne.n	800f058 <_free_r+0x78>
 800f040:	6824      	ldr	r4, [r4, #0]
 800f042:	4421      	add	r1, r4
 800f044:	1854      	adds	r4, r2, r1
 800f046:	42a3      	cmp	r3, r4
 800f048:	6011      	str	r1, [r2, #0]
 800f04a:	d1dd      	bne.n	800f008 <_free_r+0x28>
 800f04c:	681c      	ldr	r4, [r3, #0]
 800f04e:	685b      	ldr	r3, [r3, #4]
 800f050:	6053      	str	r3, [r2, #4]
 800f052:	4421      	add	r1, r4
 800f054:	6011      	str	r1, [r2, #0]
 800f056:	e7d7      	b.n	800f008 <_free_r+0x28>
 800f058:	d902      	bls.n	800f060 <_free_r+0x80>
 800f05a:	230c      	movs	r3, #12
 800f05c:	6003      	str	r3, [r0, #0]
 800f05e:	e7d3      	b.n	800f008 <_free_r+0x28>
 800f060:	6825      	ldr	r5, [r4, #0]
 800f062:	1961      	adds	r1, r4, r5
 800f064:	428b      	cmp	r3, r1
 800f066:	bf04      	itt	eq
 800f068:	6819      	ldreq	r1, [r3, #0]
 800f06a:	685b      	ldreq	r3, [r3, #4]
 800f06c:	6063      	str	r3, [r4, #4]
 800f06e:	bf04      	itt	eq
 800f070:	1949      	addeq	r1, r1, r5
 800f072:	6021      	streq	r1, [r4, #0]
 800f074:	6054      	str	r4, [r2, #4]
 800f076:	e7c7      	b.n	800f008 <_free_r+0x28>
 800f078:	b003      	add	sp, #12
 800f07a:	bd30      	pop	{r4, r5, pc}
 800f07c:	2000066c 	.word	0x2000066c

0800f080 <_malloc_r>:
 800f080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f082:	1ccd      	adds	r5, r1, #3
 800f084:	f025 0503 	bic.w	r5, r5, #3
 800f088:	3508      	adds	r5, #8
 800f08a:	2d0c      	cmp	r5, #12
 800f08c:	bf38      	it	cc
 800f08e:	250c      	movcc	r5, #12
 800f090:	2d00      	cmp	r5, #0
 800f092:	4606      	mov	r6, r0
 800f094:	db01      	blt.n	800f09a <_malloc_r+0x1a>
 800f096:	42a9      	cmp	r1, r5
 800f098:	d903      	bls.n	800f0a2 <_malloc_r+0x22>
 800f09a:	230c      	movs	r3, #12
 800f09c:	6033      	str	r3, [r6, #0]
 800f09e:	2000      	movs	r0, #0
 800f0a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0a2:	f000 f933 	bl	800f30c <__malloc_lock>
 800f0a6:	4921      	ldr	r1, [pc, #132]	; (800f12c <_malloc_r+0xac>)
 800f0a8:	680a      	ldr	r2, [r1, #0]
 800f0aa:	4614      	mov	r4, r2
 800f0ac:	b99c      	cbnz	r4, 800f0d6 <_malloc_r+0x56>
 800f0ae:	4f20      	ldr	r7, [pc, #128]	; (800f130 <_malloc_r+0xb0>)
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	b923      	cbnz	r3, 800f0be <_malloc_r+0x3e>
 800f0b4:	4621      	mov	r1, r4
 800f0b6:	4630      	mov	r0, r6
 800f0b8:	f000 f83c 	bl	800f134 <_sbrk_r>
 800f0bc:	6038      	str	r0, [r7, #0]
 800f0be:	4629      	mov	r1, r5
 800f0c0:	4630      	mov	r0, r6
 800f0c2:	f000 f837 	bl	800f134 <_sbrk_r>
 800f0c6:	1c43      	adds	r3, r0, #1
 800f0c8:	d123      	bne.n	800f112 <_malloc_r+0x92>
 800f0ca:	230c      	movs	r3, #12
 800f0cc:	6033      	str	r3, [r6, #0]
 800f0ce:	4630      	mov	r0, r6
 800f0d0:	f000 f922 	bl	800f318 <__malloc_unlock>
 800f0d4:	e7e3      	b.n	800f09e <_malloc_r+0x1e>
 800f0d6:	6823      	ldr	r3, [r4, #0]
 800f0d8:	1b5b      	subs	r3, r3, r5
 800f0da:	d417      	bmi.n	800f10c <_malloc_r+0x8c>
 800f0dc:	2b0b      	cmp	r3, #11
 800f0de:	d903      	bls.n	800f0e8 <_malloc_r+0x68>
 800f0e0:	6023      	str	r3, [r4, #0]
 800f0e2:	441c      	add	r4, r3
 800f0e4:	6025      	str	r5, [r4, #0]
 800f0e6:	e004      	b.n	800f0f2 <_malloc_r+0x72>
 800f0e8:	6863      	ldr	r3, [r4, #4]
 800f0ea:	42a2      	cmp	r2, r4
 800f0ec:	bf0c      	ite	eq
 800f0ee:	600b      	streq	r3, [r1, #0]
 800f0f0:	6053      	strne	r3, [r2, #4]
 800f0f2:	4630      	mov	r0, r6
 800f0f4:	f000 f910 	bl	800f318 <__malloc_unlock>
 800f0f8:	f104 000b 	add.w	r0, r4, #11
 800f0fc:	1d23      	adds	r3, r4, #4
 800f0fe:	f020 0007 	bic.w	r0, r0, #7
 800f102:	1ac2      	subs	r2, r0, r3
 800f104:	d0cc      	beq.n	800f0a0 <_malloc_r+0x20>
 800f106:	1a1b      	subs	r3, r3, r0
 800f108:	50a3      	str	r3, [r4, r2]
 800f10a:	e7c9      	b.n	800f0a0 <_malloc_r+0x20>
 800f10c:	4622      	mov	r2, r4
 800f10e:	6864      	ldr	r4, [r4, #4]
 800f110:	e7cc      	b.n	800f0ac <_malloc_r+0x2c>
 800f112:	1cc4      	adds	r4, r0, #3
 800f114:	f024 0403 	bic.w	r4, r4, #3
 800f118:	42a0      	cmp	r0, r4
 800f11a:	d0e3      	beq.n	800f0e4 <_malloc_r+0x64>
 800f11c:	1a21      	subs	r1, r4, r0
 800f11e:	4630      	mov	r0, r6
 800f120:	f000 f808 	bl	800f134 <_sbrk_r>
 800f124:	3001      	adds	r0, #1
 800f126:	d1dd      	bne.n	800f0e4 <_malloc_r+0x64>
 800f128:	e7cf      	b.n	800f0ca <_malloc_r+0x4a>
 800f12a:	bf00      	nop
 800f12c:	2000066c 	.word	0x2000066c
 800f130:	20000670 	.word	0x20000670

0800f134 <_sbrk_r>:
 800f134:	b538      	push	{r3, r4, r5, lr}
 800f136:	4d06      	ldr	r5, [pc, #24]	; (800f150 <_sbrk_r+0x1c>)
 800f138:	2300      	movs	r3, #0
 800f13a:	4604      	mov	r4, r0
 800f13c:	4608      	mov	r0, r1
 800f13e:	602b      	str	r3, [r5, #0]
 800f140:	f7f4 ff64 	bl	800400c <_sbrk>
 800f144:	1c43      	adds	r3, r0, #1
 800f146:	d102      	bne.n	800f14e <_sbrk_r+0x1a>
 800f148:	682b      	ldr	r3, [r5, #0]
 800f14a:	b103      	cbz	r3, 800f14e <_sbrk_r+0x1a>
 800f14c:	6023      	str	r3, [r4, #0]
 800f14e:	bd38      	pop	{r3, r4, r5, pc}
 800f150:	20012908 	.word	0x20012908

0800f154 <__sread>:
 800f154:	b510      	push	{r4, lr}
 800f156:	460c      	mov	r4, r1
 800f158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f15c:	f000 fa3c 	bl	800f5d8 <_read_r>
 800f160:	2800      	cmp	r0, #0
 800f162:	bfab      	itete	ge
 800f164:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f166:	89a3      	ldrhlt	r3, [r4, #12]
 800f168:	181b      	addge	r3, r3, r0
 800f16a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f16e:	bfac      	ite	ge
 800f170:	6563      	strge	r3, [r4, #84]	; 0x54
 800f172:	81a3      	strhlt	r3, [r4, #12]
 800f174:	bd10      	pop	{r4, pc}

0800f176 <__swrite>:
 800f176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f17a:	461f      	mov	r7, r3
 800f17c:	898b      	ldrh	r3, [r1, #12]
 800f17e:	05db      	lsls	r3, r3, #23
 800f180:	4605      	mov	r5, r0
 800f182:	460c      	mov	r4, r1
 800f184:	4616      	mov	r6, r2
 800f186:	d505      	bpl.n	800f194 <__swrite+0x1e>
 800f188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f18c:	2302      	movs	r3, #2
 800f18e:	2200      	movs	r2, #0
 800f190:	f000 f898 	bl	800f2c4 <_lseek_r>
 800f194:	89a3      	ldrh	r3, [r4, #12]
 800f196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f19a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f19e:	81a3      	strh	r3, [r4, #12]
 800f1a0:	4632      	mov	r2, r6
 800f1a2:	463b      	mov	r3, r7
 800f1a4:	4628      	mov	r0, r5
 800f1a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1aa:	f000 b817 	b.w	800f1dc <_write_r>

0800f1ae <__sseek>:
 800f1ae:	b510      	push	{r4, lr}
 800f1b0:	460c      	mov	r4, r1
 800f1b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1b6:	f000 f885 	bl	800f2c4 <_lseek_r>
 800f1ba:	1c43      	adds	r3, r0, #1
 800f1bc:	89a3      	ldrh	r3, [r4, #12]
 800f1be:	bf15      	itete	ne
 800f1c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f1c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f1c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f1ca:	81a3      	strheq	r3, [r4, #12]
 800f1cc:	bf18      	it	ne
 800f1ce:	81a3      	strhne	r3, [r4, #12]
 800f1d0:	bd10      	pop	{r4, pc}

0800f1d2 <__sclose>:
 800f1d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1d6:	f000 b831 	b.w	800f23c <_close_r>
	...

0800f1dc <_write_r>:
 800f1dc:	b538      	push	{r3, r4, r5, lr}
 800f1de:	4d07      	ldr	r5, [pc, #28]	; (800f1fc <_write_r+0x20>)
 800f1e0:	4604      	mov	r4, r0
 800f1e2:	4608      	mov	r0, r1
 800f1e4:	4611      	mov	r1, r2
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	602a      	str	r2, [r5, #0]
 800f1ea:	461a      	mov	r2, r3
 800f1ec:	f7f3 ff82 	bl	80030f4 <_write>
 800f1f0:	1c43      	adds	r3, r0, #1
 800f1f2:	d102      	bne.n	800f1fa <_write_r+0x1e>
 800f1f4:	682b      	ldr	r3, [r5, #0]
 800f1f6:	b103      	cbz	r3, 800f1fa <_write_r+0x1e>
 800f1f8:	6023      	str	r3, [r4, #0]
 800f1fa:	bd38      	pop	{r3, r4, r5, pc}
 800f1fc:	20012908 	.word	0x20012908

0800f200 <__assert_func>:
 800f200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f202:	4614      	mov	r4, r2
 800f204:	461a      	mov	r2, r3
 800f206:	4b09      	ldr	r3, [pc, #36]	; (800f22c <__assert_func+0x2c>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	4605      	mov	r5, r0
 800f20c:	68d8      	ldr	r0, [r3, #12]
 800f20e:	b14c      	cbz	r4, 800f224 <__assert_func+0x24>
 800f210:	4b07      	ldr	r3, [pc, #28]	; (800f230 <__assert_func+0x30>)
 800f212:	9100      	str	r1, [sp, #0]
 800f214:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f218:	4906      	ldr	r1, [pc, #24]	; (800f234 <__assert_func+0x34>)
 800f21a:	462b      	mov	r3, r5
 800f21c:	f000 f81e 	bl	800f25c <fiprintf>
 800f220:	f000 faba 	bl	800f798 <abort>
 800f224:	4b04      	ldr	r3, [pc, #16]	; (800f238 <__assert_func+0x38>)
 800f226:	461c      	mov	r4, r3
 800f228:	e7f3      	b.n	800f212 <__assert_func+0x12>
 800f22a:	bf00      	nop
 800f22c:	20000124 	.word	0x20000124
 800f230:	0801a0f4 	.word	0x0801a0f4
 800f234:	0801a101 	.word	0x0801a101
 800f238:	0801a12f 	.word	0x0801a12f

0800f23c <_close_r>:
 800f23c:	b538      	push	{r3, r4, r5, lr}
 800f23e:	4d06      	ldr	r5, [pc, #24]	; (800f258 <_close_r+0x1c>)
 800f240:	2300      	movs	r3, #0
 800f242:	4604      	mov	r4, r0
 800f244:	4608      	mov	r0, r1
 800f246:	602b      	str	r3, [r5, #0]
 800f248:	f7f3 ff80 	bl	800314c <_close>
 800f24c:	1c43      	adds	r3, r0, #1
 800f24e:	d102      	bne.n	800f256 <_close_r+0x1a>
 800f250:	682b      	ldr	r3, [r5, #0]
 800f252:	b103      	cbz	r3, 800f256 <_close_r+0x1a>
 800f254:	6023      	str	r3, [r4, #0]
 800f256:	bd38      	pop	{r3, r4, r5, pc}
 800f258:	20012908 	.word	0x20012908

0800f25c <fiprintf>:
 800f25c:	b40e      	push	{r1, r2, r3}
 800f25e:	b503      	push	{r0, r1, lr}
 800f260:	4601      	mov	r1, r0
 800f262:	ab03      	add	r3, sp, #12
 800f264:	4805      	ldr	r0, [pc, #20]	; (800f27c <fiprintf+0x20>)
 800f266:	f853 2b04 	ldr.w	r2, [r3], #4
 800f26a:	6800      	ldr	r0, [r0, #0]
 800f26c:	9301      	str	r3, [sp, #4]
 800f26e:	f000 f883 	bl	800f378 <_vfiprintf_r>
 800f272:	b002      	add	sp, #8
 800f274:	f85d eb04 	ldr.w	lr, [sp], #4
 800f278:	b003      	add	sp, #12
 800f27a:	4770      	bx	lr
 800f27c:	20000124 	.word	0x20000124

0800f280 <_fstat_r>:
 800f280:	b538      	push	{r3, r4, r5, lr}
 800f282:	4d07      	ldr	r5, [pc, #28]	; (800f2a0 <_fstat_r+0x20>)
 800f284:	2300      	movs	r3, #0
 800f286:	4604      	mov	r4, r0
 800f288:	4608      	mov	r0, r1
 800f28a:	4611      	mov	r1, r2
 800f28c:	602b      	str	r3, [r5, #0]
 800f28e:	f7f3 ffad 	bl	80031ec <_fstat>
 800f292:	1c43      	adds	r3, r0, #1
 800f294:	d102      	bne.n	800f29c <_fstat_r+0x1c>
 800f296:	682b      	ldr	r3, [r5, #0]
 800f298:	b103      	cbz	r3, 800f29c <_fstat_r+0x1c>
 800f29a:	6023      	str	r3, [r4, #0]
 800f29c:	bd38      	pop	{r3, r4, r5, pc}
 800f29e:	bf00      	nop
 800f2a0:	20012908 	.word	0x20012908

0800f2a4 <_isatty_r>:
 800f2a4:	b538      	push	{r3, r4, r5, lr}
 800f2a6:	4d06      	ldr	r5, [pc, #24]	; (800f2c0 <_isatty_r+0x1c>)
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	4604      	mov	r4, r0
 800f2ac:	4608      	mov	r0, r1
 800f2ae:	602b      	str	r3, [r5, #0]
 800f2b0:	f7f3 ff0a 	bl	80030c8 <_isatty>
 800f2b4:	1c43      	adds	r3, r0, #1
 800f2b6:	d102      	bne.n	800f2be <_isatty_r+0x1a>
 800f2b8:	682b      	ldr	r3, [r5, #0]
 800f2ba:	b103      	cbz	r3, 800f2be <_isatty_r+0x1a>
 800f2bc:	6023      	str	r3, [r4, #0]
 800f2be:	bd38      	pop	{r3, r4, r5, pc}
 800f2c0:	20012908 	.word	0x20012908

0800f2c4 <_lseek_r>:
 800f2c4:	b538      	push	{r3, r4, r5, lr}
 800f2c6:	4d07      	ldr	r5, [pc, #28]	; (800f2e4 <_lseek_r+0x20>)
 800f2c8:	4604      	mov	r4, r0
 800f2ca:	4608      	mov	r0, r1
 800f2cc:	4611      	mov	r1, r2
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	602a      	str	r2, [r5, #0]
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	f7f3 ff51 	bl	800317a <_lseek>
 800f2d8:	1c43      	adds	r3, r0, #1
 800f2da:	d102      	bne.n	800f2e2 <_lseek_r+0x1e>
 800f2dc:	682b      	ldr	r3, [r5, #0]
 800f2de:	b103      	cbz	r3, 800f2e2 <_lseek_r+0x1e>
 800f2e0:	6023      	str	r3, [r4, #0]
 800f2e2:	bd38      	pop	{r3, r4, r5, pc}
 800f2e4:	20012908 	.word	0x20012908

0800f2e8 <__ascii_mbtowc>:
 800f2e8:	b082      	sub	sp, #8
 800f2ea:	b901      	cbnz	r1, 800f2ee <__ascii_mbtowc+0x6>
 800f2ec:	a901      	add	r1, sp, #4
 800f2ee:	b142      	cbz	r2, 800f302 <__ascii_mbtowc+0x1a>
 800f2f0:	b14b      	cbz	r3, 800f306 <__ascii_mbtowc+0x1e>
 800f2f2:	7813      	ldrb	r3, [r2, #0]
 800f2f4:	600b      	str	r3, [r1, #0]
 800f2f6:	7812      	ldrb	r2, [r2, #0]
 800f2f8:	1e10      	subs	r0, r2, #0
 800f2fa:	bf18      	it	ne
 800f2fc:	2001      	movne	r0, #1
 800f2fe:	b002      	add	sp, #8
 800f300:	4770      	bx	lr
 800f302:	4610      	mov	r0, r2
 800f304:	e7fb      	b.n	800f2fe <__ascii_mbtowc+0x16>
 800f306:	f06f 0001 	mvn.w	r0, #1
 800f30a:	e7f8      	b.n	800f2fe <__ascii_mbtowc+0x16>

0800f30c <__malloc_lock>:
 800f30c:	4801      	ldr	r0, [pc, #4]	; (800f314 <__malloc_lock+0x8>)
 800f30e:	f7ff ba5c 	b.w	800e7ca <__retarget_lock_acquire_recursive>
 800f312:	bf00      	nop
 800f314:	20012900 	.word	0x20012900

0800f318 <__malloc_unlock>:
 800f318:	4801      	ldr	r0, [pc, #4]	; (800f320 <__malloc_unlock+0x8>)
 800f31a:	f7ff ba57 	b.w	800e7cc <__retarget_lock_release_recursive>
 800f31e:	bf00      	nop
 800f320:	20012900 	.word	0x20012900

0800f324 <__sfputc_r>:
 800f324:	6893      	ldr	r3, [r2, #8]
 800f326:	3b01      	subs	r3, #1
 800f328:	2b00      	cmp	r3, #0
 800f32a:	b410      	push	{r4}
 800f32c:	6093      	str	r3, [r2, #8]
 800f32e:	da08      	bge.n	800f342 <__sfputc_r+0x1e>
 800f330:	6994      	ldr	r4, [r2, #24]
 800f332:	42a3      	cmp	r3, r4
 800f334:	db01      	blt.n	800f33a <__sfputc_r+0x16>
 800f336:	290a      	cmp	r1, #10
 800f338:	d103      	bne.n	800f342 <__sfputc_r+0x1e>
 800f33a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f33e:	f000 b95d 	b.w	800f5fc <__swbuf_r>
 800f342:	6813      	ldr	r3, [r2, #0]
 800f344:	1c58      	adds	r0, r3, #1
 800f346:	6010      	str	r0, [r2, #0]
 800f348:	7019      	strb	r1, [r3, #0]
 800f34a:	4608      	mov	r0, r1
 800f34c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f350:	4770      	bx	lr

0800f352 <__sfputs_r>:
 800f352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f354:	4606      	mov	r6, r0
 800f356:	460f      	mov	r7, r1
 800f358:	4614      	mov	r4, r2
 800f35a:	18d5      	adds	r5, r2, r3
 800f35c:	42ac      	cmp	r4, r5
 800f35e:	d101      	bne.n	800f364 <__sfputs_r+0x12>
 800f360:	2000      	movs	r0, #0
 800f362:	e007      	b.n	800f374 <__sfputs_r+0x22>
 800f364:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f368:	463a      	mov	r2, r7
 800f36a:	4630      	mov	r0, r6
 800f36c:	f7ff ffda 	bl	800f324 <__sfputc_r>
 800f370:	1c43      	adds	r3, r0, #1
 800f372:	d1f3      	bne.n	800f35c <__sfputs_r+0xa>
 800f374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f378 <_vfiprintf_r>:
 800f378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f37c:	460d      	mov	r5, r1
 800f37e:	b09d      	sub	sp, #116	; 0x74
 800f380:	4614      	mov	r4, r2
 800f382:	4698      	mov	r8, r3
 800f384:	4606      	mov	r6, r0
 800f386:	b118      	cbz	r0, 800f390 <_vfiprintf_r+0x18>
 800f388:	6983      	ldr	r3, [r0, #24]
 800f38a:	b90b      	cbnz	r3, 800f390 <_vfiprintf_r+0x18>
 800f38c:	f7ff f97a 	bl	800e684 <__sinit>
 800f390:	4b89      	ldr	r3, [pc, #548]	; (800f5b8 <_vfiprintf_r+0x240>)
 800f392:	429d      	cmp	r5, r3
 800f394:	d11b      	bne.n	800f3ce <_vfiprintf_r+0x56>
 800f396:	6875      	ldr	r5, [r6, #4]
 800f398:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f39a:	07d9      	lsls	r1, r3, #31
 800f39c:	d405      	bmi.n	800f3aa <_vfiprintf_r+0x32>
 800f39e:	89ab      	ldrh	r3, [r5, #12]
 800f3a0:	059a      	lsls	r2, r3, #22
 800f3a2:	d402      	bmi.n	800f3aa <_vfiprintf_r+0x32>
 800f3a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3a6:	f7ff fa10 	bl	800e7ca <__retarget_lock_acquire_recursive>
 800f3aa:	89ab      	ldrh	r3, [r5, #12]
 800f3ac:	071b      	lsls	r3, r3, #28
 800f3ae:	d501      	bpl.n	800f3b4 <_vfiprintf_r+0x3c>
 800f3b0:	692b      	ldr	r3, [r5, #16]
 800f3b2:	b9eb      	cbnz	r3, 800f3f0 <_vfiprintf_r+0x78>
 800f3b4:	4629      	mov	r1, r5
 800f3b6:	4630      	mov	r0, r6
 800f3b8:	f000 f980 	bl	800f6bc <__swsetup_r>
 800f3bc:	b1c0      	cbz	r0, 800f3f0 <_vfiprintf_r+0x78>
 800f3be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f3c0:	07dc      	lsls	r4, r3, #31
 800f3c2:	d50e      	bpl.n	800f3e2 <_vfiprintf_r+0x6a>
 800f3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f3c8:	b01d      	add	sp, #116	; 0x74
 800f3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ce:	4b7b      	ldr	r3, [pc, #492]	; (800f5bc <_vfiprintf_r+0x244>)
 800f3d0:	429d      	cmp	r5, r3
 800f3d2:	d101      	bne.n	800f3d8 <_vfiprintf_r+0x60>
 800f3d4:	68b5      	ldr	r5, [r6, #8]
 800f3d6:	e7df      	b.n	800f398 <_vfiprintf_r+0x20>
 800f3d8:	4b79      	ldr	r3, [pc, #484]	; (800f5c0 <_vfiprintf_r+0x248>)
 800f3da:	429d      	cmp	r5, r3
 800f3dc:	bf08      	it	eq
 800f3de:	68f5      	ldreq	r5, [r6, #12]
 800f3e0:	e7da      	b.n	800f398 <_vfiprintf_r+0x20>
 800f3e2:	89ab      	ldrh	r3, [r5, #12]
 800f3e4:	0598      	lsls	r0, r3, #22
 800f3e6:	d4ed      	bmi.n	800f3c4 <_vfiprintf_r+0x4c>
 800f3e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3ea:	f7ff f9ef 	bl	800e7cc <__retarget_lock_release_recursive>
 800f3ee:	e7e9      	b.n	800f3c4 <_vfiprintf_r+0x4c>
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	9309      	str	r3, [sp, #36]	; 0x24
 800f3f4:	2320      	movs	r3, #32
 800f3f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3fe:	2330      	movs	r3, #48	; 0x30
 800f400:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f5c4 <_vfiprintf_r+0x24c>
 800f404:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f408:	f04f 0901 	mov.w	r9, #1
 800f40c:	4623      	mov	r3, r4
 800f40e:	469a      	mov	sl, r3
 800f410:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f414:	b10a      	cbz	r2, 800f41a <_vfiprintf_r+0xa2>
 800f416:	2a25      	cmp	r2, #37	; 0x25
 800f418:	d1f9      	bne.n	800f40e <_vfiprintf_r+0x96>
 800f41a:	ebba 0b04 	subs.w	fp, sl, r4
 800f41e:	d00b      	beq.n	800f438 <_vfiprintf_r+0xc0>
 800f420:	465b      	mov	r3, fp
 800f422:	4622      	mov	r2, r4
 800f424:	4629      	mov	r1, r5
 800f426:	4630      	mov	r0, r6
 800f428:	f7ff ff93 	bl	800f352 <__sfputs_r>
 800f42c:	3001      	adds	r0, #1
 800f42e:	f000 80aa 	beq.w	800f586 <_vfiprintf_r+0x20e>
 800f432:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f434:	445a      	add	r2, fp
 800f436:	9209      	str	r2, [sp, #36]	; 0x24
 800f438:	f89a 3000 	ldrb.w	r3, [sl]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	f000 80a2 	beq.w	800f586 <_vfiprintf_r+0x20e>
 800f442:	2300      	movs	r3, #0
 800f444:	f04f 32ff 	mov.w	r2, #4294967295
 800f448:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f44c:	f10a 0a01 	add.w	sl, sl, #1
 800f450:	9304      	str	r3, [sp, #16]
 800f452:	9307      	str	r3, [sp, #28]
 800f454:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f458:	931a      	str	r3, [sp, #104]	; 0x68
 800f45a:	4654      	mov	r4, sl
 800f45c:	2205      	movs	r2, #5
 800f45e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f462:	4858      	ldr	r0, [pc, #352]	; (800f5c4 <_vfiprintf_r+0x24c>)
 800f464:	f7f0 fec4 	bl	80001f0 <memchr>
 800f468:	9a04      	ldr	r2, [sp, #16]
 800f46a:	b9d8      	cbnz	r0, 800f4a4 <_vfiprintf_r+0x12c>
 800f46c:	06d1      	lsls	r1, r2, #27
 800f46e:	bf44      	itt	mi
 800f470:	2320      	movmi	r3, #32
 800f472:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f476:	0713      	lsls	r3, r2, #28
 800f478:	bf44      	itt	mi
 800f47a:	232b      	movmi	r3, #43	; 0x2b
 800f47c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f480:	f89a 3000 	ldrb.w	r3, [sl]
 800f484:	2b2a      	cmp	r3, #42	; 0x2a
 800f486:	d015      	beq.n	800f4b4 <_vfiprintf_r+0x13c>
 800f488:	9a07      	ldr	r2, [sp, #28]
 800f48a:	4654      	mov	r4, sl
 800f48c:	2000      	movs	r0, #0
 800f48e:	f04f 0c0a 	mov.w	ip, #10
 800f492:	4621      	mov	r1, r4
 800f494:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f498:	3b30      	subs	r3, #48	; 0x30
 800f49a:	2b09      	cmp	r3, #9
 800f49c:	d94e      	bls.n	800f53c <_vfiprintf_r+0x1c4>
 800f49e:	b1b0      	cbz	r0, 800f4ce <_vfiprintf_r+0x156>
 800f4a0:	9207      	str	r2, [sp, #28]
 800f4a2:	e014      	b.n	800f4ce <_vfiprintf_r+0x156>
 800f4a4:	eba0 0308 	sub.w	r3, r0, r8
 800f4a8:	fa09 f303 	lsl.w	r3, r9, r3
 800f4ac:	4313      	orrs	r3, r2
 800f4ae:	9304      	str	r3, [sp, #16]
 800f4b0:	46a2      	mov	sl, r4
 800f4b2:	e7d2      	b.n	800f45a <_vfiprintf_r+0xe2>
 800f4b4:	9b03      	ldr	r3, [sp, #12]
 800f4b6:	1d19      	adds	r1, r3, #4
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	9103      	str	r1, [sp, #12]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	bfbb      	ittet	lt
 800f4c0:	425b      	neglt	r3, r3
 800f4c2:	f042 0202 	orrlt.w	r2, r2, #2
 800f4c6:	9307      	strge	r3, [sp, #28]
 800f4c8:	9307      	strlt	r3, [sp, #28]
 800f4ca:	bfb8      	it	lt
 800f4cc:	9204      	strlt	r2, [sp, #16]
 800f4ce:	7823      	ldrb	r3, [r4, #0]
 800f4d0:	2b2e      	cmp	r3, #46	; 0x2e
 800f4d2:	d10c      	bne.n	800f4ee <_vfiprintf_r+0x176>
 800f4d4:	7863      	ldrb	r3, [r4, #1]
 800f4d6:	2b2a      	cmp	r3, #42	; 0x2a
 800f4d8:	d135      	bne.n	800f546 <_vfiprintf_r+0x1ce>
 800f4da:	9b03      	ldr	r3, [sp, #12]
 800f4dc:	1d1a      	adds	r2, r3, #4
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	9203      	str	r2, [sp, #12]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	bfb8      	it	lt
 800f4e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800f4ea:	3402      	adds	r4, #2
 800f4ec:	9305      	str	r3, [sp, #20]
 800f4ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f5d4 <_vfiprintf_r+0x25c>
 800f4f2:	7821      	ldrb	r1, [r4, #0]
 800f4f4:	2203      	movs	r2, #3
 800f4f6:	4650      	mov	r0, sl
 800f4f8:	f7f0 fe7a 	bl	80001f0 <memchr>
 800f4fc:	b140      	cbz	r0, 800f510 <_vfiprintf_r+0x198>
 800f4fe:	2340      	movs	r3, #64	; 0x40
 800f500:	eba0 000a 	sub.w	r0, r0, sl
 800f504:	fa03 f000 	lsl.w	r0, r3, r0
 800f508:	9b04      	ldr	r3, [sp, #16]
 800f50a:	4303      	orrs	r3, r0
 800f50c:	3401      	adds	r4, #1
 800f50e:	9304      	str	r3, [sp, #16]
 800f510:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f514:	482c      	ldr	r0, [pc, #176]	; (800f5c8 <_vfiprintf_r+0x250>)
 800f516:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f51a:	2206      	movs	r2, #6
 800f51c:	f7f0 fe68 	bl	80001f0 <memchr>
 800f520:	2800      	cmp	r0, #0
 800f522:	d03f      	beq.n	800f5a4 <_vfiprintf_r+0x22c>
 800f524:	4b29      	ldr	r3, [pc, #164]	; (800f5cc <_vfiprintf_r+0x254>)
 800f526:	bb1b      	cbnz	r3, 800f570 <_vfiprintf_r+0x1f8>
 800f528:	9b03      	ldr	r3, [sp, #12]
 800f52a:	3307      	adds	r3, #7
 800f52c:	f023 0307 	bic.w	r3, r3, #7
 800f530:	3308      	adds	r3, #8
 800f532:	9303      	str	r3, [sp, #12]
 800f534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f536:	443b      	add	r3, r7
 800f538:	9309      	str	r3, [sp, #36]	; 0x24
 800f53a:	e767      	b.n	800f40c <_vfiprintf_r+0x94>
 800f53c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f540:	460c      	mov	r4, r1
 800f542:	2001      	movs	r0, #1
 800f544:	e7a5      	b.n	800f492 <_vfiprintf_r+0x11a>
 800f546:	2300      	movs	r3, #0
 800f548:	3401      	adds	r4, #1
 800f54a:	9305      	str	r3, [sp, #20]
 800f54c:	4619      	mov	r1, r3
 800f54e:	f04f 0c0a 	mov.w	ip, #10
 800f552:	4620      	mov	r0, r4
 800f554:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f558:	3a30      	subs	r2, #48	; 0x30
 800f55a:	2a09      	cmp	r2, #9
 800f55c:	d903      	bls.n	800f566 <_vfiprintf_r+0x1ee>
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d0c5      	beq.n	800f4ee <_vfiprintf_r+0x176>
 800f562:	9105      	str	r1, [sp, #20]
 800f564:	e7c3      	b.n	800f4ee <_vfiprintf_r+0x176>
 800f566:	fb0c 2101 	mla	r1, ip, r1, r2
 800f56a:	4604      	mov	r4, r0
 800f56c:	2301      	movs	r3, #1
 800f56e:	e7f0      	b.n	800f552 <_vfiprintf_r+0x1da>
 800f570:	ab03      	add	r3, sp, #12
 800f572:	9300      	str	r3, [sp, #0]
 800f574:	462a      	mov	r2, r5
 800f576:	4b16      	ldr	r3, [pc, #88]	; (800f5d0 <_vfiprintf_r+0x258>)
 800f578:	a904      	add	r1, sp, #16
 800f57a:	4630      	mov	r0, r6
 800f57c:	f7fd fc3a 	bl	800cdf4 <_printf_float>
 800f580:	4607      	mov	r7, r0
 800f582:	1c78      	adds	r0, r7, #1
 800f584:	d1d6      	bne.n	800f534 <_vfiprintf_r+0x1bc>
 800f586:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f588:	07d9      	lsls	r1, r3, #31
 800f58a:	d405      	bmi.n	800f598 <_vfiprintf_r+0x220>
 800f58c:	89ab      	ldrh	r3, [r5, #12]
 800f58e:	059a      	lsls	r2, r3, #22
 800f590:	d402      	bmi.n	800f598 <_vfiprintf_r+0x220>
 800f592:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f594:	f7ff f91a 	bl	800e7cc <__retarget_lock_release_recursive>
 800f598:	89ab      	ldrh	r3, [r5, #12]
 800f59a:	065b      	lsls	r3, r3, #25
 800f59c:	f53f af12 	bmi.w	800f3c4 <_vfiprintf_r+0x4c>
 800f5a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f5a2:	e711      	b.n	800f3c8 <_vfiprintf_r+0x50>
 800f5a4:	ab03      	add	r3, sp, #12
 800f5a6:	9300      	str	r3, [sp, #0]
 800f5a8:	462a      	mov	r2, r5
 800f5aa:	4b09      	ldr	r3, [pc, #36]	; (800f5d0 <_vfiprintf_r+0x258>)
 800f5ac:	a904      	add	r1, sp, #16
 800f5ae:	4630      	mov	r0, r6
 800f5b0:	f7fd fec4 	bl	800d33c <_printf_i>
 800f5b4:	e7e4      	b.n	800f580 <_vfiprintf_r+0x208>
 800f5b6:	bf00      	nop
 800f5b8:	08019f58 	.word	0x08019f58
 800f5bc:	08019f78 	.word	0x08019f78
 800f5c0:	08019f38 	.word	0x08019f38
 800f5c4:	0801a13a 	.word	0x0801a13a
 800f5c8:	0801a144 	.word	0x0801a144
 800f5cc:	0800cdf5 	.word	0x0800cdf5
 800f5d0:	0800f353 	.word	0x0800f353
 800f5d4:	0801a140 	.word	0x0801a140

0800f5d8 <_read_r>:
 800f5d8:	b538      	push	{r3, r4, r5, lr}
 800f5da:	4d07      	ldr	r5, [pc, #28]	; (800f5f8 <_read_r+0x20>)
 800f5dc:	4604      	mov	r4, r0
 800f5de:	4608      	mov	r0, r1
 800f5e0:	4611      	mov	r1, r2
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	602a      	str	r2, [r5, #0]
 800f5e6:	461a      	mov	r2, r3
 800f5e8:	f7f3 fdd8 	bl	800319c <_read>
 800f5ec:	1c43      	adds	r3, r0, #1
 800f5ee:	d102      	bne.n	800f5f6 <_read_r+0x1e>
 800f5f0:	682b      	ldr	r3, [r5, #0]
 800f5f2:	b103      	cbz	r3, 800f5f6 <_read_r+0x1e>
 800f5f4:	6023      	str	r3, [r4, #0]
 800f5f6:	bd38      	pop	{r3, r4, r5, pc}
 800f5f8:	20012908 	.word	0x20012908

0800f5fc <__swbuf_r>:
 800f5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5fe:	460e      	mov	r6, r1
 800f600:	4614      	mov	r4, r2
 800f602:	4605      	mov	r5, r0
 800f604:	b118      	cbz	r0, 800f60e <__swbuf_r+0x12>
 800f606:	6983      	ldr	r3, [r0, #24]
 800f608:	b90b      	cbnz	r3, 800f60e <__swbuf_r+0x12>
 800f60a:	f7ff f83b 	bl	800e684 <__sinit>
 800f60e:	4b21      	ldr	r3, [pc, #132]	; (800f694 <__swbuf_r+0x98>)
 800f610:	429c      	cmp	r4, r3
 800f612:	d12b      	bne.n	800f66c <__swbuf_r+0x70>
 800f614:	686c      	ldr	r4, [r5, #4]
 800f616:	69a3      	ldr	r3, [r4, #24]
 800f618:	60a3      	str	r3, [r4, #8]
 800f61a:	89a3      	ldrh	r3, [r4, #12]
 800f61c:	071a      	lsls	r2, r3, #28
 800f61e:	d52f      	bpl.n	800f680 <__swbuf_r+0x84>
 800f620:	6923      	ldr	r3, [r4, #16]
 800f622:	b36b      	cbz	r3, 800f680 <__swbuf_r+0x84>
 800f624:	6923      	ldr	r3, [r4, #16]
 800f626:	6820      	ldr	r0, [r4, #0]
 800f628:	1ac0      	subs	r0, r0, r3
 800f62a:	6963      	ldr	r3, [r4, #20]
 800f62c:	b2f6      	uxtb	r6, r6
 800f62e:	4283      	cmp	r3, r0
 800f630:	4637      	mov	r7, r6
 800f632:	dc04      	bgt.n	800f63e <__swbuf_r+0x42>
 800f634:	4621      	mov	r1, r4
 800f636:	4628      	mov	r0, r5
 800f638:	f7fe ff90 	bl	800e55c <_fflush_r>
 800f63c:	bb30      	cbnz	r0, 800f68c <__swbuf_r+0x90>
 800f63e:	68a3      	ldr	r3, [r4, #8]
 800f640:	3b01      	subs	r3, #1
 800f642:	60a3      	str	r3, [r4, #8]
 800f644:	6823      	ldr	r3, [r4, #0]
 800f646:	1c5a      	adds	r2, r3, #1
 800f648:	6022      	str	r2, [r4, #0]
 800f64a:	701e      	strb	r6, [r3, #0]
 800f64c:	6963      	ldr	r3, [r4, #20]
 800f64e:	3001      	adds	r0, #1
 800f650:	4283      	cmp	r3, r0
 800f652:	d004      	beq.n	800f65e <__swbuf_r+0x62>
 800f654:	89a3      	ldrh	r3, [r4, #12]
 800f656:	07db      	lsls	r3, r3, #31
 800f658:	d506      	bpl.n	800f668 <__swbuf_r+0x6c>
 800f65a:	2e0a      	cmp	r6, #10
 800f65c:	d104      	bne.n	800f668 <__swbuf_r+0x6c>
 800f65e:	4621      	mov	r1, r4
 800f660:	4628      	mov	r0, r5
 800f662:	f7fe ff7b 	bl	800e55c <_fflush_r>
 800f666:	b988      	cbnz	r0, 800f68c <__swbuf_r+0x90>
 800f668:	4638      	mov	r0, r7
 800f66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f66c:	4b0a      	ldr	r3, [pc, #40]	; (800f698 <__swbuf_r+0x9c>)
 800f66e:	429c      	cmp	r4, r3
 800f670:	d101      	bne.n	800f676 <__swbuf_r+0x7a>
 800f672:	68ac      	ldr	r4, [r5, #8]
 800f674:	e7cf      	b.n	800f616 <__swbuf_r+0x1a>
 800f676:	4b09      	ldr	r3, [pc, #36]	; (800f69c <__swbuf_r+0xa0>)
 800f678:	429c      	cmp	r4, r3
 800f67a:	bf08      	it	eq
 800f67c:	68ec      	ldreq	r4, [r5, #12]
 800f67e:	e7ca      	b.n	800f616 <__swbuf_r+0x1a>
 800f680:	4621      	mov	r1, r4
 800f682:	4628      	mov	r0, r5
 800f684:	f000 f81a 	bl	800f6bc <__swsetup_r>
 800f688:	2800      	cmp	r0, #0
 800f68a:	d0cb      	beq.n	800f624 <__swbuf_r+0x28>
 800f68c:	f04f 37ff 	mov.w	r7, #4294967295
 800f690:	e7ea      	b.n	800f668 <__swbuf_r+0x6c>
 800f692:	bf00      	nop
 800f694:	08019f58 	.word	0x08019f58
 800f698:	08019f78 	.word	0x08019f78
 800f69c:	08019f38 	.word	0x08019f38

0800f6a0 <__ascii_wctomb>:
 800f6a0:	b149      	cbz	r1, 800f6b6 <__ascii_wctomb+0x16>
 800f6a2:	2aff      	cmp	r2, #255	; 0xff
 800f6a4:	bf85      	ittet	hi
 800f6a6:	238a      	movhi	r3, #138	; 0x8a
 800f6a8:	6003      	strhi	r3, [r0, #0]
 800f6aa:	700a      	strbls	r2, [r1, #0]
 800f6ac:	f04f 30ff 	movhi.w	r0, #4294967295
 800f6b0:	bf98      	it	ls
 800f6b2:	2001      	movls	r0, #1
 800f6b4:	4770      	bx	lr
 800f6b6:	4608      	mov	r0, r1
 800f6b8:	4770      	bx	lr
	...

0800f6bc <__swsetup_r>:
 800f6bc:	4b32      	ldr	r3, [pc, #200]	; (800f788 <__swsetup_r+0xcc>)
 800f6be:	b570      	push	{r4, r5, r6, lr}
 800f6c0:	681d      	ldr	r5, [r3, #0]
 800f6c2:	4606      	mov	r6, r0
 800f6c4:	460c      	mov	r4, r1
 800f6c6:	b125      	cbz	r5, 800f6d2 <__swsetup_r+0x16>
 800f6c8:	69ab      	ldr	r3, [r5, #24]
 800f6ca:	b913      	cbnz	r3, 800f6d2 <__swsetup_r+0x16>
 800f6cc:	4628      	mov	r0, r5
 800f6ce:	f7fe ffd9 	bl	800e684 <__sinit>
 800f6d2:	4b2e      	ldr	r3, [pc, #184]	; (800f78c <__swsetup_r+0xd0>)
 800f6d4:	429c      	cmp	r4, r3
 800f6d6:	d10f      	bne.n	800f6f8 <__swsetup_r+0x3c>
 800f6d8:	686c      	ldr	r4, [r5, #4]
 800f6da:	89a3      	ldrh	r3, [r4, #12]
 800f6dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f6e0:	0719      	lsls	r1, r3, #28
 800f6e2:	d42c      	bmi.n	800f73e <__swsetup_r+0x82>
 800f6e4:	06dd      	lsls	r5, r3, #27
 800f6e6:	d411      	bmi.n	800f70c <__swsetup_r+0x50>
 800f6e8:	2309      	movs	r3, #9
 800f6ea:	6033      	str	r3, [r6, #0]
 800f6ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f6f0:	81a3      	strh	r3, [r4, #12]
 800f6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f6f6:	e03e      	b.n	800f776 <__swsetup_r+0xba>
 800f6f8:	4b25      	ldr	r3, [pc, #148]	; (800f790 <__swsetup_r+0xd4>)
 800f6fa:	429c      	cmp	r4, r3
 800f6fc:	d101      	bne.n	800f702 <__swsetup_r+0x46>
 800f6fe:	68ac      	ldr	r4, [r5, #8]
 800f700:	e7eb      	b.n	800f6da <__swsetup_r+0x1e>
 800f702:	4b24      	ldr	r3, [pc, #144]	; (800f794 <__swsetup_r+0xd8>)
 800f704:	429c      	cmp	r4, r3
 800f706:	bf08      	it	eq
 800f708:	68ec      	ldreq	r4, [r5, #12]
 800f70a:	e7e6      	b.n	800f6da <__swsetup_r+0x1e>
 800f70c:	0758      	lsls	r0, r3, #29
 800f70e:	d512      	bpl.n	800f736 <__swsetup_r+0x7a>
 800f710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f712:	b141      	cbz	r1, 800f726 <__swsetup_r+0x6a>
 800f714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f718:	4299      	cmp	r1, r3
 800f71a:	d002      	beq.n	800f722 <__swsetup_r+0x66>
 800f71c:	4630      	mov	r0, r6
 800f71e:	f7ff fc5f 	bl	800efe0 <_free_r>
 800f722:	2300      	movs	r3, #0
 800f724:	6363      	str	r3, [r4, #52]	; 0x34
 800f726:	89a3      	ldrh	r3, [r4, #12]
 800f728:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f72c:	81a3      	strh	r3, [r4, #12]
 800f72e:	2300      	movs	r3, #0
 800f730:	6063      	str	r3, [r4, #4]
 800f732:	6923      	ldr	r3, [r4, #16]
 800f734:	6023      	str	r3, [r4, #0]
 800f736:	89a3      	ldrh	r3, [r4, #12]
 800f738:	f043 0308 	orr.w	r3, r3, #8
 800f73c:	81a3      	strh	r3, [r4, #12]
 800f73e:	6923      	ldr	r3, [r4, #16]
 800f740:	b94b      	cbnz	r3, 800f756 <__swsetup_r+0x9a>
 800f742:	89a3      	ldrh	r3, [r4, #12]
 800f744:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f74c:	d003      	beq.n	800f756 <__swsetup_r+0x9a>
 800f74e:	4621      	mov	r1, r4
 800f750:	4630      	mov	r0, r6
 800f752:	f7ff f861 	bl	800e818 <__smakebuf_r>
 800f756:	89a0      	ldrh	r0, [r4, #12]
 800f758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f75c:	f010 0301 	ands.w	r3, r0, #1
 800f760:	d00a      	beq.n	800f778 <__swsetup_r+0xbc>
 800f762:	2300      	movs	r3, #0
 800f764:	60a3      	str	r3, [r4, #8]
 800f766:	6963      	ldr	r3, [r4, #20]
 800f768:	425b      	negs	r3, r3
 800f76a:	61a3      	str	r3, [r4, #24]
 800f76c:	6923      	ldr	r3, [r4, #16]
 800f76e:	b943      	cbnz	r3, 800f782 <__swsetup_r+0xc6>
 800f770:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f774:	d1ba      	bne.n	800f6ec <__swsetup_r+0x30>
 800f776:	bd70      	pop	{r4, r5, r6, pc}
 800f778:	0781      	lsls	r1, r0, #30
 800f77a:	bf58      	it	pl
 800f77c:	6963      	ldrpl	r3, [r4, #20]
 800f77e:	60a3      	str	r3, [r4, #8]
 800f780:	e7f4      	b.n	800f76c <__swsetup_r+0xb0>
 800f782:	2000      	movs	r0, #0
 800f784:	e7f7      	b.n	800f776 <__swsetup_r+0xba>
 800f786:	bf00      	nop
 800f788:	20000124 	.word	0x20000124
 800f78c:	08019f58 	.word	0x08019f58
 800f790:	08019f78 	.word	0x08019f78
 800f794:	08019f38 	.word	0x08019f38

0800f798 <abort>:
 800f798:	b508      	push	{r3, lr}
 800f79a:	2006      	movs	r0, #6
 800f79c:	f000 f82c 	bl	800f7f8 <raise>
 800f7a0:	2001      	movs	r0, #1
 800f7a2:	f001 fcf3 	bl	801118c <_exit>

0800f7a6 <_raise_r>:
 800f7a6:	291f      	cmp	r1, #31
 800f7a8:	b538      	push	{r3, r4, r5, lr}
 800f7aa:	4604      	mov	r4, r0
 800f7ac:	460d      	mov	r5, r1
 800f7ae:	d904      	bls.n	800f7ba <_raise_r+0x14>
 800f7b0:	2316      	movs	r3, #22
 800f7b2:	6003      	str	r3, [r0, #0]
 800f7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f7b8:	bd38      	pop	{r3, r4, r5, pc}
 800f7ba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f7bc:	b112      	cbz	r2, 800f7c4 <_raise_r+0x1e>
 800f7be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f7c2:	b94b      	cbnz	r3, 800f7d8 <_raise_r+0x32>
 800f7c4:	4620      	mov	r0, r4
 800f7c6:	f000 f831 	bl	800f82c <_getpid_r>
 800f7ca:	462a      	mov	r2, r5
 800f7cc:	4601      	mov	r1, r0
 800f7ce:	4620      	mov	r0, r4
 800f7d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7d4:	f000 b818 	b.w	800f808 <_kill_r>
 800f7d8:	2b01      	cmp	r3, #1
 800f7da:	d00a      	beq.n	800f7f2 <_raise_r+0x4c>
 800f7dc:	1c59      	adds	r1, r3, #1
 800f7de:	d103      	bne.n	800f7e8 <_raise_r+0x42>
 800f7e0:	2316      	movs	r3, #22
 800f7e2:	6003      	str	r3, [r0, #0]
 800f7e4:	2001      	movs	r0, #1
 800f7e6:	e7e7      	b.n	800f7b8 <_raise_r+0x12>
 800f7e8:	2400      	movs	r4, #0
 800f7ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	4798      	blx	r3
 800f7f2:	2000      	movs	r0, #0
 800f7f4:	e7e0      	b.n	800f7b8 <_raise_r+0x12>
	...

0800f7f8 <raise>:
 800f7f8:	4b02      	ldr	r3, [pc, #8]	; (800f804 <raise+0xc>)
 800f7fa:	4601      	mov	r1, r0
 800f7fc:	6818      	ldr	r0, [r3, #0]
 800f7fe:	f7ff bfd2 	b.w	800f7a6 <_raise_r>
 800f802:	bf00      	nop
 800f804:	20000124 	.word	0x20000124

0800f808 <_kill_r>:
 800f808:	b538      	push	{r3, r4, r5, lr}
 800f80a:	4d07      	ldr	r5, [pc, #28]	; (800f828 <_kill_r+0x20>)
 800f80c:	2300      	movs	r3, #0
 800f80e:	4604      	mov	r4, r0
 800f810:	4608      	mov	r0, r1
 800f812:	4611      	mov	r1, r2
 800f814:	602b      	str	r3, [r5, #0]
 800f816:	f001 fcb1 	bl	801117c <_kill>
 800f81a:	1c43      	adds	r3, r0, #1
 800f81c:	d102      	bne.n	800f824 <_kill_r+0x1c>
 800f81e:	682b      	ldr	r3, [r5, #0]
 800f820:	b103      	cbz	r3, 800f824 <_kill_r+0x1c>
 800f822:	6023      	str	r3, [r4, #0]
 800f824:	bd38      	pop	{r3, r4, r5, pc}
 800f826:	bf00      	nop
 800f828:	20012908 	.word	0x20012908

0800f82c <_getpid_r>:
 800f82c:	f001 bc9e 	b.w	801116c <_getpid>

0800f830 <cos>:
 800f830:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f832:	ec53 2b10 	vmov	r2, r3, d0
 800f836:	4824      	ldr	r0, [pc, #144]	; (800f8c8 <cos+0x98>)
 800f838:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f83c:	4281      	cmp	r1, r0
 800f83e:	dc06      	bgt.n	800f84e <cos+0x1e>
 800f840:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800f8c0 <cos+0x90>
 800f844:	f000 fdd4 	bl	80103f0 <__kernel_cos>
 800f848:	ec51 0b10 	vmov	r0, r1, d0
 800f84c:	e007      	b.n	800f85e <cos+0x2e>
 800f84e:	481f      	ldr	r0, [pc, #124]	; (800f8cc <cos+0x9c>)
 800f850:	4281      	cmp	r1, r0
 800f852:	dd09      	ble.n	800f868 <cos+0x38>
 800f854:	ee10 0a10 	vmov	r0, s0
 800f858:	4619      	mov	r1, r3
 800f85a:	f7f0 fd1d 	bl	8000298 <__aeabi_dsub>
 800f85e:	ec41 0b10 	vmov	d0, r0, r1
 800f862:	b005      	add	sp, #20
 800f864:	f85d fb04 	ldr.w	pc, [sp], #4
 800f868:	4668      	mov	r0, sp
 800f86a:	f000 f8f1 	bl	800fa50 <__ieee754_rem_pio2>
 800f86e:	f000 0003 	and.w	r0, r0, #3
 800f872:	2801      	cmp	r0, #1
 800f874:	d007      	beq.n	800f886 <cos+0x56>
 800f876:	2802      	cmp	r0, #2
 800f878:	d012      	beq.n	800f8a0 <cos+0x70>
 800f87a:	b9c0      	cbnz	r0, 800f8ae <cos+0x7e>
 800f87c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f880:	ed9d 0b00 	vldr	d0, [sp]
 800f884:	e7de      	b.n	800f844 <cos+0x14>
 800f886:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f88a:	ed9d 0b00 	vldr	d0, [sp]
 800f88e:	f001 f9b7 	bl	8010c00 <__kernel_sin>
 800f892:	ec53 2b10 	vmov	r2, r3, d0
 800f896:	ee10 0a10 	vmov	r0, s0
 800f89a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f89e:	e7de      	b.n	800f85e <cos+0x2e>
 800f8a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f8a4:	ed9d 0b00 	vldr	d0, [sp]
 800f8a8:	f000 fda2 	bl	80103f0 <__kernel_cos>
 800f8ac:	e7f1      	b.n	800f892 <cos+0x62>
 800f8ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f8b2:	ed9d 0b00 	vldr	d0, [sp]
 800f8b6:	2001      	movs	r0, #1
 800f8b8:	f001 f9a2 	bl	8010c00 <__kernel_sin>
 800f8bc:	e7c4      	b.n	800f848 <cos+0x18>
 800f8be:	bf00      	nop
	...
 800f8c8:	3fe921fb 	.word	0x3fe921fb
 800f8cc:	7fefffff 	.word	0x7fefffff

0800f8d0 <powf>:
 800f8d0:	b508      	push	{r3, lr}
 800f8d2:	ed2d 8b04 	vpush	{d8-d9}
 800f8d6:	eeb0 9a40 	vmov.f32	s18, s0
 800f8da:	eef0 8a60 	vmov.f32	s17, s1
 800f8de:	f000 fac1 	bl	800fe64 <__ieee754_powf>
 800f8e2:	4b43      	ldr	r3, [pc, #268]	; (800f9f0 <powf+0x120>)
 800f8e4:	f993 3000 	ldrsb.w	r3, [r3]
 800f8e8:	3301      	adds	r3, #1
 800f8ea:	eeb0 8a40 	vmov.f32	s16, s0
 800f8ee:	d012      	beq.n	800f916 <powf+0x46>
 800f8f0:	eef4 8a68 	vcmp.f32	s17, s17
 800f8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8f8:	d60d      	bvs.n	800f916 <powf+0x46>
 800f8fa:	eeb4 9a49 	vcmp.f32	s18, s18
 800f8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f902:	d70d      	bvc.n	800f920 <powf+0x50>
 800f904:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f90c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f910:	bf08      	it	eq
 800f912:	eeb0 8a67 	vmoveq.f32	s16, s15
 800f916:	eeb0 0a48 	vmov.f32	s0, s16
 800f91a:	ecbd 8b04 	vpop	{d8-d9}
 800f91e:	bd08      	pop	{r3, pc}
 800f920:	eddf 9a34 	vldr	s19, [pc, #208]	; 800f9f4 <powf+0x124>
 800f924:	eeb4 9a69 	vcmp.f32	s18, s19
 800f928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f92c:	d116      	bne.n	800f95c <powf+0x8c>
 800f92e:	eef4 8a69 	vcmp.f32	s17, s19
 800f932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f936:	d057      	beq.n	800f9e8 <powf+0x118>
 800f938:	eeb0 0a68 	vmov.f32	s0, s17
 800f93c:	f001 fb35 	bl	8010faa <finitef>
 800f940:	2800      	cmp	r0, #0
 800f942:	d0e8      	beq.n	800f916 <powf+0x46>
 800f944:	eef4 8ae9 	vcmpe.f32	s17, s19
 800f948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f94c:	d5e3      	bpl.n	800f916 <powf+0x46>
 800f94e:	f7fd f97f 	bl	800cc50 <__errno>
 800f952:	2321      	movs	r3, #33	; 0x21
 800f954:	6003      	str	r3, [r0, #0]
 800f956:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800f9f8 <powf+0x128>
 800f95a:	e7dc      	b.n	800f916 <powf+0x46>
 800f95c:	f001 fb25 	bl	8010faa <finitef>
 800f960:	bb50      	cbnz	r0, 800f9b8 <powf+0xe8>
 800f962:	eeb0 0a49 	vmov.f32	s0, s18
 800f966:	f001 fb20 	bl	8010faa <finitef>
 800f96a:	b328      	cbz	r0, 800f9b8 <powf+0xe8>
 800f96c:	eeb0 0a68 	vmov.f32	s0, s17
 800f970:	f001 fb1b 	bl	8010faa <finitef>
 800f974:	b300      	cbz	r0, 800f9b8 <powf+0xe8>
 800f976:	eeb4 8a48 	vcmp.f32	s16, s16
 800f97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f97e:	d706      	bvc.n	800f98e <powf+0xbe>
 800f980:	f7fd f966 	bl	800cc50 <__errno>
 800f984:	2321      	movs	r3, #33	; 0x21
 800f986:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800f98a:	6003      	str	r3, [r0, #0]
 800f98c:	e7c3      	b.n	800f916 <powf+0x46>
 800f98e:	f7fd f95f 	bl	800cc50 <__errno>
 800f992:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800f996:	2322      	movs	r3, #34	; 0x22
 800f998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f99c:	6003      	str	r3, [r0, #0]
 800f99e:	d508      	bpl.n	800f9b2 <powf+0xe2>
 800f9a0:	eeb0 0a68 	vmov.f32	s0, s17
 800f9a4:	f001 fb14 	bl	8010fd0 <rintf>
 800f9a8:	eeb4 0a68 	vcmp.f32	s0, s17
 800f9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9b0:	d1d1      	bne.n	800f956 <powf+0x86>
 800f9b2:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800f9fc <powf+0x12c>
 800f9b6:	e7ae      	b.n	800f916 <powf+0x46>
 800f9b8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f9bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9c0:	d1a9      	bne.n	800f916 <powf+0x46>
 800f9c2:	eeb0 0a49 	vmov.f32	s0, s18
 800f9c6:	f001 faf0 	bl	8010faa <finitef>
 800f9ca:	2800      	cmp	r0, #0
 800f9cc:	d0a3      	beq.n	800f916 <powf+0x46>
 800f9ce:	eeb0 0a68 	vmov.f32	s0, s17
 800f9d2:	f001 faea 	bl	8010faa <finitef>
 800f9d6:	2800      	cmp	r0, #0
 800f9d8:	d09d      	beq.n	800f916 <powf+0x46>
 800f9da:	f7fd f939 	bl	800cc50 <__errno>
 800f9de:	2322      	movs	r3, #34	; 0x22
 800f9e0:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800f9f4 <powf+0x124>
 800f9e4:	6003      	str	r3, [r0, #0]
 800f9e6:	e796      	b.n	800f916 <powf+0x46>
 800f9e8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f9ec:	e793      	b.n	800f916 <powf+0x46>
 800f9ee:	bf00      	nop
 800f9f0:	200002f4 	.word	0x200002f4
 800f9f4:	00000000 	.word	0x00000000
 800f9f8:	ff800000 	.word	0xff800000
 800f9fc:	7f800000 	.word	0x7f800000

0800fa00 <sqrtf>:
 800fa00:	b508      	push	{r3, lr}
 800fa02:	ed2d 8b02 	vpush	{d8}
 800fa06:	eeb0 8a40 	vmov.f32	s16, s0
 800fa0a:	f000 fceb 	bl	80103e4 <__ieee754_sqrtf>
 800fa0e:	4b0d      	ldr	r3, [pc, #52]	; (800fa44 <sqrtf+0x44>)
 800fa10:	f993 3000 	ldrsb.w	r3, [r3]
 800fa14:	3301      	adds	r3, #1
 800fa16:	d011      	beq.n	800fa3c <sqrtf+0x3c>
 800fa18:	eeb4 8a48 	vcmp.f32	s16, s16
 800fa1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa20:	d60c      	bvs.n	800fa3c <sqrtf+0x3c>
 800fa22:	eddf 8a09 	vldr	s17, [pc, #36]	; 800fa48 <sqrtf+0x48>
 800fa26:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800fa2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa2e:	d505      	bpl.n	800fa3c <sqrtf+0x3c>
 800fa30:	f7fd f90e 	bl	800cc50 <__errno>
 800fa34:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800fa38:	2321      	movs	r3, #33	; 0x21
 800fa3a:	6003      	str	r3, [r0, #0]
 800fa3c:	ecbd 8b02 	vpop	{d8}
 800fa40:	bd08      	pop	{r3, pc}
 800fa42:	bf00      	nop
 800fa44:	200002f4 	.word	0x200002f4
	...

0800fa50 <__ieee754_rem_pio2>:
 800fa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa54:	ed2d 8b02 	vpush	{d8}
 800fa58:	ec55 4b10 	vmov	r4, r5, d0
 800fa5c:	4bca      	ldr	r3, [pc, #808]	; (800fd88 <__ieee754_rem_pio2+0x338>)
 800fa5e:	b08b      	sub	sp, #44	; 0x2c
 800fa60:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800fa64:	4598      	cmp	r8, r3
 800fa66:	4682      	mov	sl, r0
 800fa68:	9502      	str	r5, [sp, #8]
 800fa6a:	dc08      	bgt.n	800fa7e <__ieee754_rem_pio2+0x2e>
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	2300      	movs	r3, #0
 800fa70:	ed80 0b00 	vstr	d0, [r0]
 800fa74:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fa78:	f04f 0b00 	mov.w	fp, #0
 800fa7c:	e028      	b.n	800fad0 <__ieee754_rem_pio2+0x80>
 800fa7e:	4bc3      	ldr	r3, [pc, #780]	; (800fd8c <__ieee754_rem_pio2+0x33c>)
 800fa80:	4598      	cmp	r8, r3
 800fa82:	dc78      	bgt.n	800fb76 <__ieee754_rem_pio2+0x126>
 800fa84:	9b02      	ldr	r3, [sp, #8]
 800fa86:	4ec2      	ldr	r6, [pc, #776]	; (800fd90 <__ieee754_rem_pio2+0x340>)
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	ee10 0a10 	vmov	r0, s0
 800fa8e:	a3b0      	add	r3, pc, #704	; (adr r3, 800fd50 <__ieee754_rem_pio2+0x300>)
 800fa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa94:	4629      	mov	r1, r5
 800fa96:	dd39      	ble.n	800fb0c <__ieee754_rem_pio2+0xbc>
 800fa98:	f7f0 fbfe 	bl	8000298 <__aeabi_dsub>
 800fa9c:	45b0      	cmp	r8, r6
 800fa9e:	4604      	mov	r4, r0
 800faa0:	460d      	mov	r5, r1
 800faa2:	d01b      	beq.n	800fadc <__ieee754_rem_pio2+0x8c>
 800faa4:	a3ac      	add	r3, pc, #688	; (adr r3, 800fd58 <__ieee754_rem_pio2+0x308>)
 800faa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faaa:	f7f0 fbf5 	bl	8000298 <__aeabi_dsub>
 800faae:	4602      	mov	r2, r0
 800fab0:	460b      	mov	r3, r1
 800fab2:	e9ca 2300 	strd	r2, r3, [sl]
 800fab6:	4620      	mov	r0, r4
 800fab8:	4629      	mov	r1, r5
 800faba:	f7f0 fbed 	bl	8000298 <__aeabi_dsub>
 800fabe:	a3a6      	add	r3, pc, #664	; (adr r3, 800fd58 <__ieee754_rem_pio2+0x308>)
 800fac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac4:	f7f0 fbe8 	bl	8000298 <__aeabi_dsub>
 800fac8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800facc:	f04f 0b01 	mov.w	fp, #1
 800fad0:	4658      	mov	r0, fp
 800fad2:	b00b      	add	sp, #44	; 0x2c
 800fad4:	ecbd 8b02 	vpop	{d8}
 800fad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fadc:	a3a0      	add	r3, pc, #640	; (adr r3, 800fd60 <__ieee754_rem_pio2+0x310>)
 800fade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae2:	f7f0 fbd9 	bl	8000298 <__aeabi_dsub>
 800fae6:	a3a0      	add	r3, pc, #640	; (adr r3, 800fd68 <__ieee754_rem_pio2+0x318>)
 800fae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faec:	4604      	mov	r4, r0
 800faee:	460d      	mov	r5, r1
 800faf0:	f7f0 fbd2 	bl	8000298 <__aeabi_dsub>
 800faf4:	4602      	mov	r2, r0
 800faf6:	460b      	mov	r3, r1
 800faf8:	e9ca 2300 	strd	r2, r3, [sl]
 800fafc:	4620      	mov	r0, r4
 800fafe:	4629      	mov	r1, r5
 800fb00:	f7f0 fbca 	bl	8000298 <__aeabi_dsub>
 800fb04:	a398      	add	r3, pc, #608	; (adr r3, 800fd68 <__ieee754_rem_pio2+0x318>)
 800fb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb0a:	e7db      	b.n	800fac4 <__ieee754_rem_pio2+0x74>
 800fb0c:	f7f0 fbc6 	bl	800029c <__adddf3>
 800fb10:	45b0      	cmp	r8, r6
 800fb12:	4604      	mov	r4, r0
 800fb14:	460d      	mov	r5, r1
 800fb16:	d016      	beq.n	800fb46 <__ieee754_rem_pio2+0xf6>
 800fb18:	a38f      	add	r3, pc, #572	; (adr r3, 800fd58 <__ieee754_rem_pio2+0x308>)
 800fb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb1e:	f7f0 fbbd 	bl	800029c <__adddf3>
 800fb22:	4602      	mov	r2, r0
 800fb24:	460b      	mov	r3, r1
 800fb26:	e9ca 2300 	strd	r2, r3, [sl]
 800fb2a:	4620      	mov	r0, r4
 800fb2c:	4629      	mov	r1, r5
 800fb2e:	f7f0 fbb3 	bl	8000298 <__aeabi_dsub>
 800fb32:	a389      	add	r3, pc, #548	; (adr r3, 800fd58 <__ieee754_rem_pio2+0x308>)
 800fb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb38:	f7f0 fbb0 	bl	800029c <__adddf3>
 800fb3c:	f04f 3bff 	mov.w	fp, #4294967295
 800fb40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fb44:	e7c4      	b.n	800fad0 <__ieee754_rem_pio2+0x80>
 800fb46:	a386      	add	r3, pc, #536	; (adr r3, 800fd60 <__ieee754_rem_pio2+0x310>)
 800fb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb4c:	f7f0 fba6 	bl	800029c <__adddf3>
 800fb50:	a385      	add	r3, pc, #532	; (adr r3, 800fd68 <__ieee754_rem_pio2+0x318>)
 800fb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb56:	4604      	mov	r4, r0
 800fb58:	460d      	mov	r5, r1
 800fb5a:	f7f0 fb9f 	bl	800029c <__adddf3>
 800fb5e:	4602      	mov	r2, r0
 800fb60:	460b      	mov	r3, r1
 800fb62:	e9ca 2300 	strd	r2, r3, [sl]
 800fb66:	4620      	mov	r0, r4
 800fb68:	4629      	mov	r1, r5
 800fb6a:	f7f0 fb95 	bl	8000298 <__aeabi_dsub>
 800fb6e:	a37e      	add	r3, pc, #504	; (adr r3, 800fd68 <__ieee754_rem_pio2+0x318>)
 800fb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb74:	e7e0      	b.n	800fb38 <__ieee754_rem_pio2+0xe8>
 800fb76:	4b87      	ldr	r3, [pc, #540]	; (800fd94 <__ieee754_rem_pio2+0x344>)
 800fb78:	4598      	cmp	r8, r3
 800fb7a:	f300 80d9 	bgt.w	800fd30 <__ieee754_rem_pio2+0x2e0>
 800fb7e:	f001 f8fd 	bl	8010d7c <fabs>
 800fb82:	ec55 4b10 	vmov	r4, r5, d0
 800fb86:	ee10 0a10 	vmov	r0, s0
 800fb8a:	a379      	add	r3, pc, #484	; (adr r3, 800fd70 <__ieee754_rem_pio2+0x320>)
 800fb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb90:	4629      	mov	r1, r5
 800fb92:	f7f0 fd39 	bl	8000608 <__aeabi_dmul>
 800fb96:	4b80      	ldr	r3, [pc, #512]	; (800fd98 <__ieee754_rem_pio2+0x348>)
 800fb98:	2200      	movs	r2, #0
 800fb9a:	f7f0 fb7f 	bl	800029c <__adddf3>
 800fb9e:	f7f0 ffe3 	bl	8000b68 <__aeabi_d2iz>
 800fba2:	4683      	mov	fp, r0
 800fba4:	f7f0 fcc6 	bl	8000534 <__aeabi_i2d>
 800fba8:	4602      	mov	r2, r0
 800fbaa:	460b      	mov	r3, r1
 800fbac:	ec43 2b18 	vmov	d8, r2, r3
 800fbb0:	a367      	add	r3, pc, #412	; (adr r3, 800fd50 <__ieee754_rem_pio2+0x300>)
 800fbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb6:	f7f0 fd27 	bl	8000608 <__aeabi_dmul>
 800fbba:	4602      	mov	r2, r0
 800fbbc:	460b      	mov	r3, r1
 800fbbe:	4620      	mov	r0, r4
 800fbc0:	4629      	mov	r1, r5
 800fbc2:	f7f0 fb69 	bl	8000298 <__aeabi_dsub>
 800fbc6:	a364      	add	r3, pc, #400	; (adr r3, 800fd58 <__ieee754_rem_pio2+0x308>)
 800fbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbcc:	4606      	mov	r6, r0
 800fbce:	460f      	mov	r7, r1
 800fbd0:	ec51 0b18 	vmov	r0, r1, d8
 800fbd4:	f7f0 fd18 	bl	8000608 <__aeabi_dmul>
 800fbd8:	f1bb 0f1f 	cmp.w	fp, #31
 800fbdc:	4604      	mov	r4, r0
 800fbde:	460d      	mov	r5, r1
 800fbe0:	dc0d      	bgt.n	800fbfe <__ieee754_rem_pio2+0x1ae>
 800fbe2:	4b6e      	ldr	r3, [pc, #440]	; (800fd9c <__ieee754_rem_pio2+0x34c>)
 800fbe4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800fbe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbec:	4543      	cmp	r3, r8
 800fbee:	d006      	beq.n	800fbfe <__ieee754_rem_pio2+0x1ae>
 800fbf0:	4622      	mov	r2, r4
 800fbf2:	462b      	mov	r3, r5
 800fbf4:	4630      	mov	r0, r6
 800fbf6:	4639      	mov	r1, r7
 800fbf8:	f7f0 fb4e 	bl	8000298 <__aeabi_dsub>
 800fbfc:	e00f      	b.n	800fc1e <__ieee754_rem_pio2+0x1ce>
 800fbfe:	462b      	mov	r3, r5
 800fc00:	4622      	mov	r2, r4
 800fc02:	4630      	mov	r0, r6
 800fc04:	4639      	mov	r1, r7
 800fc06:	f7f0 fb47 	bl	8000298 <__aeabi_dsub>
 800fc0a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fc0e:	9303      	str	r3, [sp, #12]
 800fc10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fc14:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800fc18:	f1b8 0f10 	cmp.w	r8, #16
 800fc1c:	dc02      	bgt.n	800fc24 <__ieee754_rem_pio2+0x1d4>
 800fc1e:	e9ca 0100 	strd	r0, r1, [sl]
 800fc22:	e039      	b.n	800fc98 <__ieee754_rem_pio2+0x248>
 800fc24:	a34e      	add	r3, pc, #312	; (adr r3, 800fd60 <__ieee754_rem_pio2+0x310>)
 800fc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2a:	ec51 0b18 	vmov	r0, r1, d8
 800fc2e:	f7f0 fceb 	bl	8000608 <__aeabi_dmul>
 800fc32:	4604      	mov	r4, r0
 800fc34:	460d      	mov	r5, r1
 800fc36:	4602      	mov	r2, r0
 800fc38:	460b      	mov	r3, r1
 800fc3a:	4630      	mov	r0, r6
 800fc3c:	4639      	mov	r1, r7
 800fc3e:	f7f0 fb2b 	bl	8000298 <__aeabi_dsub>
 800fc42:	4602      	mov	r2, r0
 800fc44:	460b      	mov	r3, r1
 800fc46:	4680      	mov	r8, r0
 800fc48:	4689      	mov	r9, r1
 800fc4a:	4630      	mov	r0, r6
 800fc4c:	4639      	mov	r1, r7
 800fc4e:	f7f0 fb23 	bl	8000298 <__aeabi_dsub>
 800fc52:	4622      	mov	r2, r4
 800fc54:	462b      	mov	r3, r5
 800fc56:	f7f0 fb1f 	bl	8000298 <__aeabi_dsub>
 800fc5a:	a343      	add	r3, pc, #268	; (adr r3, 800fd68 <__ieee754_rem_pio2+0x318>)
 800fc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc60:	4604      	mov	r4, r0
 800fc62:	460d      	mov	r5, r1
 800fc64:	ec51 0b18 	vmov	r0, r1, d8
 800fc68:	f7f0 fcce 	bl	8000608 <__aeabi_dmul>
 800fc6c:	4622      	mov	r2, r4
 800fc6e:	462b      	mov	r3, r5
 800fc70:	f7f0 fb12 	bl	8000298 <__aeabi_dsub>
 800fc74:	4602      	mov	r2, r0
 800fc76:	460b      	mov	r3, r1
 800fc78:	4604      	mov	r4, r0
 800fc7a:	460d      	mov	r5, r1
 800fc7c:	4640      	mov	r0, r8
 800fc7e:	4649      	mov	r1, r9
 800fc80:	f7f0 fb0a 	bl	8000298 <__aeabi_dsub>
 800fc84:	9a03      	ldr	r2, [sp, #12]
 800fc86:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fc8a:	1ad3      	subs	r3, r2, r3
 800fc8c:	2b31      	cmp	r3, #49	; 0x31
 800fc8e:	dc24      	bgt.n	800fcda <__ieee754_rem_pio2+0x28a>
 800fc90:	e9ca 0100 	strd	r0, r1, [sl]
 800fc94:	4646      	mov	r6, r8
 800fc96:	464f      	mov	r7, r9
 800fc98:	e9da 8900 	ldrd	r8, r9, [sl]
 800fc9c:	4630      	mov	r0, r6
 800fc9e:	4642      	mov	r2, r8
 800fca0:	464b      	mov	r3, r9
 800fca2:	4639      	mov	r1, r7
 800fca4:	f7f0 faf8 	bl	8000298 <__aeabi_dsub>
 800fca8:	462b      	mov	r3, r5
 800fcaa:	4622      	mov	r2, r4
 800fcac:	f7f0 faf4 	bl	8000298 <__aeabi_dsub>
 800fcb0:	9b02      	ldr	r3, [sp, #8]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fcb8:	f6bf af0a 	bge.w	800fad0 <__ieee754_rem_pio2+0x80>
 800fcbc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fcc0:	f8ca 3004 	str.w	r3, [sl, #4]
 800fcc4:	f8ca 8000 	str.w	r8, [sl]
 800fcc8:	f8ca 0008 	str.w	r0, [sl, #8]
 800fccc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fcd0:	f8ca 300c 	str.w	r3, [sl, #12]
 800fcd4:	f1cb 0b00 	rsb	fp, fp, #0
 800fcd8:	e6fa      	b.n	800fad0 <__ieee754_rem_pio2+0x80>
 800fcda:	a327      	add	r3, pc, #156	; (adr r3, 800fd78 <__ieee754_rem_pio2+0x328>)
 800fcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce0:	ec51 0b18 	vmov	r0, r1, d8
 800fce4:	f7f0 fc90 	bl	8000608 <__aeabi_dmul>
 800fce8:	4604      	mov	r4, r0
 800fcea:	460d      	mov	r5, r1
 800fcec:	4602      	mov	r2, r0
 800fcee:	460b      	mov	r3, r1
 800fcf0:	4640      	mov	r0, r8
 800fcf2:	4649      	mov	r1, r9
 800fcf4:	f7f0 fad0 	bl	8000298 <__aeabi_dsub>
 800fcf8:	4602      	mov	r2, r0
 800fcfa:	460b      	mov	r3, r1
 800fcfc:	4606      	mov	r6, r0
 800fcfe:	460f      	mov	r7, r1
 800fd00:	4640      	mov	r0, r8
 800fd02:	4649      	mov	r1, r9
 800fd04:	f7f0 fac8 	bl	8000298 <__aeabi_dsub>
 800fd08:	4622      	mov	r2, r4
 800fd0a:	462b      	mov	r3, r5
 800fd0c:	f7f0 fac4 	bl	8000298 <__aeabi_dsub>
 800fd10:	a31b      	add	r3, pc, #108	; (adr r3, 800fd80 <__ieee754_rem_pio2+0x330>)
 800fd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd16:	4604      	mov	r4, r0
 800fd18:	460d      	mov	r5, r1
 800fd1a:	ec51 0b18 	vmov	r0, r1, d8
 800fd1e:	f7f0 fc73 	bl	8000608 <__aeabi_dmul>
 800fd22:	4622      	mov	r2, r4
 800fd24:	462b      	mov	r3, r5
 800fd26:	f7f0 fab7 	bl	8000298 <__aeabi_dsub>
 800fd2a:	4604      	mov	r4, r0
 800fd2c:	460d      	mov	r5, r1
 800fd2e:	e75f      	b.n	800fbf0 <__ieee754_rem_pio2+0x1a0>
 800fd30:	4b1b      	ldr	r3, [pc, #108]	; (800fda0 <__ieee754_rem_pio2+0x350>)
 800fd32:	4598      	cmp	r8, r3
 800fd34:	dd36      	ble.n	800fda4 <__ieee754_rem_pio2+0x354>
 800fd36:	ee10 2a10 	vmov	r2, s0
 800fd3a:	462b      	mov	r3, r5
 800fd3c:	4620      	mov	r0, r4
 800fd3e:	4629      	mov	r1, r5
 800fd40:	f7f0 faaa 	bl	8000298 <__aeabi_dsub>
 800fd44:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fd48:	e9ca 0100 	strd	r0, r1, [sl]
 800fd4c:	e694      	b.n	800fa78 <__ieee754_rem_pio2+0x28>
 800fd4e:	bf00      	nop
 800fd50:	54400000 	.word	0x54400000
 800fd54:	3ff921fb 	.word	0x3ff921fb
 800fd58:	1a626331 	.word	0x1a626331
 800fd5c:	3dd0b461 	.word	0x3dd0b461
 800fd60:	1a600000 	.word	0x1a600000
 800fd64:	3dd0b461 	.word	0x3dd0b461
 800fd68:	2e037073 	.word	0x2e037073
 800fd6c:	3ba3198a 	.word	0x3ba3198a
 800fd70:	6dc9c883 	.word	0x6dc9c883
 800fd74:	3fe45f30 	.word	0x3fe45f30
 800fd78:	2e000000 	.word	0x2e000000
 800fd7c:	3ba3198a 	.word	0x3ba3198a
 800fd80:	252049c1 	.word	0x252049c1
 800fd84:	397b839a 	.word	0x397b839a
 800fd88:	3fe921fb 	.word	0x3fe921fb
 800fd8c:	4002d97b 	.word	0x4002d97b
 800fd90:	3ff921fb 	.word	0x3ff921fb
 800fd94:	413921fb 	.word	0x413921fb
 800fd98:	3fe00000 	.word	0x3fe00000
 800fd9c:	0801a24c 	.word	0x0801a24c
 800fda0:	7fefffff 	.word	0x7fefffff
 800fda4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800fda8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800fdac:	ee10 0a10 	vmov	r0, s0
 800fdb0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800fdb4:	ee10 6a10 	vmov	r6, s0
 800fdb8:	460f      	mov	r7, r1
 800fdba:	f7f0 fed5 	bl	8000b68 <__aeabi_d2iz>
 800fdbe:	f7f0 fbb9 	bl	8000534 <__aeabi_i2d>
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	460b      	mov	r3, r1
 800fdc6:	4630      	mov	r0, r6
 800fdc8:	4639      	mov	r1, r7
 800fdca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fdce:	f7f0 fa63 	bl	8000298 <__aeabi_dsub>
 800fdd2:	4b22      	ldr	r3, [pc, #136]	; (800fe5c <__ieee754_rem_pio2+0x40c>)
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	f7f0 fc17 	bl	8000608 <__aeabi_dmul>
 800fdda:	460f      	mov	r7, r1
 800fddc:	4606      	mov	r6, r0
 800fdde:	f7f0 fec3 	bl	8000b68 <__aeabi_d2iz>
 800fde2:	f7f0 fba7 	bl	8000534 <__aeabi_i2d>
 800fde6:	4602      	mov	r2, r0
 800fde8:	460b      	mov	r3, r1
 800fdea:	4630      	mov	r0, r6
 800fdec:	4639      	mov	r1, r7
 800fdee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fdf2:	f7f0 fa51 	bl	8000298 <__aeabi_dsub>
 800fdf6:	4b19      	ldr	r3, [pc, #100]	; (800fe5c <__ieee754_rem_pio2+0x40c>)
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	f7f0 fc05 	bl	8000608 <__aeabi_dmul>
 800fdfe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fe02:	ad04      	add	r5, sp, #16
 800fe04:	f04f 0803 	mov.w	r8, #3
 800fe08:	46a9      	mov	r9, r5
 800fe0a:	2600      	movs	r6, #0
 800fe0c:	2700      	movs	r7, #0
 800fe0e:	4632      	mov	r2, r6
 800fe10:	463b      	mov	r3, r7
 800fe12:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800fe16:	46c3      	mov	fp, r8
 800fe18:	3d08      	subs	r5, #8
 800fe1a:	f108 38ff 	add.w	r8, r8, #4294967295
 800fe1e:	f7f0 fe5b 	bl	8000ad8 <__aeabi_dcmpeq>
 800fe22:	2800      	cmp	r0, #0
 800fe24:	d1f3      	bne.n	800fe0e <__ieee754_rem_pio2+0x3be>
 800fe26:	4b0e      	ldr	r3, [pc, #56]	; (800fe60 <__ieee754_rem_pio2+0x410>)
 800fe28:	9301      	str	r3, [sp, #4]
 800fe2a:	2302      	movs	r3, #2
 800fe2c:	9300      	str	r3, [sp, #0]
 800fe2e:	4622      	mov	r2, r4
 800fe30:	465b      	mov	r3, fp
 800fe32:	4651      	mov	r1, sl
 800fe34:	4648      	mov	r0, r9
 800fe36:	f000 fba3 	bl	8010580 <__kernel_rem_pio2>
 800fe3a:	9b02      	ldr	r3, [sp, #8]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	4683      	mov	fp, r0
 800fe40:	f6bf ae46 	bge.w	800fad0 <__ieee754_rem_pio2+0x80>
 800fe44:	f8da 3004 	ldr.w	r3, [sl, #4]
 800fe48:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fe4c:	f8ca 3004 	str.w	r3, [sl, #4]
 800fe50:	f8da 300c 	ldr.w	r3, [sl, #12]
 800fe54:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fe58:	e73a      	b.n	800fcd0 <__ieee754_rem_pio2+0x280>
 800fe5a:	bf00      	nop
 800fe5c:	41700000 	.word	0x41700000
 800fe60:	0801a2cc 	.word	0x0801a2cc

0800fe64 <__ieee754_powf>:
 800fe64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe68:	ee10 5a90 	vmov	r5, s1
 800fe6c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800fe70:	ed2d 8b02 	vpush	{d8}
 800fe74:	eeb0 8a40 	vmov.f32	s16, s0
 800fe78:	eef0 8a60 	vmov.f32	s17, s1
 800fe7c:	f000 8291 	beq.w	80103a2 <__ieee754_powf+0x53e>
 800fe80:	ee10 8a10 	vmov	r8, s0
 800fe84:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800fe88:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800fe8c:	dc06      	bgt.n	800fe9c <__ieee754_powf+0x38>
 800fe8e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800fe92:	dd0a      	ble.n	800feaa <__ieee754_powf+0x46>
 800fe94:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800fe98:	f000 8283 	beq.w	80103a2 <__ieee754_powf+0x53e>
 800fe9c:	ecbd 8b02 	vpop	{d8}
 800fea0:	48d8      	ldr	r0, [pc, #864]	; (8010204 <__ieee754_powf+0x3a0>)
 800fea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fea6:	f001 b88d 	b.w	8010fc4 <nanf>
 800feaa:	f1b8 0f00 	cmp.w	r8, #0
 800feae:	da1f      	bge.n	800fef0 <__ieee754_powf+0x8c>
 800feb0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800feb4:	da2e      	bge.n	800ff14 <__ieee754_powf+0xb0>
 800feb6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800feba:	f2c0 827b 	blt.w	80103b4 <__ieee754_powf+0x550>
 800febe:	15fb      	asrs	r3, r7, #23
 800fec0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800fec4:	fa47 f603 	asr.w	r6, r7, r3
 800fec8:	fa06 f303 	lsl.w	r3, r6, r3
 800fecc:	42bb      	cmp	r3, r7
 800fece:	f040 8271 	bne.w	80103b4 <__ieee754_powf+0x550>
 800fed2:	f006 0601 	and.w	r6, r6, #1
 800fed6:	f1c6 0602 	rsb	r6, r6, #2
 800feda:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800fede:	d120      	bne.n	800ff22 <__ieee754_powf+0xbe>
 800fee0:	2d00      	cmp	r5, #0
 800fee2:	f280 8264 	bge.w	80103ae <__ieee754_powf+0x54a>
 800fee6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800feea:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800feee:	e00d      	b.n	800ff0c <__ieee754_powf+0xa8>
 800fef0:	2600      	movs	r6, #0
 800fef2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800fef6:	d1f0      	bne.n	800feda <__ieee754_powf+0x76>
 800fef8:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800fefc:	f000 8251 	beq.w	80103a2 <__ieee754_powf+0x53e>
 800ff00:	dd0a      	ble.n	800ff18 <__ieee754_powf+0xb4>
 800ff02:	2d00      	cmp	r5, #0
 800ff04:	f280 8250 	bge.w	80103a8 <__ieee754_powf+0x544>
 800ff08:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8010208 <__ieee754_powf+0x3a4>
 800ff0c:	ecbd 8b02 	vpop	{d8}
 800ff10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff14:	2602      	movs	r6, #2
 800ff16:	e7ec      	b.n	800fef2 <__ieee754_powf+0x8e>
 800ff18:	2d00      	cmp	r5, #0
 800ff1a:	daf5      	bge.n	800ff08 <__ieee754_powf+0xa4>
 800ff1c:	eeb1 0a68 	vneg.f32	s0, s17
 800ff20:	e7f4      	b.n	800ff0c <__ieee754_powf+0xa8>
 800ff22:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800ff26:	d102      	bne.n	800ff2e <__ieee754_powf+0xca>
 800ff28:	ee28 0a08 	vmul.f32	s0, s16, s16
 800ff2c:	e7ee      	b.n	800ff0c <__ieee754_powf+0xa8>
 800ff2e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800ff32:	eeb0 0a48 	vmov.f32	s0, s16
 800ff36:	d108      	bne.n	800ff4a <__ieee754_powf+0xe6>
 800ff38:	f1b8 0f00 	cmp.w	r8, #0
 800ff3c:	db05      	blt.n	800ff4a <__ieee754_powf+0xe6>
 800ff3e:	ecbd 8b02 	vpop	{d8}
 800ff42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff46:	f000 ba4d 	b.w	80103e4 <__ieee754_sqrtf>
 800ff4a:	f001 f827 	bl	8010f9c <fabsf>
 800ff4e:	b124      	cbz	r4, 800ff5a <__ieee754_powf+0xf6>
 800ff50:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800ff54:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800ff58:	d117      	bne.n	800ff8a <__ieee754_powf+0x126>
 800ff5a:	2d00      	cmp	r5, #0
 800ff5c:	bfbc      	itt	lt
 800ff5e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800ff62:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800ff66:	f1b8 0f00 	cmp.w	r8, #0
 800ff6a:	dacf      	bge.n	800ff0c <__ieee754_powf+0xa8>
 800ff6c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800ff70:	ea54 0306 	orrs.w	r3, r4, r6
 800ff74:	d104      	bne.n	800ff80 <__ieee754_powf+0x11c>
 800ff76:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ff7a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ff7e:	e7c5      	b.n	800ff0c <__ieee754_powf+0xa8>
 800ff80:	2e01      	cmp	r6, #1
 800ff82:	d1c3      	bne.n	800ff0c <__ieee754_powf+0xa8>
 800ff84:	eeb1 0a40 	vneg.f32	s0, s0
 800ff88:	e7c0      	b.n	800ff0c <__ieee754_powf+0xa8>
 800ff8a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800ff8e:	3801      	subs	r0, #1
 800ff90:	ea56 0300 	orrs.w	r3, r6, r0
 800ff94:	d104      	bne.n	800ffa0 <__ieee754_powf+0x13c>
 800ff96:	ee38 8a48 	vsub.f32	s16, s16, s16
 800ff9a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800ff9e:	e7b5      	b.n	800ff0c <__ieee754_powf+0xa8>
 800ffa0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800ffa4:	dd6b      	ble.n	801007e <__ieee754_powf+0x21a>
 800ffa6:	4b99      	ldr	r3, [pc, #612]	; (801020c <__ieee754_powf+0x3a8>)
 800ffa8:	429c      	cmp	r4, r3
 800ffaa:	dc06      	bgt.n	800ffba <__ieee754_powf+0x156>
 800ffac:	2d00      	cmp	r5, #0
 800ffae:	daab      	bge.n	800ff08 <__ieee754_powf+0xa4>
 800ffb0:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8010210 <__ieee754_powf+0x3ac>
 800ffb4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ffb8:	e7a8      	b.n	800ff0c <__ieee754_powf+0xa8>
 800ffba:	4b96      	ldr	r3, [pc, #600]	; (8010214 <__ieee754_powf+0x3b0>)
 800ffbc:	429c      	cmp	r4, r3
 800ffbe:	dd02      	ble.n	800ffc6 <__ieee754_powf+0x162>
 800ffc0:	2d00      	cmp	r5, #0
 800ffc2:	dcf5      	bgt.n	800ffb0 <__ieee754_powf+0x14c>
 800ffc4:	e7a0      	b.n	800ff08 <__ieee754_powf+0xa4>
 800ffc6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ffca:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ffce:	eddf 6a92 	vldr	s13, [pc, #584]	; 8010218 <__ieee754_powf+0x3b4>
 800ffd2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800ffd6:	eee0 6a67 	vfms.f32	s13, s0, s15
 800ffda:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ffde:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800ffe2:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ffe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ffea:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 801021c <__ieee754_powf+0x3b8>
 800ffee:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800fff2:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8010220 <__ieee754_powf+0x3bc>
 800fff6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800fffa:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8010224 <__ieee754_powf+0x3c0>
 800fffe:	eef0 6a67 	vmov.f32	s13, s15
 8010002:	eee0 6a07 	vfma.f32	s13, s0, s14
 8010006:	ee16 3a90 	vmov	r3, s13
 801000a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801000e:	f023 030f 	bic.w	r3, r3, #15
 8010012:	ee00 3a90 	vmov	s1, r3
 8010016:	eee0 0a47 	vfms.f32	s1, s0, s14
 801001a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801001e:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8010022:	f025 050f 	bic.w	r5, r5, #15
 8010026:	ee07 5a10 	vmov	s14, r5
 801002a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801002e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8010032:	ee07 3a90 	vmov	s15, r3
 8010036:	eee7 0a27 	vfma.f32	s1, s14, s15
 801003a:	3e01      	subs	r6, #1
 801003c:	ea56 0200 	orrs.w	r2, r6, r0
 8010040:	ee07 5a10 	vmov	s14, r5
 8010044:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010048:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801004c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8010050:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8010054:	ee17 4a10 	vmov	r4, s14
 8010058:	bf08      	it	eq
 801005a:	eeb0 8a40 	vmoveq.f32	s16, s0
 801005e:	2c00      	cmp	r4, #0
 8010060:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010064:	f340 8184 	ble.w	8010370 <__ieee754_powf+0x50c>
 8010068:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801006c:	f340 80fc 	ble.w	8010268 <__ieee754_powf+0x404>
 8010070:	eddf 7a67 	vldr	s15, [pc, #412]	; 8010210 <__ieee754_powf+0x3ac>
 8010074:	ee28 0a27 	vmul.f32	s0, s16, s15
 8010078:	ee20 0a27 	vmul.f32	s0, s0, s15
 801007c:	e746      	b.n	800ff0c <__ieee754_powf+0xa8>
 801007e:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8010082:	bf01      	itttt	eq
 8010084:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8010228 <__ieee754_powf+0x3c4>
 8010088:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801008c:	f06f 0217 	mvneq.w	r2, #23
 8010090:	ee17 4a90 	vmoveq	r4, s15
 8010094:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8010098:	bf18      	it	ne
 801009a:	2200      	movne	r2, #0
 801009c:	3b7f      	subs	r3, #127	; 0x7f
 801009e:	4413      	add	r3, r2
 80100a0:	4a62      	ldr	r2, [pc, #392]	; (801022c <__ieee754_powf+0x3c8>)
 80100a2:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80100a6:	4294      	cmp	r4, r2
 80100a8:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80100ac:	dd06      	ble.n	80100bc <__ieee754_powf+0x258>
 80100ae:	4a60      	ldr	r2, [pc, #384]	; (8010230 <__ieee754_powf+0x3cc>)
 80100b0:	4294      	cmp	r4, r2
 80100b2:	f340 80a4 	ble.w	80101fe <__ieee754_powf+0x39a>
 80100b6:	3301      	adds	r3, #1
 80100b8:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80100bc:	2400      	movs	r4, #0
 80100be:	4a5d      	ldr	r2, [pc, #372]	; (8010234 <__ieee754_powf+0x3d0>)
 80100c0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80100c4:	ee07 1a90 	vmov	s15, r1
 80100c8:	ed92 7a00 	vldr	s14, [r2]
 80100cc:	4a5a      	ldr	r2, [pc, #360]	; (8010238 <__ieee754_powf+0x3d4>)
 80100ce:	ee37 6a27 	vadd.f32	s12, s14, s15
 80100d2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80100d6:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80100da:	1049      	asrs	r1, r1, #1
 80100dc:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80100e0:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80100e4:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 80100e8:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80100ec:	ee06 1a10 	vmov	s12, r1
 80100f0:	ee65 4a26 	vmul.f32	s9, s10, s13
 80100f4:	ee36 7a47 	vsub.f32	s14, s12, s14
 80100f8:	ee14 7a90 	vmov	r7, s9
 80100fc:	4017      	ands	r7, r2
 80100fe:	ee05 7a90 	vmov	s11, r7
 8010102:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8010106:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801010a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 801023c <__ieee754_powf+0x3d8>
 801010e:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8010112:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8010116:	ee25 6a26 	vmul.f32	s12, s10, s13
 801011a:	eddf 6a49 	vldr	s13, [pc, #292]	; 8010240 <__ieee754_powf+0x3dc>
 801011e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010122:	eddf 6a48 	vldr	s13, [pc, #288]	; 8010244 <__ieee754_powf+0x3e0>
 8010126:	eee7 6a27 	vfma.f32	s13, s14, s15
 801012a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8010218 <__ieee754_powf+0x3b4>
 801012e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010132:	eddf 6a45 	vldr	s13, [pc, #276]	; 8010248 <__ieee754_powf+0x3e4>
 8010136:	eee7 6a27 	vfma.f32	s13, s14, s15
 801013a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801024c <__ieee754_powf+0x3e8>
 801013e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010142:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8010146:	ee27 5aa7 	vmul.f32	s10, s15, s15
 801014a:	ee66 6a86 	vmul.f32	s13, s13, s12
 801014e:	eee5 6a07 	vfma.f32	s13, s10, s14
 8010152:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8010156:	eef0 7a45 	vmov.f32	s15, s10
 801015a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801015e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010162:	ee17 1a90 	vmov	r1, s15
 8010166:	4011      	ands	r1, r2
 8010168:	ee07 1a90 	vmov	s15, r1
 801016c:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8010170:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8010174:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8010178:	ee27 7a24 	vmul.f32	s14, s14, s9
 801017c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8010180:	eeb0 6a47 	vmov.f32	s12, s14
 8010184:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8010188:	ee16 1a10 	vmov	r1, s12
 801018c:	4011      	ands	r1, r2
 801018e:	ee06 1a90 	vmov	s13, r1
 8010192:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8010196:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8010250 <__ieee754_powf+0x3ec>
 801019a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8010254 <__ieee754_powf+0x3f0>
 801019e:	ee37 7a66 	vsub.f32	s14, s14, s13
 80101a2:	ee06 1a10 	vmov	s12, r1
 80101a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80101aa:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8010258 <__ieee754_powf+0x3f4>
 80101ae:	492b      	ldr	r1, [pc, #172]	; (801025c <__ieee754_powf+0x3f8>)
 80101b0:	eea6 7a27 	vfma.f32	s14, s12, s15
 80101b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80101b8:	edd1 7a00 	vldr	s15, [r1]
 80101bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80101c0:	ee07 3a90 	vmov	s15, r3
 80101c4:	4b26      	ldr	r3, [pc, #152]	; (8010260 <__ieee754_powf+0x3fc>)
 80101c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80101ca:	eef0 7a47 	vmov.f32	s15, s14
 80101ce:	eee6 7a25 	vfma.f32	s15, s12, s11
 80101d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80101d6:	edd4 0a00 	vldr	s1, [r4]
 80101da:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80101de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101e2:	ee17 3a90 	vmov	r3, s15
 80101e6:	4013      	ands	r3, r2
 80101e8:	ee07 3a90 	vmov	s15, r3
 80101ec:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80101f0:	ee76 6ae0 	vsub.f32	s13, s13, s1
 80101f4:	eee6 6a65 	vfms.f32	s13, s12, s11
 80101f8:	ee77 7a66 	vsub.f32	s15, s14, s13
 80101fc:	e70f      	b.n	801001e <__ieee754_powf+0x1ba>
 80101fe:	2401      	movs	r4, #1
 8010200:	e75d      	b.n	80100be <__ieee754_powf+0x25a>
 8010202:	bf00      	nop
 8010204:	0801a12f 	.word	0x0801a12f
 8010208:	00000000 	.word	0x00000000
 801020c:	3f7ffff7 	.word	0x3f7ffff7
 8010210:	7149f2ca 	.word	0x7149f2ca
 8010214:	3f800007 	.word	0x3f800007
 8010218:	3eaaaaab 	.word	0x3eaaaaab
 801021c:	3fb8aa3b 	.word	0x3fb8aa3b
 8010220:	36eca570 	.word	0x36eca570
 8010224:	3fb8aa00 	.word	0x3fb8aa00
 8010228:	4b800000 	.word	0x4b800000
 801022c:	001cc471 	.word	0x001cc471
 8010230:	005db3d6 	.word	0x005db3d6
 8010234:	0801a3d4 	.word	0x0801a3d4
 8010238:	fffff000 	.word	0xfffff000
 801023c:	3e6c3255 	.word	0x3e6c3255
 8010240:	3e53f142 	.word	0x3e53f142
 8010244:	3e8ba305 	.word	0x3e8ba305
 8010248:	3edb6db7 	.word	0x3edb6db7
 801024c:	3f19999a 	.word	0x3f19999a
 8010250:	3f76384f 	.word	0x3f76384f
 8010254:	3f763800 	.word	0x3f763800
 8010258:	369dc3a0 	.word	0x369dc3a0
 801025c:	0801a3e4 	.word	0x0801a3e4
 8010260:	0801a3dc 	.word	0x0801a3dc
 8010264:	3338aa3c 	.word	0x3338aa3c
 8010268:	f040 8092 	bne.w	8010390 <__ieee754_powf+0x52c>
 801026c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8010264 <__ieee754_powf+0x400>
 8010270:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010274:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8010278:	eef4 6ac7 	vcmpe.f32	s13, s14
 801027c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010280:	f73f aef6 	bgt.w	8010070 <__ieee754_powf+0x20c>
 8010284:	15db      	asrs	r3, r3, #23
 8010286:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801028a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801028e:	4103      	asrs	r3, r0
 8010290:	4423      	add	r3, r4
 8010292:	4949      	ldr	r1, [pc, #292]	; (80103b8 <__ieee754_powf+0x554>)
 8010294:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010298:	3a7f      	subs	r2, #127	; 0x7f
 801029a:	4111      	asrs	r1, r2
 801029c:	ea23 0101 	bic.w	r1, r3, r1
 80102a0:	ee07 1a10 	vmov	s14, r1
 80102a4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80102a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80102ac:	f1c2 0217 	rsb	r2, r2, #23
 80102b0:	4110      	asrs	r0, r2
 80102b2:	2c00      	cmp	r4, #0
 80102b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80102b8:	bfb8      	it	lt
 80102ba:	4240      	neglt	r0, r0
 80102bc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80102c0:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80103bc <__ieee754_powf+0x558>
 80102c4:	ee17 3a10 	vmov	r3, s14
 80102c8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80102cc:	f023 030f 	bic.w	r3, r3, #15
 80102d0:	ee07 3a10 	vmov	s14, r3
 80102d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80102d8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80102dc:	eddf 7a38 	vldr	s15, [pc, #224]	; 80103c0 <__ieee754_powf+0x55c>
 80102e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80102e4:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80102e8:	eddf 6a36 	vldr	s13, [pc, #216]	; 80103c4 <__ieee754_powf+0x560>
 80102ec:	eeb0 0a67 	vmov.f32	s0, s15
 80102f0:	eea7 0a26 	vfma.f32	s0, s14, s13
 80102f4:	eeb0 6a40 	vmov.f32	s12, s0
 80102f8:	eea7 6a66 	vfms.f32	s12, s14, s13
 80102fc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010300:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010304:	eddf 6a30 	vldr	s13, [pc, #192]	; 80103c8 <__ieee754_powf+0x564>
 8010308:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80103cc <__ieee754_powf+0x568>
 801030c:	eea7 6a26 	vfma.f32	s12, s14, s13
 8010310:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80103d0 <__ieee754_powf+0x56c>
 8010314:	eee6 6a07 	vfma.f32	s13, s12, s14
 8010318:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 80103d4 <__ieee754_powf+0x570>
 801031c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8010320:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80103d8 <__ieee754_powf+0x574>
 8010324:	eee6 6a07 	vfma.f32	s13, s12, s14
 8010328:	eeb0 6a40 	vmov.f32	s12, s0
 801032c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8010330:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8010334:	eeb0 7a46 	vmov.f32	s14, s12
 8010338:	ee77 6a66 	vsub.f32	s13, s14, s13
 801033c:	ee20 6a06 	vmul.f32	s12, s0, s12
 8010340:	eee0 7a27 	vfma.f32	s15, s0, s15
 8010344:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8010348:	ee77 7a67 	vsub.f32	s15, s14, s15
 801034c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010350:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010354:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010358:	ee10 3a10 	vmov	r3, s0
 801035c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8010360:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010364:	da1a      	bge.n	801039c <__ieee754_powf+0x538>
 8010366:	f000 fe8f 	bl	8011088 <scalbnf>
 801036a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801036e:	e5cd      	b.n	800ff0c <__ieee754_powf+0xa8>
 8010370:	4a1a      	ldr	r2, [pc, #104]	; (80103dc <__ieee754_powf+0x578>)
 8010372:	4293      	cmp	r3, r2
 8010374:	dd02      	ble.n	801037c <__ieee754_powf+0x518>
 8010376:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80103e0 <__ieee754_powf+0x57c>
 801037a:	e67b      	b.n	8010074 <__ieee754_powf+0x210>
 801037c:	d108      	bne.n	8010390 <__ieee754_powf+0x52c>
 801037e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010382:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8010386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801038a:	f6ff af7b 	blt.w	8010284 <__ieee754_powf+0x420>
 801038e:	e7f2      	b.n	8010376 <__ieee754_powf+0x512>
 8010390:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8010394:	f73f af76 	bgt.w	8010284 <__ieee754_powf+0x420>
 8010398:	2000      	movs	r0, #0
 801039a:	e78f      	b.n	80102bc <__ieee754_powf+0x458>
 801039c:	ee00 3a10 	vmov	s0, r3
 80103a0:	e7e3      	b.n	801036a <__ieee754_powf+0x506>
 80103a2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80103a6:	e5b1      	b.n	800ff0c <__ieee754_powf+0xa8>
 80103a8:	eeb0 0a68 	vmov.f32	s0, s17
 80103ac:	e5ae      	b.n	800ff0c <__ieee754_powf+0xa8>
 80103ae:	eeb0 0a48 	vmov.f32	s0, s16
 80103b2:	e5ab      	b.n	800ff0c <__ieee754_powf+0xa8>
 80103b4:	2600      	movs	r6, #0
 80103b6:	e590      	b.n	800feda <__ieee754_powf+0x76>
 80103b8:	007fffff 	.word	0x007fffff
 80103bc:	3f317218 	.word	0x3f317218
 80103c0:	35bfbe8c 	.word	0x35bfbe8c
 80103c4:	3f317200 	.word	0x3f317200
 80103c8:	3331bb4c 	.word	0x3331bb4c
 80103cc:	b5ddea0e 	.word	0xb5ddea0e
 80103d0:	388ab355 	.word	0x388ab355
 80103d4:	bb360b61 	.word	0xbb360b61
 80103d8:	3e2aaaab 	.word	0x3e2aaaab
 80103dc:	43160000 	.word	0x43160000
 80103e0:	0da24260 	.word	0x0da24260

080103e4 <__ieee754_sqrtf>:
 80103e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80103e8:	4770      	bx	lr
 80103ea:	0000      	movs	r0, r0
 80103ec:	0000      	movs	r0, r0
	...

080103f0 <__kernel_cos>:
 80103f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103f4:	ec57 6b10 	vmov	r6, r7, d0
 80103f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80103fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010400:	ed8d 1b00 	vstr	d1, [sp]
 8010404:	da07      	bge.n	8010416 <__kernel_cos+0x26>
 8010406:	ee10 0a10 	vmov	r0, s0
 801040a:	4639      	mov	r1, r7
 801040c:	f7f0 fbac 	bl	8000b68 <__aeabi_d2iz>
 8010410:	2800      	cmp	r0, #0
 8010412:	f000 8088 	beq.w	8010526 <__kernel_cos+0x136>
 8010416:	4632      	mov	r2, r6
 8010418:	463b      	mov	r3, r7
 801041a:	4630      	mov	r0, r6
 801041c:	4639      	mov	r1, r7
 801041e:	f7f0 f8f3 	bl	8000608 <__aeabi_dmul>
 8010422:	4b51      	ldr	r3, [pc, #324]	; (8010568 <__kernel_cos+0x178>)
 8010424:	2200      	movs	r2, #0
 8010426:	4604      	mov	r4, r0
 8010428:	460d      	mov	r5, r1
 801042a:	f7f0 f8ed 	bl	8000608 <__aeabi_dmul>
 801042e:	a340      	add	r3, pc, #256	; (adr r3, 8010530 <__kernel_cos+0x140>)
 8010430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010434:	4682      	mov	sl, r0
 8010436:	468b      	mov	fp, r1
 8010438:	4620      	mov	r0, r4
 801043a:	4629      	mov	r1, r5
 801043c:	f7f0 f8e4 	bl	8000608 <__aeabi_dmul>
 8010440:	a33d      	add	r3, pc, #244	; (adr r3, 8010538 <__kernel_cos+0x148>)
 8010442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010446:	f7ef ff29 	bl	800029c <__adddf3>
 801044a:	4622      	mov	r2, r4
 801044c:	462b      	mov	r3, r5
 801044e:	f7f0 f8db 	bl	8000608 <__aeabi_dmul>
 8010452:	a33b      	add	r3, pc, #236	; (adr r3, 8010540 <__kernel_cos+0x150>)
 8010454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010458:	f7ef ff1e 	bl	8000298 <__aeabi_dsub>
 801045c:	4622      	mov	r2, r4
 801045e:	462b      	mov	r3, r5
 8010460:	f7f0 f8d2 	bl	8000608 <__aeabi_dmul>
 8010464:	a338      	add	r3, pc, #224	; (adr r3, 8010548 <__kernel_cos+0x158>)
 8010466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801046a:	f7ef ff17 	bl	800029c <__adddf3>
 801046e:	4622      	mov	r2, r4
 8010470:	462b      	mov	r3, r5
 8010472:	f7f0 f8c9 	bl	8000608 <__aeabi_dmul>
 8010476:	a336      	add	r3, pc, #216	; (adr r3, 8010550 <__kernel_cos+0x160>)
 8010478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801047c:	f7ef ff0c 	bl	8000298 <__aeabi_dsub>
 8010480:	4622      	mov	r2, r4
 8010482:	462b      	mov	r3, r5
 8010484:	f7f0 f8c0 	bl	8000608 <__aeabi_dmul>
 8010488:	a333      	add	r3, pc, #204	; (adr r3, 8010558 <__kernel_cos+0x168>)
 801048a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801048e:	f7ef ff05 	bl	800029c <__adddf3>
 8010492:	4622      	mov	r2, r4
 8010494:	462b      	mov	r3, r5
 8010496:	f7f0 f8b7 	bl	8000608 <__aeabi_dmul>
 801049a:	4622      	mov	r2, r4
 801049c:	462b      	mov	r3, r5
 801049e:	f7f0 f8b3 	bl	8000608 <__aeabi_dmul>
 80104a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104a6:	4604      	mov	r4, r0
 80104a8:	460d      	mov	r5, r1
 80104aa:	4630      	mov	r0, r6
 80104ac:	4639      	mov	r1, r7
 80104ae:	f7f0 f8ab 	bl	8000608 <__aeabi_dmul>
 80104b2:	460b      	mov	r3, r1
 80104b4:	4602      	mov	r2, r0
 80104b6:	4629      	mov	r1, r5
 80104b8:	4620      	mov	r0, r4
 80104ba:	f7ef feed 	bl	8000298 <__aeabi_dsub>
 80104be:	4b2b      	ldr	r3, [pc, #172]	; (801056c <__kernel_cos+0x17c>)
 80104c0:	4598      	cmp	r8, r3
 80104c2:	4606      	mov	r6, r0
 80104c4:	460f      	mov	r7, r1
 80104c6:	dc10      	bgt.n	80104ea <__kernel_cos+0xfa>
 80104c8:	4602      	mov	r2, r0
 80104ca:	460b      	mov	r3, r1
 80104cc:	4650      	mov	r0, sl
 80104ce:	4659      	mov	r1, fp
 80104d0:	f7ef fee2 	bl	8000298 <__aeabi_dsub>
 80104d4:	460b      	mov	r3, r1
 80104d6:	4926      	ldr	r1, [pc, #152]	; (8010570 <__kernel_cos+0x180>)
 80104d8:	4602      	mov	r2, r0
 80104da:	2000      	movs	r0, #0
 80104dc:	f7ef fedc 	bl	8000298 <__aeabi_dsub>
 80104e0:	ec41 0b10 	vmov	d0, r0, r1
 80104e4:	b003      	add	sp, #12
 80104e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ea:	4b22      	ldr	r3, [pc, #136]	; (8010574 <__kernel_cos+0x184>)
 80104ec:	4920      	ldr	r1, [pc, #128]	; (8010570 <__kernel_cos+0x180>)
 80104ee:	4598      	cmp	r8, r3
 80104f0:	bfcc      	ite	gt
 80104f2:	4d21      	ldrgt	r5, [pc, #132]	; (8010578 <__kernel_cos+0x188>)
 80104f4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80104f8:	2400      	movs	r4, #0
 80104fa:	4622      	mov	r2, r4
 80104fc:	462b      	mov	r3, r5
 80104fe:	2000      	movs	r0, #0
 8010500:	f7ef feca 	bl	8000298 <__aeabi_dsub>
 8010504:	4622      	mov	r2, r4
 8010506:	4680      	mov	r8, r0
 8010508:	4689      	mov	r9, r1
 801050a:	462b      	mov	r3, r5
 801050c:	4650      	mov	r0, sl
 801050e:	4659      	mov	r1, fp
 8010510:	f7ef fec2 	bl	8000298 <__aeabi_dsub>
 8010514:	4632      	mov	r2, r6
 8010516:	463b      	mov	r3, r7
 8010518:	f7ef febe 	bl	8000298 <__aeabi_dsub>
 801051c:	4602      	mov	r2, r0
 801051e:	460b      	mov	r3, r1
 8010520:	4640      	mov	r0, r8
 8010522:	4649      	mov	r1, r9
 8010524:	e7da      	b.n	80104dc <__kernel_cos+0xec>
 8010526:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8010560 <__kernel_cos+0x170>
 801052a:	e7db      	b.n	80104e4 <__kernel_cos+0xf4>
 801052c:	f3af 8000 	nop.w
 8010530:	be8838d4 	.word	0xbe8838d4
 8010534:	bda8fae9 	.word	0xbda8fae9
 8010538:	bdb4b1c4 	.word	0xbdb4b1c4
 801053c:	3e21ee9e 	.word	0x3e21ee9e
 8010540:	809c52ad 	.word	0x809c52ad
 8010544:	3e927e4f 	.word	0x3e927e4f
 8010548:	19cb1590 	.word	0x19cb1590
 801054c:	3efa01a0 	.word	0x3efa01a0
 8010550:	16c15177 	.word	0x16c15177
 8010554:	3f56c16c 	.word	0x3f56c16c
 8010558:	5555554c 	.word	0x5555554c
 801055c:	3fa55555 	.word	0x3fa55555
 8010560:	00000000 	.word	0x00000000
 8010564:	3ff00000 	.word	0x3ff00000
 8010568:	3fe00000 	.word	0x3fe00000
 801056c:	3fd33332 	.word	0x3fd33332
 8010570:	3ff00000 	.word	0x3ff00000
 8010574:	3fe90000 	.word	0x3fe90000
 8010578:	3fd20000 	.word	0x3fd20000
 801057c:	00000000 	.word	0x00000000

08010580 <__kernel_rem_pio2>:
 8010580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010584:	ed2d 8b02 	vpush	{d8}
 8010588:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801058c:	f112 0f14 	cmn.w	r2, #20
 8010590:	9308      	str	r3, [sp, #32]
 8010592:	9101      	str	r1, [sp, #4]
 8010594:	4bc6      	ldr	r3, [pc, #792]	; (80108b0 <__kernel_rem_pio2+0x330>)
 8010596:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8010598:	9009      	str	r0, [sp, #36]	; 0x24
 801059a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801059e:	9304      	str	r3, [sp, #16]
 80105a0:	9b08      	ldr	r3, [sp, #32]
 80105a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80105a6:	bfa8      	it	ge
 80105a8:	1ed4      	subge	r4, r2, #3
 80105aa:	9306      	str	r3, [sp, #24]
 80105ac:	bfb2      	itee	lt
 80105ae:	2400      	movlt	r4, #0
 80105b0:	2318      	movge	r3, #24
 80105b2:	fb94 f4f3 	sdivge	r4, r4, r3
 80105b6:	f06f 0317 	mvn.w	r3, #23
 80105ba:	fb04 3303 	mla	r3, r4, r3, r3
 80105be:	eb03 0a02 	add.w	sl, r3, r2
 80105c2:	9b04      	ldr	r3, [sp, #16]
 80105c4:	9a06      	ldr	r2, [sp, #24]
 80105c6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80108a0 <__kernel_rem_pio2+0x320>
 80105ca:	eb03 0802 	add.w	r8, r3, r2
 80105ce:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80105d0:	1aa7      	subs	r7, r4, r2
 80105d2:	ae20      	add	r6, sp, #128	; 0x80
 80105d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80105d8:	2500      	movs	r5, #0
 80105da:	4545      	cmp	r5, r8
 80105dc:	dd18      	ble.n	8010610 <__kernel_rem_pio2+0x90>
 80105de:	9b08      	ldr	r3, [sp, #32]
 80105e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80105e4:	aa20      	add	r2, sp, #128	; 0x80
 80105e6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80108a0 <__kernel_rem_pio2+0x320>
 80105ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80105ee:	f1c3 0301 	rsb	r3, r3, #1
 80105f2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80105f6:	9307      	str	r3, [sp, #28]
 80105f8:	9b07      	ldr	r3, [sp, #28]
 80105fa:	9a04      	ldr	r2, [sp, #16]
 80105fc:	4443      	add	r3, r8
 80105fe:	429a      	cmp	r2, r3
 8010600:	db2f      	blt.n	8010662 <__kernel_rem_pio2+0xe2>
 8010602:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010606:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801060a:	462f      	mov	r7, r5
 801060c:	2600      	movs	r6, #0
 801060e:	e01b      	b.n	8010648 <__kernel_rem_pio2+0xc8>
 8010610:	42ef      	cmn	r7, r5
 8010612:	d407      	bmi.n	8010624 <__kernel_rem_pio2+0xa4>
 8010614:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010618:	f7ef ff8c 	bl	8000534 <__aeabi_i2d>
 801061c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010620:	3501      	adds	r5, #1
 8010622:	e7da      	b.n	80105da <__kernel_rem_pio2+0x5a>
 8010624:	ec51 0b18 	vmov	r0, r1, d8
 8010628:	e7f8      	b.n	801061c <__kernel_rem_pio2+0x9c>
 801062a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801062e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010632:	f7ef ffe9 	bl	8000608 <__aeabi_dmul>
 8010636:	4602      	mov	r2, r0
 8010638:	460b      	mov	r3, r1
 801063a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801063e:	f7ef fe2d 	bl	800029c <__adddf3>
 8010642:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010646:	3601      	adds	r6, #1
 8010648:	9b06      	ldr	r3, [sp, #24]
 801064a:	429e      	cmp	r6, r3
 801064c:	f1a7 0708 	sub.w	r7, r7, #8
 8010650:	ddeb      	ble.n	801062a <__kernel_rem_pio2+0xaa>
 8010652:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010656:	3508      	adds	r5, #8
 8010658:	ecab 7b02 	vstmia	fp!, {d7}
 801065c:	f108 0801 	add.w	r8, r8, #1
 8010660:	e7ca      	b.n	80105f8 <__kernel_rem_pio2+0x78>
 8010662:	9b04      	ldr	r3, [sp, #16]
 8010664:	aa0c      	add	r2, sp, #48	; 0x30
 8010666:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801066a:	930b      	str	r3, [sp, #44]	; 0x2c
 801066c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801066e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010672:	9c04      	ldr	r4, [sp, #16]
 8010674:	930a      	str	r3, [sp, #40]	; 0x28
 8010676:	ab98      	add	r3, sp, #608	; 0x260
 8010678:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801067c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8010680:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8010684:	f8cd b008 	str.w	fp, [sp, #8]
 8010688:	4625      	mov	r5, r4
 801068a:	2d00      	cmp	r5, #0
 801068c:	dc78      	bgt.n	8010780 <__kernel_rem_pio2+0x200>
 801068e:	ec47 6b10 	vmov	d0, r6, r7
 8010692:	4650      	mov	r0, sl
 8010694:	f000 fbfc 	bl	8010e90 <scalbn>
 8010698:	ec57 6b10 	vmov	r6, r7, d0
 801069c:	2200      	movs	r2, #0
 801069e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80106a2:	ee10 0a10 	vmov	r0, s0
 80106a6:	4639      	mov	r1, r7
 80106a8:	f7ef ffae 	bl	8000608 <__aeabi_dmul>
 80106ac:	ec41 0b10 	vmov	d0, r0, r1
 80106b0:	f000 fb6e 	bl	8010d90 <floor>
 80106b4:	4b7f      	ldr	r3, [pc, #508]	; (80108b4 <__kernel_rem_pio2+0x334>)
 80106b6:	ec51 0b10 	vmov	r0, r1, d0
 80106ba:	2200      	movs	r2, #0
 80106bc:	f7ef ffa4 	bl	8000608 <__aeabi_dmul>
 80106c0:	4602      	mov	r2, r0
 80106c2:	460b      	mov	r3, r1
 80106c4:	4630      	mov	r0, r6
 80106c6:	4639      	mov	r1, r7
 80106c8:	f7ef fde6 	bl	8000298 <__aeabi_dsub>
 80106cc:	460f      	mov	r7, r1
 80106ce:	4606      	mov	r6, r0
 80106d0:	f7f0 fa4a 	bl	8000b68 <__aeabi_d2iz>
 80106d4:	9007      	str	r0, [sp, #28]
 80106d6:	f7ef ff2d 	bl	8000534 <__aeabi_i2d>
 80106da:	4602      	mov	r2, r0
 80106dc:	460b      	mov	r3, r1
 80106de:	4630      	mov	r0, r6
 80106e0:	4639      	mov	r1, r7
 80106e2:	f7ef fdd9 	bl	8000298 <__aeabi_dsub>
 80106e6:	f1ba 0f00 	cmp.w	sl, #0
 80106ea:	4606      	mov	r6, r0
 80106ec:	460f      	mov	r7, r1
 80106ee:	dd70      	ble.n	80107d2 <__kernel_rem_pio2+0x252>
 80106f0:	1e62      	subs	r2, r4, #1
 80106f2:	ab0c      	add	r3, sp, #48	; 0x30
 80106f4:	9d07      	ldr	r5, [sp, #28]
 80106f6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80106fa:	f1ca 0118 	rsb	r1, sl, #24
 80106fe:	fa40 f301 	asr.w	r3, r0, r1
 8010702:	441d      	add	r5, r3
 8010704:	408b      	lsls	r3, r1
 8010706:	1ac0      	subs	r0, r0, r3
 8010708:	ab0c      	add	r3, sp, #48	; 0x30
 801070a:	9507      	str	r5, [sp, #28]
 801070c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8010710:	f1ca 0317 	rsb	r3, sl, #23
 8010714:	fa40 f303 	asr.w	r3, r0, r3
 8010718:	9302      	str	r3, [sp, #8]
 801071a:	9b02      	ldr	r3, [sp, #8]
 801071c:	2b00      	cmp	r3, #0
 801071e:	dd66      	ble.n	80107ee <__kernel_rem_pio2+0x26e>
 8010720:	9b07      	ldr	r3, [sp, #28]
 8010722:	2200      	movs	r2, #0
 8010724:	3301      	adds	r3, #1
 8010726:	9307      	str	r3, [sp, #28]
 8010728:	4615      	mov	r5, r2
 801072a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801072e:	4294      	cmp	r4, r2
 8010730:	f300 8099 	bgt.w	8010866 <__kernel_rem_pio2+0x2e6>
 8010734:	f1ba 0f00 	cmp.w	sl, #0
 8010738:	dd07      	ble.n	801074a <__kernel_rem_pio2+0x1ca>
 801073a:	f1ba 0f01 	cmp.w	sl, #1
 801073e:	f000 80a5 	beq.w	801088c <__kernel_rem_pio2+0x30c>
 8010742:	f1ba 0f02 	cmp.w	sl, #2
 8010746:	f000 80c1 	beq.w	80108cc <__kernel_rem_pio2+0x34c>
 801074a:	9b02      	ldr	r3, [sp, #8]
 801074c:	2b02      	cmp	r3, #2
 801074e:	d14e      	bne.n	80107ee <__kernel_rem_pio2+0x26e>
 8010750:	4632      	mov	r2, r6
 8010752:	463b      	mov	r3, r7
 8010754:	4958      	ldr	r1, [pc, #352]	; (80108b8 <__kernel_rem_pio2+0x338>)
 8010756:	2000      	movs	r0, #0
 8010758:	f7ef fd9e 	bl	8000298 <__aeabi_dsub>
 801075c:	4606      	mov	r6, r0
 801075e:	460f      	mov	r7, r1
 8010760:	2d00      	cmp	r5, #0
 8010762:	d044      	beq.n	80107ee <__kernel_rem_pio2+0x26e>
 8010764:	4650      	mov	r0, sl
 8010766:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80108a8 <__kernel_rem_pio2+0x328>
 801076a:	f000 fb91 	bl	8010e90 <scalbn>
 801076e:	4630      	mov	r0, r6
 8010770:	4639      	mov	r1, r7
 8010772:	ec53 2b10 	vmov	r2, r3, d0
 8010776:	f7ef fd8f 	bl	8000298 <__aeabi_dsub>
 801077a:	4606      	mov	r6, r0
 801077c:	460f      	mov	r7, r1
 801077e:	e036      	b.n	80107ee <__kernel_rem_pio2+0x26e>
 8010780:	4b4e      	ldr	r3, [pc, #312]	; (80108bc <__kernel_rem_pio2+0x33c>)
 8010782:	2200      	movs	r2, #0
 8010784:	4630      	mov	r0, r6
 8010786:	4639      	mov	r1, r7
 8010788:	f7ef ff3e 	bl	8000608 <__aeabi_dmul>
 801078c:	f7f0 f9ec 	bl	8000b68 <__aeabi_d2iz>
 8010790:	f7ef fed0 	bl	8000534 <__aeabi_i2d>
 8010794:	4b4a      	ldr	r3, [pc, #296]	; (80108c0 <__kernel_rem_pio2+0x340>)
 8010796:	2200      	movs	r2, #0
 8010798:	4680      	mov	r8, r0
 801079a:	4689      	mov	r9, r1
 801079c:	f7ef ff34 	bl	8000608 <__aeabi_dmul>
 80107a0:	4602      	mov	r2, r0
 80107a2:	460b      	mov	r3, r1
 80107a4:	4630      	mov	r0, r6
 80107a6:	4639      	mov	r1, r7
 80107a8:	f7ef fd76 	bl	8000298 <__aeabi_dsub>
 80107ac:	f7f0 f9dc 	bl	8000b68 <__aeabi_d2iz>
 80107b0:	9b02      	ldr	r3, [sp, #8]
 80107b2:	f843 0b04 	str.w	r0, [r3], #4
 80107b6:	3d01      	subs	r5, #1
 80107b8:	9302      	str	r3, [sp, #8]
 80107ba:	ab70      	add	r3, sp, #448	; 0x1c0
 80107bc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80107c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c4:	4640      	mov	r0, r8
 80107c6:	4649      	mov	r1, r9
 80107c8:	f7ef fd68 	bl	800029c <__adddf3>
 80107cc:	4606      	mov	r6, r0
 80107ce:	460f      	mov	r7, r1
 80107d0:	e75b      	b.n	801068a <__kernel_rem_pio2+0x10a>
 80107d2:	d105      	bne.n	80107e0 <__kernel_rem_pio2+0x260>
 80107d4:	1e63      	subs	r3, r4, #1
 80107d6:	aa0c      	add	r2, sp, #48	; 0x30
 80107d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80107dc:	15c3      	asrs	r3, r0, #23
 80107de:	e79b      	b.n	8010718 <__kernel_rem_pio2+0x198>
 80107e0:	4b38      	ldr	r3, [pc, #224]	; (80108c4 <__kernel_rem_pio2+0x344>)
 80107e2:	2200      	movs	r2, #0
 80107e4:	f7f0 f996 	bl	8000b14 <__aeabi_dcmpge>
 80107e8:	2800      	cmp	r0, #0
 80107ea:	d139      	bne.n	8010860 <__kernel_rem_pio2+0x2e0>
 80107ec:	9002      	str	r0, [sp, #8]
 80107ee:	2200      	movs	r2, #0
 80107f0:	2300      	movs	r3, #0
 80107f2:	4630      	mov	r0, r6
 80107f4:	4639      	mov	r1, r7
 80107f6:	f7f0 f96f 	bl	8000ad8 <__aeabi_dcmpeq>
 80107fa:	2800      	cmp	r0, #0
 80107fc:	f000 80b4 	beq.w	8010968 <__kernel_rem_pio2+0x3e8>
 8010800:	f104 3bff 	add.w	fp, r4, #4294967295
 8010804:	465b      	mov	r3, fp
 8010806:	2200      	movs	r2, #0
 8010808:	9904      	ldr	r1, [sp, #16]
 801080a:	428b      	cmp	r3, r1
 801080c:	da65      	bge.n	80108da <__kernel_rem_pio2+0x35a>
 801080e:	2a00      	cmp	r2, #0
 8010810:	d07b      	beq.n	801090a <__kernel_rem_pio2+0x38a>
 8010812:	ab0c      	add	r3, sp, #48	; 0x30
 8010814:	f1aa 0a18 	sub.w	sl, sl, #24
 8010818:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801081c:	2b00      	cmp	r3, #0
 801081e:	f000 80a0 	beq.w	8010962 <__kernel_rem_pio2+0x3e2>
 8010822:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80108a8 <__kernel_rem_pio2+0x328>
 8010826:	4650      	mov	r0, sl
 8010828:	f000 fb32 	bl	8010e90 <scalbn>
 801082c:	4f23      	ldr	r7, [pc, #140]	; (80108bc <__kernel_rem_pio2+0x33c>)
 801082e:	ec55 4b10 	vmov	r4, r5, d0
 8010832:	46d8      	mov	r8, fp
 8010834:	2600      	movs	r6, #0
 8010836:	f1b8 0f00 	cmp.w	r8, #0
 801083a:	f280 80cf 	bge.w	80109dc <__kernel_rem_pio2+0x45c>
 801083e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80108a0 <__kernel_rem_pio2+0x320>
 8010842:	465f      	mov	r7, fp
 8010844:	f04f 0800 	mov.w	r8, #0
 8010848:	2f00      	cmp	r7, #0
 801084a:	f2c0 80fd 	blt.w	8010a48 <__kernel_rem_pio2+0x4c8>
 801084e:	ab70      	add	r3, sp, #448	; 0x1c0
 8010850:	f8df a074 	ldr.w	sl, [pc, #116]	; 80108c8 <__kernel_rem_pio2+0x348>
 8010854:	ec55 4b18 	vmov	r4, r5, d8
 8010858:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801085c:	2600      	movs	r6, #0
 801085e:	e0e5      	b.n	8010a2c <__kernel_rem_pio2+0x4ac>
 8010860:	2302      	movs	r3, #2
 8010862:	9302      	str	r3, [sp, #8]
 8010864:	e75c      	b.n	8010720 <__kernel_rem_pio2+0x1a0>
 8010866:	f8db 3000 	ldr.w	r3, [fp]
 801086a:	b955      	cbnz	r5, 8010882 <__kernel_rem_pio2+0x302>
 801086c:	b123      	cbz	r3, 8010878 <__kernel_rem_pio2+0x2f8>
 801086e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010872:	f8cb 3000 	str.w	r3, [fp]
 8010876:	2301      	movs	r3, #1
 8010878:	3201      	adds	r2, #1
 801087a:	f10b 0b04 	add.w	fp, fp, #4
 801087e:	461d      	mov	r5, r3
 8010880:	e755      	b.n	801072e <__kernel_rem_pio2+0x1ae>
 8010882:	1acb      	subs	r3, r1, r3
 8010884:	f8cb 3000 	str.w	r3, [fp]
 8010888:	462b      	mov	r3, r5
 801088a:	e7f5      	b.n	8010878 <__kernel_rem_pio2+0x2f8>
 801088c:	1e62      	subs	r2, r4, #1
 801088e:	ab0c      	add	r3, sp, #48	; 0x30
 8010890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010894:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010898:	a90c      	add	r1, sp, #48	; 0x30
 801089a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801089e:	e754      	b.n	801074a <__kernel_rem_pio2+0x1ca>
	...
 80108ac:	3ff00000 	.word	0x3ff00000
 80108b0:	0801a430 	.word	0x0801a430
 80108b4:	40200000 	.word	0x40200000
 80108b8:	3ff00000 	.word	0x3ff00000
 80108bc:	3e700000 	.word	0x3e700000
 80108c0:	41700000 	.word	0x41700000
 80108c4:	3fe00000 	.word	0x3fe00000
 80108c8:	0801a3f0 	.word	0x0801a3f0
 80108cc:	1e62      	subs	r2, r4, #1
 80108ce:	ab0c      	add	r3, sp, #48	; 0x30
 80108d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108d4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80108d8:	e7de      	b.n	8010898 <__kernel_rem_pio2+0x318>
 80108da:	a90c      	add	r1, sp, #48	; 0x30
 80108dc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80108e0:	3b01      	subs	r3, #1
 80108e2:	430a      	orrs	r2, r1
 80108e4:	e790      	b.n	8010808 <__kernel_rem_pio2+0x288>
 80108e6:	3301      	adds	r3, #1
 80108e8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80108ec:	2900      	cmp	r1, #0
 80108ee:	d0fa      	beq.n	80108e6 <__kernel_rem_pio2+0x366>
 80108f0:	9a08      	ldr	r2, [sp, #32]
 80108f2:	18e3      	adds	r3, r4, r3
 80108f4:	18a6      	adds	r6, r4, r2
 80108f6:	aa20      	add	r2, sp, #128	; 0x80
 80108f8:	1c65      	adds	r5, r4, #1
 80108fa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80108fe:	9302      	str	r3, [sp, #8]
 8010900:	9b02      	ldr	r3, [sp, #8]
 8010902:	42ab      	cmp	r3, r5
 8010904:	da04      	bge.n	8010910 <__kernel_rem_pio2+0x390>
 8010906:	461c      	mov	r4, r3
 8010908:	e6b5      	b.n	8010676 <__kernel_rem_pio2+0xf6>
 801090a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801090c:	2301      	movs	r3, #1
 801090e:	e7eb      	b.n	80108e8 <__kernel_rem_pio2+0x368>
 8010910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010912:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010916:	f7ef fe0d 	bl	8000534 <__aeabi_i2d>
 801091a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801091e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010920:	46b3      	mov	fp, r6
 8010922:	461c      	mov	r4, r3
 8010924:	2700      	movs	r7, #0
 8010926:	f04f 0800 	mov.w	r8, #0
 801092a:	f04f 0900 	mov.w	r9, #0
 801092e:	9b06      	ldr	r3, [sp, #24]
 8010930:	429f      	cmp	r7, r3
 8010932:	dd06      	ble.n	8010942 <__kernel_rem_pio2+0x3c2>
 8010934:	ab70      	add	r3, sp, #448	; 0x1c0
 8010936:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801093a:	e9c3 8900 	strd	r8, r9, [r3]
 801093e:	3501      	adds	r5, #1
 8010940:	e7de      	b.n	8010900 <__kernel_rem_pio2+0x380>
 8010942:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8010946:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801094a:	f7ef fe5d 	bl	8000608 <__aeabi_dmul>
 801094e:	4602      	mov	r2, r0
 8010950:	460b      	mov	r3, r1
 8010952:	4640      	mov	r0, r8
 8010954:	4649      	mov	r1, r9
 8010956:	f7ef fca1 	bl	800029c <__adddf3>
 801095a:	3701      	adds	r7, #1
 801095c:	4680      	mov	r8, r0
 801095e:	4689      	mov	r9, r1
 8010960:	e7e5      	b.n	801092e <__kernel_rem_pio2+0x3ae>
 8010962:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010966:	e754      	b.n	8010812 <__kernel_rem_pio2+0x292>
 8010968:	ec47 6b10 	vmov	d0, r6, r7
 801096c:	f1ca 0000 	rsb	r0, sl, #0
 8010970:	f000 fa8e 	bl	8010e90 <scalbn>
 8010974:	ec57 6b10 	vmov	r6, r7, d0
 8010978:	4b9f      	ldr	r3, [pc, #636]	; (8010bf8 <__kernel_rem_pio2+0x678>)
 801097a:	ee10 0a10 	vmov	r0, s0
 801097e:	2200      	movs	r2, #0
 8010980:	4639      	mov	r1, r7
 8010982:	f7f0 f8c7 	bl	8000b14 <__aeabi_dcmpge>
 8010986:	b300      	cbz	r0, 80109ca <__kernel_rem_pio2+0x44a>
 8010988:	4b9c      	ldr	r3, [pc, #624]	; (8010bfc <__kernel_rem_pio2+0x67c>)
 801098a:	2200      	movs	r2, #0
 801098c:	4630      	mov	r0, r6
 801098e:	4639      	mov	r1, r7
 8010990:	f7ef fe3a 	bl	8000608 <__aeabi_dmul>
 8010994:	f7f0 f8e8 	bl	8000b68 <__aeabi_d2iz>
 8010998:	4605      	mov	r5, r0
 801099a:	f7ef fdcb 	bl	8000534 <__aeabi_i2d>
 801099e:	4b96      	ldr	r3, [pc, #600]	; (8010bf8 <__kernel_rem_pio2+0x678>)
 80109a0:	2200      	movs	r2, #0
 80109a2:	f7ef fe31 	bl	8000608 <__aeabi_dmul>
 80109a6:	460b      	mov	r3, r1
 80109a8:	4602      	mov	r2, r0
 80109aa:	4639      	mov	r1, r7
 80109ac:	4630      	mov	r0, r6
 80109ae:	f7ef fc73 	bl	8000298 <__aeabi_dsub>
 80109b2:	f7f0 f8d9 	bl	8000b68 <__aeabi_d2iz>
 80109b6:	f104 0b01 	add.w	fp, r4, #1
 80109ba:	ab0c      	add	r3, sp, #48	; 0x30
 80109bc:	f10a 0a18 	add.w	sl, sl, #24
 80109c0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80109c4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80109c8:	e72b      	b.n	8010822 <__kernel_rem_pio2+0x2a2>
 80109ca:	4630      	mov	r0, r6
 80109cc:	4639      	mov	r1, r7
 80109ce:	f7f0 f8cb 	bl	8000b68 <__aeabi_d2iz>
 80109d2:	ab0c      	add	r3, sp, #48	; 0x30
 80109d4:	46a3      	mov	fp, r4
 80109d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80109da:	e722      	b.n	8010822 <__kernel_rem_pio2+0x2a2>
 80109dc:	ab70      	add	r3, sp, #448	; 0x1c0
 80109de:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80109e2:	ab0c      	add	r3, sp, #48	; 0x30
 80109e4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80109e8:	f7ef fda4 	bl	8000534 <__aeabi_i2d>
 80109ec:	4622      	mov	r2, r4
 80109ee:	462b      	mov	r3, r5
 80109f0:	f7ef fe0a 	bl	8000608 <__aeabi_dmul>
 80109f4:	4632      	mov	r2, r6
 80109f6:	e9c9 0100 	strd	r0, r1, [r9]
 80109fa:	463b      	mov	r3, r7
 80109fc:	4620      	mov	r0, r4
 80109fe:	4629      	mov	r1, r5
 8010a00:	f7ef fe02 	bl	8000608 <__aeabi_dmul>
 8010a04:	f108 38ff 	add.w	r8, r8, #4294967295
 8010a08:	4604      	mov	r4, r0
 8010a0a:	460d      	mov	r5, r1
 8010a0c:	e713      	b.n	8010836 <__kernel_rem_pio2+0x2b6>
 8010a0e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8010a12:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8010a16:	f7ef fdf7 	bl	8000608 <__aeabi_dmul>
 8010a1a:	4602      	mov	r2, r0
 8010a1c:	460b      	mov	r3, r1
 8010a1e:	4620      	mov	r0, r4
 8010a20:	4629      	mov	r1, r5
 8010a22:	f7ef fc3b 	bl	800029c <__adddf3>
 8010a26:	3601      	adds	r6, #1
 8010a28:	4604      	mov	r4, r0
 8010a2a:	460d      	mov	r5, r1
 8010a2c:	9b04      	ldr	r3, [sp, #16]
 8010a2e:	429e      	cmp	r6, r3
 8010a30:	dc01      	bgt.n	8010a36 <__kernel_rem_pio2+0x4b6>
 8010a32:	45b0      	cmp	r8, r6
 8010a34:	daeb      	bge.n	8010a0e <__kernel_rem_pio2+0x48e>
 8010a36:	ab48      	add	r3, sp, #288	; 0x120
 8010a38:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010a3c:	e9c3 4500 	strd	r4, r5, [r3]
 8010a40:	3f01      	subs	r7, #1
 8010a42:	f108 0801 	add.w	r8, r8, #1
 8010a46:	e6ff      	b.n	8010848 <__kernel_rem_pio2+0x2c8>
 8010a48:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010a4a:	2b02      	cmp	r3, #2
 8010a4c:	dc0b      	bgt.n	8010a66 <__kernel_rem_pio2+0x4e6>
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	dc6e      	bgt.n	8010b30 <__kernel_rem_pio2+0x5b0>
 8010a52:	d045      	beq.n	8010ae0 <__kernel_rem_pio2+0x560>
 8010a54:	9b07      	ldr	r3, [sp, #28]
 8010a56:	f003 0007 	and.w	r0, r3, #7
 8010a5a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8010a5e:	ecbd 8b02 	vpop	{d8}
 8010a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a66:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010a68:	2b03      	cmp	r3, #3
 8010a6a:	d1f3      	bne.n	8010a54 <__kernel_rem_pio2+0x4d4>
 8010a6c:	ab48      	add	r3, sp, #288	; 0x120
 8010a6e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8010a72:	46d0      	mov	r8, sl
 8010a74:	46d9      	mov	r9, fp
 8010a76:	f1b9 0f00 	cmp.w	r9, #0
 8010a7a:	f1a8 0808 	sub.w	r8, r8, #8
 8010a7e:	dc64      	bgt.n	8010b4a <__kernel_rem_pio2+0x5ca>
 8010a80:	465c      	mov	r4, fp
 8010a82:	2c01      	cmp	r4, #1
 8010a84:	f1aa 0a08 	sub.w	sl, sl, #8
 8010a88:	dc7e      	bgt.n	8010b88 <__kernel_rem_pio2+0x608>
 8010a8a:	2000      	movs	r0, #0
 8010a8c:	2100      	movs	r1, #0
 8010a8e:	f1bb 0f01 	cmp.w	fp, #1
 8010a92:	f300 8097 	bgt.w	8010bc4 <__kernel_rem_pio2+0x644>
 8010a96:	9b02      	ldr	r3, [sp, #8]
 8010a98:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8010a9c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	f040 8099 	bne.w	8010bd8 <__kernel_rem_pio2+0x658>
 8010aa6:	9b01      	ldr	r3, [sp, #4]
 8010aa8:	e9c3 5600 	strd	r5, r6, [r3]
 8010aac:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8010ab0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010ab4:	e7ce      	b.n	8010a54 <__kernel_rem_pio2+0x4d4>
 8010ab6:	ab48      	add	r3, sp, #288	; 0x120
 8010ab8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ac0:	f7ef fbec 	bl	800029c <__adddf3>
 8010ac4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010ac8:	f1bb 0f00 	cmp.w	fp, #0
 8010acc:	daf3      	bge.n	8010ab6 <__kernel_rem_pio2+0x536>
 8010ace:	9b02      	ldr	r3, [sp, #8]
 8010ad0:	b113      	cbz	r3, 8010ad8 <__kernel_rem_pio2+0x558>
 8010ad2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010ad6:	4619      	mov	r1, r3
 8010ad8:	9b01      	ldr	r3, [sp, #4]
 8010ada:	e9c3 0100 	strd	r0, r1, [r3]
 8010ade:	e7b9      	b.n	8010a54 <__kernel_rem_pio2+0x4d4>
 8010ae0:	2000      	movs	r0, #0
 8010ae2:	2100      	movs	r1, #0
 8010ae4:	e7f0      	b.n	8010ac8 <__kernel_rem_pio2+0x548>
 8010ae6:	ab48      	add	r3, sp, #288	; 0x120
 8010ae8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010af0:	f7ef fbd4 	bl	800029c <__adddf3>
 8010af4:	3c01      	subs	r4, #1
 8010af6:	2c00      	cmp	r4, #0
 8010af8:	daf5      	bge.n	8010ae6 <__kernel_rem_pio2+0x566>
 8010afa:	9b02      	ldr	r3, [sp, #8]
 8010afc:	b1e3      	cbz	r3, 8010b38 <__kernel_rem_pio2+0x5b8>
 8010afe:	4602      	mov	r2, r0
 8010b00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b04:	9c01      	ldr	r4, [sp, #4]
 8010b06:	e9c4 2300 	strd	r2, r3, [r4]
 8010b0a:	4602      	mov	r2, r0
 8010b0c:	460b      	mov	r3, r1
 8010b0e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8010b12:	f7ef fbc1 	bl	8000298 <__aeabi_dsub>
 8010b16:	ad4a      	add	r5, sp, #296	; 0x128
 8010b18:	2401      	movs	r4, #1
 8010b1a:	45a3      	cmp	fp, r4
 8010b1c:	da0f      	bge.n	8010b3e <__kernel_rem_pio2+0x5be>
 8010b1e:	9b02      	ldr	r3, [sp, #8]
 8010b20:	b113      	cbz	r3, 8010b28 <__kernel_rem_pio2+0x5a8>
 8010b22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b26:	4619      	mov	r1, r3
 8010b28:	9b01      	ldr	r3, [sp, #4]
 8010b2a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010b2e:	e791      	b.n	8010a54 <__kernel_rem_pio2+0x4d4>
 8010b30:	465c      	mov	r4, fp
 8010b32:	2000      	movs	r0, #0
 8010b34:	2100      	movs	r1, #0
 8010b36:	e7de      	b.n	8010af6 <__kernel_rem_pio2+0x576>
 8010b38:	4602      	mov	r2, r0
 8010b3a:	460b      	mov	r3, r1
 8010b3c:	e7e2      	b.n	8010b04 <__kernel_rem_pio2+0x584>
 8010b3e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8010b42:	f7ef fbab 	bl	800029c <__adddf3>
 8010b46:	3401      	adds	r4, #1
 8010b48:	e7e7      	b.n	8010b1a <__kernel_rem_pio2+0x59a>
 8010b4a:	e9d8 4500 	ldrd	r4, r5, [r8]
 8010b4e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8010b52:	4620      	mov	r0, r4
 8010b54:	4632      	mov	r2, r6
 8010b56:	463b      	mov	r3, r7
 8010b58:	4629      	mov	r1, r5
 8010b5a:	f7ef fb9f 	bl	800029c <__adddf3>
 8010b5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010b62:	4602      	mov	r2, r0
 8010b64:	460b      	mov	r3, r1
 8010b66:	4620      	mov	r0, r4
 8010b68:	4629      	mov	r1, r5
 8010b6a:	f7ef fb95 	bl	8000298 <__aeabi_dsub>
 8010b6e:	4632      	mov	r2, r6
 8010b70:	463b      	mov	r3, r7
 8010b72:	f7ef fb93 	bl	800029c <__adddf3>
 8010b76:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010b7a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8010b7e:	ed88 7b00 	vstr	d7, [r8]
 8010b82:	f109 39ff 	add.w	r9, r9, #4294967295
 8010b86:	e776      	b.n	8010a76 <__kernel_rem_pio2+0x4f6>
 8010b88:	e9da 8900 	ldrd	r8, r9, [sl]
 8010b8c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8010b90:	4640      	mov	r0, r8
 8010b92:	4632      	mov	r2, r6
 8010b94:	463b      	mov	r3, r7
 8010b96:	4649      	mov	r1, r9
 8010b98:	f7ef fb80 	bl	800029c <__adddf3>
 8010b9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010ba0:	4602      	mov	r2, r0
 8010ba2:	460b      	mov	r3, r1
 8010ba4:	4640      	mov	r0, r8
 8010ba6:	4649      	mov	r1, r9
 8010ba8:	f7ef fb76 	bl	8000298 <__aeabi_dsub>
 8010bac:	4632      	mov	r2, r6
 8010bae:	463b      	mov	r3, r7
 8010bb0:	f7ef fb74 	bl	800029c <__adddf3>
 8010bb4:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010bb8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010bbc:	ed8a 7b00 	vstr	d7, [sl]
 8010bc0:	3c01      	subs	r4, #1
 8010bc2:	e75e      	b.n	8010a82 <__kernel_rem_pio2+0x502>
 8010bc4:	ab48      	add	r3, sp, #288	; 0x120
 8010bc6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bce:	f7ef fb65 	bl	800029c <__adddf3>
 8010bd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010bd6:	e75a      	b.n	8010a8e <__kernel_rem_pio2+0x50e>
 8010bd8:	9b01      	ldr	r3, [sp, #4]
 8010bda:	9a01      	ldr	r2, [sp, #4]
 8010bdc:	601d      	str	r5, [r3, #0]
 8010bde:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8010be2:	605c      	str	r4, [r3, #4]
 8010be4:	609f      	str	r7, [r3, #8]
 8010be6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8010bea:	60d3      	str	r3, [r2, #12]
 8010bec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010bf0:	6110      	str	r0, [r2, #16]
 8010bf2:	6153      	str	r3, [r2, #20]
 8010bf4:	e72e      	b.n	8010a54 <__kernel_rem_pio2+0x4d4>
 8010bf6:	bf00      	nop
 8010bf8:	41700000 	.word	0x41700000
 8010bfc:	3e700000 	.word	0x3e700000

08010c00 <__kernel_sin>:
 8010c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c04:	ed2d 8b04 	vpush	{d8-d9}
 8010c08:	eeb0 8a41 	vmov.f32	s16, s2
 8010c0c:	eef0 8a61 	vmov.f32	s17, s3
 8010c10:	ec55 4b10 	vmov	r4, r5, d0
 8010c14:	b083      	sub	sp, #12
 8010c16:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010c1a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010c1e:	9001      	str	r0, [sp, #4]
 8010c20:	da06      	bge.n	8010c30 <__kernel_sin+0x30>
 8010c22:	ee10 0a10 	vmov	r0, s0
 8010c26:	4629      	mov	r1, r5
 8010c28:	f7ef ff9e 	bl	8000b68 <__aeabi_d2iz>
 8010c2c:	2800      	cmp	r0, #0
 8010c2e:	d051      	beq.n	8010cd4 <__kernel_sin+0xd4>
 8010c30:	4622      	mov	r2, r4
 8010c32:	462b      	mov	r3, r5
 8010c34:	4620      	mov	r0, r4
 8010c36:	4629      	mov	r1, r5
 8010c38:	f7ef fce6 	bl	8000608 <__aeabi_dmul>
 8010c3c:	4682      	mov	sl, r0
 8010c3e:	468b      	mov	fp, r1
 8010c40:	4602      	mov	r2, r0
 8010c42:	460b      	mov	r3, r1
 8010c44:	4620      	mov	r0, r4
 8010c46:	4629      	mov	r1, r5
 8010c48:	f7ef fcde 	bl	8000608 <__aeabi_dmul>
 8010c4c:	a341      	add	r3, pc, #260	; (adr r3, 8010d54 <__kernel_sin+0x154>)
 8010c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c52:	4680      	mov	r8, r0
 8010c54:	4689      	mov	r9, r1
 8010c56:	4650      	mov	r0, sl
 8010c58:	4659      	mov	r1, fp
 8010c5a:	f7ef fcd5 	bl	8000608 <__aeabi_dmul>
 8010c5e:	a33f      	add	r3, pc, #252	; (adr r3, 8010d5c <__kernel_sin+0x15c>)
 8010c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c64:	f7ef fb18 	bl	8000298 <__aeabi_dsub>
 8010c68:	4652      	mov	r2, sl
 8010c6a:	465b      	mov	r3, fp
 8010c6c:	f7ef fccc 	bl	8000608 <__aeabi_dmul>
 8010c70:	a33c      	add	r3, pc, #240	; (adr r3, 8010d64 <__kernel_sin+0x164>)
 8010c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c76:	f7ef fb11 	bl	800029c <__adddf3>
 8010c7a:	4652      	mov	r2, sl
 8010c7c:	465b      	mov	r3, fp
 8010c7e:	f7ef fcc3 	bl	8000608 <__aeabi_dmul>
 8010c82:	a33a      	add	r3, pc, #232	; (adr r3, 8010d6c <__kernel_sin+0x16c>)
 8010c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c88:	f7ef fb06 	bl	8000298 <__aeabi_dsub>
 8010c8c:	4652      	mov	r2, sl
 8010c8e:	465b      	mov	r3, fp
 8010c90:	f7ef fcba 	bl	8000608 <__aeabi_dmul>
 8010c94:	a337      	add	r3, pc, #220	; (adr r3, 8010d74 <__kernel_sin+0x174>)
 8010c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c9a:	f7ef faff 	bl	800029c <__adddf3>
 8010c9e:	9b01      	ldr	r3, [sp, #4]
 8010ca0:	4606      	mov	r6, r0
 8010ca2:	460f      	mov	r7, r1
 8010ca4:	b9eb      	cbnz	r3, 8010ce2 <__kernel_sin+0xe2>
 8010ca6:	4602      	mov	r2, r0
 8010ca8:	460b      	mov	r3, r1
 8010caa:	4650      	mov	r0, sl
 8010cac:	4659      	mov	r1, fp
 8010cae:	f7ef fcab 	bl	8000608 <__aeabi_dmul>
 8010cb2:	a325      	add	r3, pc, #148	; (adr r3, 8010d48 <__kernel_sin+0x148>)
 8010cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb8:	f7ef faee 	bl	8000298 <__aeabi_dsub>
 8010cbc:	4642      	mov	r2, r8
 8010cbe:	464b      	mov	r3, r9
 8010cc0:	f7ef fca2 	bl	8000608 <__aeabi_dmul>
 8010cc4:	4602      	mov	r2, r0
 8010cc6:	460b      	mov	r3, r1
 8010cc8:	4620      	mov	r0, r4
 8010cca:	4629      	mov	r1, r5
 8010ccc:	f7ef fae6 	bl	800029c <__adddf3>
 8010cd0:	4604      	mov	r4, r0
 8010cd2:	460d      	mov	r5, r1
 8010cd4:	ec45 4b10 	vmov	d0, r4, r5
 8010cd8:	b003      	add	sp, #12
 8010cda:	ecbd 8b04 	vpop	{d8-d9}
 8010cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ce2:	4b1b      	ldr	r3, [pc, #108]	; (8010d50 <__kernel_sin+0x150>)
 8010ce4:	ec51 0b18 	vmov	r0, r1, d8
 8010ce8:	2200      	movs	r2, #0
 8010cea:	f7ef fc8d 	bl	8000608 <__aeabi_dmul>
 8010cee:	4632      	mov	r2, r6
 8010cf0:	ec41 0b19 	vmov	d9, r0, r1
 8010cf4:	463b      	mov	r3, r7
 8010cf6:	4640      	mov	r0, r8
 8010cf8:	4649      	mov	r1, r9
 8010cfa:	f7ef fc85 	bl	8000608 <__aeabi_dmul>
 8010cfe:	4602      	mov	r2, r0
 8010d00:	460b      	mov	r3, r1
 8010d02:	ec51 0b19 	vmov	r0, r1, d9
 8010d06:	f7ef fac7 	bl	8000298 <__aeabi_dsub>
 8010d0a:	4652      	mov	r2, sl
 8010d0c:	465b      	mov	r3, fp
 8010d0e:	f7ef fc7b 	bl	8000608 <__aeabi_dmul>
 8010d12:	ec53 2b18 	vmov	r2, r3, d8
 8010d16:	f7ef fabf 	bl	8000298 <__aeabi_dsub>
 8010d1a:	a30b      	add	r3, pc, #44	; (adr r3, 8010d48 <__kernel_sin+0x148>)
 8010d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d20:	4606      	mov	r6, r0
 8010d22:	460f      	mov	r7, r1
 8010d24:	4640      	mov	r0, r8
 8010d26:	4649      	mov	r1, r9
 8010d28:	f7ef fc6e 	bl	8000608 <__aeabi_dmul>
 8010d2c:	4602      	mov	r2, r0
 8010d2e:	460b      	mov	r3, r1
 8010d30:	4630      	mov	r0, r6
 8010d32:	4639      	mov	r1, r7
 8010d34:	f7ef fab2 	bl	800029c <__adddf3>
 8010d38:	4602      	mov	r2, r0
 8010d3a:	460b      	mov	r3, r1
 8010d3c:	4620      	mov	r0, r4
 8010d3e:	4629      	mov	r1, r5
 8010d40:	f7ef faaa 	bl	8000298 <__aeabi_dsub>
 8010d44:	e7c4      	b.n	8010cd0 <__kernel_sin+0xd0>
 8010d46:	bf00      	nop
 8010d48:	55555549 	.word	0x55555549
 8010d4c:	3fc55555 	.word	0x3fc55555
 8010d50:	3fe00000 	.word	0x3fe00000
 8010d54:	5acfd57c 	.word	0x5acfd57c
 8010d58:	3de5d93a 	.word	0x3de5d93a
 8010d5c:	8a2b9ceb 	.word	0x8a2b9ceb
 8010d60:	3e5ae5e6 	.word	0x3e5ae5e6
 8010d64:	57b1fe7d 	.word	0x57b1fe7d
 8010d68:	3ec71de3 	.word	0x3ec71de3
 8010d6c:	19c161d5 	.word	0x19c161d5
 8010d70:	3f2a01a0 	.word	0x3f2a01a0
 8010d74:	1110f8a6 	.word	0x1110f8a6
 8010d78:	3f811111 	.word	0x3f811111

08010d7c <fabs>:
 8010d7c:	ec51 0b10 	vmov	r0, r1, d0
 8010d80:	ee10 2a10 	vmov	r2, s0
 8010d84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010d88:	ec43 2b10 	vmov	d0, r2, r3
 8010d8c:	4770      	bx	lr
	...

08010d90 <floor>:
 8010d90:	ec51 0b10 	vmov	r0, r1, d0
 8010d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d98:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8010d9c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010da0:	2e13      	cmp	r6, #19
 8010da2:	ee10 5a10 	vmov	r5, s0
 8010da6:	ee10 8a10 	vmov	r8, s0
 8010daa:	460c      	mov	r4, r1
 8010dac:	dc32      	bgt.n	8010e14 <floor+0x84>
 8010dae:	2e00      	cmp	r6, #0
 8010db0:	da14      	bge.n	8010ddc <floor+0x4c>
 8010db2:	a333      	add	r3, pc, #204	; (adr r3, 8010e80 <floor+0xf0>)
 8010db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db8:	f7ef fa70 	bl	800029c <__adddf3>
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	f7ef feb2 	bl	8000b28 <__aeabi_dcmpgt>
 8010dc4:	b138      	cbz	r0, 8010dd6 <floor+0x46>
 8010dc6:	2c00      	cmp	r4, #0
 8010dc8:	da57      	bge.n	8010e7a <floor+0xea>
 8010dca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010dce:	431d      	orrs	r5, r3
 8010dd0:	d001      	beq.n	8010dd6 <floor+0x46>
 8010dd2:	4c2d      	ldr	r4, [pc, #180]	; (8010e88 <floor+0xf8>)
 8010dd4:	2500      	movs	r5, #0
 8010dd6:	4621      	mov	r1, r4
 8010dd8:	4628      	mov	r0, r5
 8010dda:	e025      	b.n	8010e28 <floor+0x98>
 8010ddc:	4f2b      	ldr	r7, [pc, #172]	; (8010e8c <floor+0xfc>)
 8010dde:	4137      	asrs	r7, r6
 8010de0:	ea01 0307 	and.w	r3, r1, r7
 8010de4:	4303      	orrs	r3, r0
 8010de6:	d01f      	beq.n	8010e28 <floor+0x98>
 8010de8:	a325      	add	r3, pc, #148	; (adr r3, 8010e80 <floor+0xf0>)
 8010dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dee:	f7ef fa55 	bl	800029c <__adddf3>
 8010df2:	2200      	movs	r2, #0
 8010df4:	2300      	movs	r3, #0
 8010df6:	f7ef fe97 	bl	8000b28 <__aeabi_dcmpgt>
 8010dfa:	2800      	cmp	r0, #0
 8010dfc:	d0eb      	beq.n	8010dd6 <floor+0x46>
 8010dfe:	2c00      	cmp	r4, #0
 8010e00:	bfbe      	ittt	lt
 8010e02:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010e06:	fa43 f606 	asrlt.w	r6, r3, r6
 8010e0a:	19a4      	addlt	r4, r4, r6
 8010e0c:	ea24 0407 	bic.w	r4, r4, r7
 8010e10:	2500      	movs	r5, #0
 8010e12:	e7e0      	b.n	8010dd6 <floor+0x46>
 8010e14:	2e33      	cmp	r6, #51	; 0x33
 8010e16:	dd0b      	ble.n	8010e30 <floor+0xa0>
 8010e18:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010e1c:	d104      	bne.n	8010e28 <floor+0x98>
 8010e1e:	ee10 2a10 	vmov	r2, s0
 8010e22:	460b      	mov	r3, r1
 8010e24:	f7ef fa3a 	bl	800029c <__adddf3>
 8010e28:	ec41 0b10 	vmov	d0, r0, r1
 8010e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e30:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8010e34:	f04f 33ff 	mov.w	r3, #4294967295
 8010e38:	fa23 f707 	lsr.w	r7, r3, r7
 8010e3c:	4207      	tst	r7, r0
 8010e3e:	d0f3      	beq.n	8010e28 <floor+0x98>
 8010e40:	a30f      	add	r3, pc, #60	; (adr r3, 8010e80 <floor+0xf0>)
 8010e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e46:	f7ef fa29 	bl	800029c <__adddf3>
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	f7ef fe6b 	bl	8000b28 <__aeabi_dcmpgt>
 8010e52:	2800      	cmp	r0, #0
 8010e54:	d0bf      	beq.n	8010dd6 <floor+0x46>
 8010e56:	2c00      	cmp	r4, #0
 8010e58:	da02      	bge.n	8010e60 <floor+0xd0>
 8010e5a:	2e14      	cmp	r6, #20
 8010e5c:	d103      	bne.n	8010e66 <floor+0xd6>
 8010e5e:	3401      	adds	r4, #1
 8010e60:	ea25 0507 	bic.w	r5, r5, r7
 8010e64:	e7b7      	b.n	8010dd6 <floor+0x46>
 8010e66:	2301      	movs	r3, #1
 8010e68:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010e6c:	fa03 f606 	lsl.w	r6, r3, r6
 8010e70:	4435      	add	r5, r6
 8010e72:	4545      	cmp	r5, r8
 8010e74:	bf38      	it	cc
 8010e76:	18e4      	addcc	r4, r4, r3
 8010e78:	e7f2      	b.n	8010e60 <floor+0xd0>
 8010e7a:	2500      	movs	r5, #0
 8010e7c:	462c      	mov	r4, r5
 8010e7e:	e7aa      	b.n	8010dd6 <floor+0x46>
 8010e80:	8800759c 	.word	0x8800759c
 8010e84:	7e37e43c 	.word	0x7e37e43c
 8010e88:	bff00000 	.word	0xbff00000
 8010e8c:	000fffff 	.word	0x000fffff

08010e90 <scalbn>:
 8010e90:	b570      	push	{r4, r5, r6, lr}
 8010e92:	ec55 4b10 	vmov	r4, r5, d0
 8010e96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010e9a:	4606      	mov	r6, r0
 8010e9c:	462b      	mov	r3, r5
 8010e9e:	b99a      	cbnz	r2, 8010ec8 <scalbn+0x38>
 8010ea0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010ea4:	4323      	orrs	r3, r4
 8010ea6:	d036      	beq.n	8010f16 <scalbn+0x86>
 8010ea8:	4b39      	ldr	r3, [pc, #228]	; (8010f90 <scalbn+0x100>)
 8010eaa:	4629      	mov	r1, r5
 8010eac:	ee10 0a10 	vmov	r0, s0
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	f7ef fba9 	bl	8000608 <__aeabi_dmul>
 8010eb6:	4b37      	ldr	r3, [pc, #220]	; (8010f94 <scalbn+0x104>)
 8010eb8:	429e      	cmp	r6, r3
 8010eba:	4604      	mov	r4, r0
 8010ebc:	460d      	mov	r5, r1
 8010ebe:	da10      	bge.n	8010ee2 <scalbn+0x52>
 8010ec0:	a32b      	add	r3, pc, #172	; (adr r3, 8010f70 <scalbn+0xe0>)
 8010ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec6:	e03a      	b.n	8010f3e <scalbn+0xae>
 8010ec8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010ecc:	428a      	cmp	r2, r1
 8010ece:	d10c      	bne.n	8010eea <scalbn+0x5a>
 8010ed0:	ee10 2a10 	vmov	r2, s0
 8010ed4:	4620      	mov	r0, r4
 8010ed6:	4629      	mov	r1, r5
 8010ed8:	f7ef f9e0 	bl	800029c <__adddf3>
 8010edc:	4604      	mov	r4, r0
 8010ede:	460d      	mov	r5, r1
 8010ee0:	e019      	b.n	8010f16 <scalbn+0x86>
 8010ee2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010ee6:	460b      	mov	r3, r1
 8010ee8:	3a36      	subs	r2, #54	; 0x36
 8010eea:	4432      	add	r2, r6
 8010eec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010ef0:	428a      	cmp	r2, r1
 8010ef2:	dd08      	ble.n	8010f06 <scalbn+0x76>
 8010ef4:	2d00      	cmp	r5, #0
 8010ef6:	a120      	add	r1, pc, #128	; (adr r1, 8010f78 <scalbn+0xe8>)
 8010ef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010efc:	da1c      	bge.n	8010f38 <scalbn+0xa8>
 8010efe:	a120      	add	r1, pc, #128	; (adr r1, 8010f80 <scalbn+0xf0>)
 8010f00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f04:	e018      	b.n	8010f38 <scalbn+0xa8>
 8010f06:	2a00      	cmp	r2, #0
 8010f08:	dd08      	ble.n	8010f1c <scalbn+0x8c>
 8010f0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010f0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010f12:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010f16:	ec45 4b10 	vmov	d0, r4, r5
 8010f1a:	bd70      	pop	{r4, r5, r6, pc}
 8010f1c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010f20:	da19      	bge.n	8010f56 <scalbn+0xc6>
 8010f22:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010f26:	429e      	cmp	r6, r3
 8010f28:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8010f2c:	dd0a      	ble.n	8010f44 <scalbn+0xb4>
 8010f2e:	a112      	add	r1, pc, #72	; (adr r1, 8010f78 <scalbn+0xe8>)
 8010f30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d1e2      	bne.n	8010efe <scalbn+0x6e>
 8010f38:	a30f      	add	r3, pc, #60	; (adr r3, 8010f78 <scalbn+0xe8>)
 8010f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f3e:	f7ef fb63 	bl	8000608 <__aeabi_dmul>
 8010f42:	e7cb      	b.n	8010edc <scalbn+0x4c>
 8010f44:	a10a      	add	r1, pc, #40	; (adr r1, 8010f70 <scalbn+0xe0>)
 8010f46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d0b8      	beq.n	8010ec0 <scalbn+0x30>
 8010f4e:	a10e      	add	r1, pc, #56	; (adr r1, 8010f88 <scalbn+0xf8>)
 8010f50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f54:	e7b4      	b.n	8010ec0 <scalbn+0x30>
 8010f56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010f5a:	3236      	adds	r2, #54	; 0x36
 8010f5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010f60:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010f64:	4620      	mov	r0, r4
 8010f66:	4b0c      	ldr	r3, [pc, #48]	; (8010f98 <scalbn+0x108>)
 8010f68:	2200      	movs	r2, #0
 8010f6a:	e7e8      	b.n	8010f3e <scalbn+0xae>
 8010f6c:	f3af 8000 	nop.w
 8010f70:	c2f8f359 	.word	0xc2f8f359
 8010f74:	01a56e1f 	.word	0x01a56e1f
 8010f78:	8800759c 	.word	0x8800759c
 8010f7c:	7e37e43c 	.word	0x7e37e43c
 8010f80:	8800759c 	.word	0x8800759c
 8010f84:	fe37e43c 	.word	0xfe37e43c
 8010f88:	c2f8f359 	.word	0xc2f8f359
 8010f8c:	81a56e1f 	.word	0x81a56e1f
 8010f90:	43500000 	.word	0x43500000
 8010f94:	ffff3cb0 	.word	0xffff3cb0
 8010f98:	3c900000 	.word	0x3c900000

08010f9c <fabsf>:
 8010f9c:	ee10 3a10 	vmov	r3, s0
 8010fa0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010fa4:	ee00 3a10 	vmov	s0, r3
 8010fa8:	4770      	bx	lr

08010faa <finitef>:
 8010faa:	b082      	sub	sp, #8
 8010fac:	ed8d 0a01 	vstr	s0, [sp, #4]
 8010fb0:	9801      	ldr	r0, [sp, #4]
 8010fb2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010fb6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8010fba:	bfac      	ite	ge
 8010fbc:	2000      	movge	r0, #0
 8010fbe:	2001      	movlt	r0, #1
 8010fc0:	b002      	add	sp, #8
 8010fc2:	4770      	bx	lr

08010fc4 <nanf>:
 8010fc4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010fcc <nanf+0x8>
 8010fc8:	4770      	bx	lr
 8010fca:	bf00      	nop
 8010fcc:	7fc00000 	.word	0x7fc00000

08010fd0 <rintf>:
 8010fd0:	ee10 2a10 	vmov	r2, s0
 8010fd4:	b513      	push	{r0, r1, r4, lr}
 8010fd6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8010fda:	397f      	subs	r1, #127	; 0x7f
 8010fdc:	2916      	cmp	r1, #22
 8010fde:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8010fe2:	dc47      	bgt.n	8011074 <rintf+0xa4>
 8010fe4:	b32b      	cbz	r3, 8011032 <rintf+0x62>
 8010fe6:	2900      	cmp	r1, #0
 8010fe8:	ee10 3a10 	vmov	r3, s0
 8010fec:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8010ff0:	da21      	bge.n	8011036 <rintf+0x66>
 8010ff2:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8010ff6:	425b      	negs	r3, r3
 8010ff8:	4921      	ldr	r1, [pc, #132]	; (8011080 <rintf+0xb0>)
 8010ffa:	0a5b      	lsrs	r3, r3, #9
 8010ffc:	0d12      	lsrs	r2, r2, #20
 8010ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011002:	0512      	lsls	r2, r2, #20
 8011004:	4313      	orrs	r3, r2
 8011006:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 801100a:	ee07 3a90 	vmov	s15, r3
 801100e:	edd1 6a00 	vldr	s13, [r1]
 8011012:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8011016:	ed8d 7a01 	vstr	s14, [sp, #4]
 801101a:	eddd 7a01 	vldr	s15, [sp, #4]
 801101e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011022:	ee17 3a90 	vmov	r3, s15
 8011026:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801102a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 801102e:	ee00 3a10 	vmov	s0, r3
 8011032:	b002      	add	sp, #8
 8011034:	bd10      	pop	{r4, pc}
 8011036:	4a13      	ldr	r2, [pc, #76]	; (8011084 <rintf+0xb4>)
 8011038:	410a      	asrs	r2, r1
 801103a:	4213      	tst	r3, r2
 801103c:	d0f9      	beq.n	8011032 <rintf+0x62>
 801103e:	0854      	lsrs	r4, r2, #1
 8011040:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8011044:	d006      	beq.n	8011054 <rintf+0x84>
 8011046:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801104a:	ea23 0304 	bic.w	r3, r3, r4
 801104e:	fa42 f101 	asr.w	r1, r2, r1
 8011052:	430b      	orrs	r3, r1
 8011054:	4a0a      	ldr	r2, [pc, #40]	; (8011080 <rintf+0xb0>)
 8011056:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801105a:	ed90 7a00 	vldr	s14, [r0]
 801105e:	ee07 3a90 	vmov	s15, r3
 8011062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011066:	edcd 7a01 	vstr	s15, [sp, #4]
 801106a:	ed9d 0a01 	vldr	s0, [sp, #4]
 801106e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011072:	e7de      	b.n	8011032 <rintf+0x62>
 8011074:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011078:	d3db      	bcc.n	8011032 <rintf+0x62>
 801107a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801107e:	e7d8      	b.n	8011032 <rintf+0x62>
 8011080:	0801a440 	.word	0x0801a440
 8011084:	007fffff 	.word	0x007fffff

08011088 <scalbnf>:
 8011088:	ee10 3a10 	vmov	r3, s0
 801108c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8011090:	d025      	beq.n	80110de <scalbnf+0x56>
 8011092:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8011096:	d302      	bcc.n	801109e <scalbnf+0x16>
 8011098:	ee30 0a00 	vadd.f32	s0, s0, s0
 801109c:	4770      	bx	lr
 801109e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80110a2:	d122      	bne.n	80110ea <scalbnf+0x62>
 80110a4:	4b2a      	ldr	r3, [pc, #168]	; (8011150 <scalbnf+0xc8>)
 80110a6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8011154 <scalbnf+0xcc>
 80110aa:	4298      	cmp	r0, r3
 80110ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 80110b0:	db16      	blt.n	80110e0 <scalbnf+0x58>
 80110b2:	ee10 3a10 	vmov	r3, s0
 80110b6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80110ba:	3a19      	subs	r2, #25
 80110bc:	4402      	add	r2, r0
 80110be:	2afe      	cmp	r2, #254	; 0xfe
 80110c0:	dd15      	ble.n	80110ee <scalbnf+0x66>
 80110c2:	ee10 3a10 	vmov	r3, s0
 80110c6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8011158 <scalbnf+0xd0>
 80110ca:	eddf 6a24 	vldr	s13, [pc, #144]	; 801115c <scalbnf+0xd4>
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	eeb0 7a67 	vmov.f32	s14, s15
 80110d4:	bfb8      	it	lt
 80110d6:	eef0 7a66 	vmovlt.f32	s15, s13
 80110da:	ee27 0a27 	vmul.f32	s0, s14, s15
 80110de:	4770      	bx	lr
 80110e0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8011160 <scalbnf+0xd8>
 80110e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80110e8:	4770      	bx	lr
 80110ea:	0dd2      	lsrs	r2, r2, #23
 80110ec:	e7e6      	b.n	80110bc <scalbnf+0x34>
 80110ee:	2a00      	cmp	r2, #0
 80110f0:	dd06      	ble.n	8011100 <scalbnf+0x78>
 80110f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80110f6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80110fa:	ee00 3a10 	vmov	s0, r3
 80110fe:	4770      	bx	lr
 8011100:	f112 0f16 	cmn.w	r2, #22
 8011104:	da1a      	bge.n	801113c <scalbnf+0xb4>
 8011106:	f24c 3350 	movw	r3, #50000	; 0xc350
 801110a:	4298      	cmp	r0, r3
 801110c:	ee10 3a10 	vmov	r3, s0
 8011110:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011114:	dd0a      	ble.n	801112c <scalbnf+0xa4>
 8011116:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8011158 <scalbnf+0xd0>
 801111a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801115c <scalbnf+0xd4>
 801111e:	eef0 7a40 	vmov.f32	s15, s0
 8011122:	2b00      	cmp	r3, #0
 8011124:	bf18      	it	ne
 8011126:	eeb0 0a47 	vmovne.f32	s0, s14
 801112a:	e7db      	b.n	80110e4 <scalbnf+0x5c>
 801112c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8011160 <scalbnf+0xd8>
 8011130:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8011164 <scalbnf+0xdc>
 8011134:	eef0 7a40 	vmov.f32	s15, s0
 8011138:	2b00      	cmp	r3, #0
 801113a:	e7f3      	b.n	8011124 <scalbnf+0x9c>
 801113c:	3219      	adds	r2, #25
 801113e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011142:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8011146:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011168 <scalbnf+0xe0>
 801114a:	ee07 3a10 	vmov	s14, r3
 801114e:	e7c4      	b.n	80110da <scalbnf+0x52>
 8011150:	ffff3cb0 	.word	0xffff3cb0
 8011154:	4c000000 	.word	0x4c000000
 8011158:	7149f2ca 	.word	0x7149f2ca
 801115c:	f149f2ca 	.word	0xf149f2ca
 8011160:	0da24260 	.word	0x0da24260
 8011164:	8da24260 	.word	0x8da24260
 8011168:	33000000 	.word	0x33000000

0801116c <_getpid>:
 801116c:	4b02      	ldr	r3, [pc, #8]	; (8011178 <_getpid+0xc>)
 801116e:	2258      	movs	r2, #88	; 0x58
 8011170:	601a      	str	r2, [r3, #0]
 8011172:	f04f 30ff 	mov.w	r0, #4294967295
 8011176:	4770      	bx	lr
 8011178:	20012908 	.word	0x20012908

0801117c <_kill>:
 801117c:	4b02      	ldr	r3, [pc, #8]	; (8011188 <_kill+0xc>)
 801117e:	2258      	movs	r2, #88	; 0x58
 8011180:	601a      	str	r2, [r3, #0]
 8011182:	f04f 30ff 	mov.w	r0, #4294967295
 8011186:	4770      	bx	lr
 8011188:	20012908 	.word	0x20012908

0801118c <_exit>:
 801118c:	e7fe      	b.n	801118c <_exit>
	...

08011190 <_init>:
 8011190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011192:	bf00      	nop
 8011194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011196:	bc08      	pop	{r3}
 8011198:	469e      	mov	lr, r3
 801119a:	4770      	bx	lr

0801119c <_fini>:
 801119c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801119e:	bf00      	nop
 80111a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111a2:	bc08      	pop	{r3}
 80111a4:	469e      	mov	lr, r3
 80111a6:	4770      	bx	lr
